// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Caml_array = require("melange.runtime/caml_array.js");
var Bastet__ArrayF = require("./ArrayF.js");
var Stdlib__ArrayLabels = require("melange/./arrayLabels.js");

function length(prim) {
  return prim.length;
}

var make = Caml_array.make;

var map = Stdlib__ArrayLabels.map;

function mapi(f, arr) {
  return Stdlib__ArrayLabels.mapi((function (index, e) {
                return Curry._2(f, e, index);
              }), arr);
}

var fold_left = Stdlib__ArrayLabels.fold_left;

var every = Stdlib__ArrayLabels.for_all;

function slice(start, end_, arr) {
  return Stdlib__ArrayLabels.sub(arr, start, end_ - start | 0);
}

var A = Bastet__ArrayF.Make({
      length: length,
      make: make,
      append: Stdlib__ArrayLabels.append,
      map: map,
      mapi: mapi,
      fold_left: fold_left,
      every: every,
      slice: slice
    });

var zip_with = A.zip_with;

var zip = A.zip;

var Functor = A.Functor;

var Alt = A.Alt;

var Apply = A.Apply;

var Applicative = A.Applicative;

var Monad = A.Monad;

var Foldable = A.Foldable;

var Unfoldable = A.Unfoldable;

var Traversable = A.Traversable;

var Eq = A.Eq;

var Ord = A.Ord;

var Show = A.Show;

var Invariant = A.Invariant;

var Extend = A.Extend;

var Infix = A.Infix;

exports.zip_with = zip_with;
exports.zip = zip;
exports.Functor = Functor;
exports.Alt = Alt;
exports.Apply = Apply;
exports.Applicative = Applicative;
exports.Monad = Monad;
exports.Foldable = Foldable;
exports.Unfoldable = Unfoldable;
exports.Traversable = Traversable;
exports.Eq = Eq;
exports.Ord = Ord;
exports.Show = Show;
exports.Invariant = Invariant;
exports.Extend = Extend;
exports.Infix = Infix;
/* A Not a pure module */
