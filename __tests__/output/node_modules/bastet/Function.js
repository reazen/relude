// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Bastet__Infix = require("./Infix.js");

function flip(f, b, a) {
  return Curry._2(f, a, b);
}

function $$const(a, param) {
  return a;
}

function Functor(T) {
  var map = function (f, g, x) {
    return Curry._1(f, Curry._1(g, x));
  };
  return {
          map: map
        };
}

function Apply(T) {
  var map = function (f, g, x) {
    return Curry._1(f, Curry._1(g, x));
  };
  var apply = function (f, g, x) {
    return Curry._2(f, x, Curry._1(g, x));
  };
  return {
          map: map,
          apply: apply
        };
}

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

var Semigroupoid = {
  compose: compose
};

function id(a) {
  return a;
}

var Category = {
  compose: compose,
  id: id
};

function Invariant(T) {
  var imap = function (f, param) {
    return function (param, param$1) {
      return Curry._1(f, Curry._1(param, param$1));
    };
  };
  return {
          imap: imap
        };
}

var I = Bastet__Infix.Semigroupoid(Semigroupoid);

var $great$dot = I.$great$dot;

function dimap(a_to_b, c_to_d, b_to_c) {
  return Curry._2($great$dot, Curry._2($great$dot, a_to_b, b_to_c), c_to_d);
}

var Profunctor = {
  dimap: dimap
};

function Contravariant(T) {
  var cmap = function (f, g, x) {
    return Curry._1(g, Curry._1(f, x));
  };
  return {
          cmap: cmap
        };
}

function Bicontravariant(T) {
  var bicmap = function (f, g, h, a, b) {
    return Curry._2(h, Curry._1(f, a), Curry._1(g, b));
  };
  return {
          bicmap: bicmap
        };
}

var include = Bastet__Infix.Semigroupoid(Semigroupoid);

var Infix = include;

exports.flip = flip;
exports.$$const = $$const;
exports.Functor = Functor;
exports.Apply = Apply;
exports.Semigroupoid = Semigroupoid;
exports.Category = Category;
exports.Invariant = Invariant;
exports.Profunctor = Profunctor;
exports.Contravariant = Contravariant;
exports.Bicontravariant = Bicontravariant;
exports.Infix = Infix;
/* I Not a pure module */
