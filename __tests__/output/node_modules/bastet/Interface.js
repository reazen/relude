// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Caml_obj = require("melange.runtime/caml_obj.js");

function invert(ordering) {
  if (ordering === "greater_than") {
    return "less_than";
  } else if (ordering === "less_than") {
    return "greater_than";
  } else {
    return "equal_to";
  }
}

function int_to_ordering(x) {
  if (x < 0) {
    return "less_than";
  } else if (x === 0) {
    return "equal_to";
  } else {
    return "greater_than";
  }
}

function unsafe_compare(a, b) {
  if (Caml_obj.caml_lessthan(a, b)) {
    return "less_than";
  } else if (Caml_obj.caml_equal(a, b)) {
    return "equal_to";
  } else {
    return "greater_than";
  }
}

function Ordering(O) {
  var less_than = function (a, b) {
    return Curry._2(O.compare, a, b) === "less_than";
  };
  var greater_than = function (a, b) {
    return Curry._2(O.compare, a, b) === "greater_than";
  };
  var less_than_or_equal = function (a, b) {
    return Curry._2(O.compare, a, b) !== "greater_than";
  };
  var greater_than_or_equal = function (a, b) {
    return Curry._2(O.compare, a, b) !== "less_than";
  };
  return {
          less_than: less_than,
          greater_than: greater_than,
          less_than_or_equal: less_than_or_equal,
          greater_than_or_equal: greater_than_or_equal
        };
}

exports.invert = invert;
exports.int_to_ordering = int_to_ordering;
exports.unsafe_compare = unsafe_compare;
exports.Ordering = Ordering;
/* No side effect */
