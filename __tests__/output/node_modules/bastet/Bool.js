// Generated by Melange
'use strict';

var Stdlib = require("melange/./stdlib.js");
var Caml_obj = require("melange.runtime/caml_obj.js");
var Bastet__Infix = require("./Infix.js");
var Bastet__Interface = require("./Interface.js");

function append(prim0, prim1) {
  if (prim0) {
    return prim1;
  } else {
    return false;
  }
}

var Magma = {
  append: append
};

var Semigroup = {
  append: append
};

var Monoid = {
  append: append,
  empty: true
};

var Conjunctive = {
  Magma: Magma,
  Medial_Magma: Magma,
  Semigroup: Semigroup,
  Monoid: Monoid
};

function append$1(prim0, prim1) {
  if (prim0) {
    return true;
  } else {
    return prim1;
  }
}

var Magma$1 = {
  append: append$1
};

var Semigroup$1 = {
  append: append$1
};

var Monoid$1 = {
  append: append$1,
  empty: false
};

var Disjunctive = {
  Magma: Magma$1,
  Medial_Magma: Magma$1,
  Semigroup: Semigroup$1,
  Monoid: Monoid$1
};

var eq = Caml_obj.caml_equal;

var Eq = {
  eq: eq
};

var Ord = {
  eq: eq,
  compare: Bastet__Interface.unsafe_compare
};

var Bounded = {
  eq: eq,
  compare: Bastet__Interface.unsafe_compare,
  top: true,
  bottom: false
};

function join(prim0, prim1) {
  if (prim0) {
    return true;
  } else {
    return prim1;
  }
}

var Join_Semilattice = {
  join: join
};

function meet(prim0, prim1) {
  if (prim0) {
    return prim1;
  } else {
    return false;
  }
}

var Meet_Semilattice = {
  meet: meet
};

var Bounded_Join_Semilattice = {
  join: join,
  bottom: false
};

var Bounded_Meet_Semilattice = {
  meet: meet,
  top: true
};

var Lattice = {
  join: join,
  meet: meet
};

var Bounded_Lattice = {
  join: join,
  bottom: false,
  meet: meet,
  top: true
};

var Distributive_Lattice = {
  join: join,
  meet: meet
};

var Bounded_Distributive_Lattice = {
  join: join,
  bottom: false,
  meet: meet,
  top: true
};

function not(a) {
  return !a;
}

function implies(a, b) {
  if (a) {
    return b;
  } else {
    return true;
  }
}

var Heyting_Algebra = {
  eq: eq,
  compare: Bastet__Interface.unsafe_compare,
  join: join,
  bottom: false,
  meet: meet,
  top: true,
  not: not,
  implies: implies
};

var Involutive_Heyting_Algebra = {
  eq: eq,
  compare: Bastet__Interface.unsafe_compare,
  join: join,
  bottom: false,
  meet: meet,
  top: true,
  not: not,
  implies: implies
};

var Boolean_Algebra = {
  eq: eq,
  compare: Bastet__Interface.unsafe_compare,
  join: join,
  bottom: false,
  meet: meet,
  top: true,
  not: not,
  implies: implies
};

var Show = {
  show: Stdlib.string_of_bool
};

var include = Bastet__Infix.Magma(Magma);

var Conjunctive$1 = include;

var include$1 = Bastet__Infix.Magma(Magma$1);

var Disjunctive$1 = include$1;

var include$2 = Bastet__Infix.Eq(Eq);

var include$3 = Bastet__Infix.Ord(Ord);

var include$4 = Bastet__Infix.Join_Semilattice(Join_Semilattice);

var include$5 = Bastet__Infix.Meet_Semilattice(Meet_Semilattice);

var include$6 = Bastet__Infix.Heyting_Algebra(Heyting_Algebra);

var Infix_$eq$pipe$eq = include$2.$eq$pipe$eq;

var Infix_$less$pipe$pipe = include$3.$less$pipe$pipe;

var Infix_$pipe$pipe$great = include$3.$pipe$pipe$great;

var Infix_$less$pipe$eq = include$3.$less$pipe$eq;

var Infix_$great$pipe$eq = include$3.$great$pipe$eq;

var Infix_$less$pipe$pipe$great = include$4.$less$pipe$pipe$great;

var Infix_$less$amp$amp$great = include$5.$less$amp$amp$great;

var Infix_$$$great = include$6.$neg$neg$great;

var Infix = {
  Conjunctive: Conjunctive$1,
  Disjunctive: Disjunctive$1,
  $eq$pipe$eq: Infix_$eq$pipe$eq,
  $less$pipe$pipe: Infix_$less$pipe$pipe,
  $pipe$pipe$great: Infix_$pipe$pipe$great,
  $less$pipe$eq: Infix_$less$pipe$eq,
  $great$pipe$eq: Infix_$great$pipe$eq,
  $less$pipe$pipe$great: Infix_$less$pipe$pipe$great,
  $less$amp$amp$great: Infix_$less$amp$amp$great,
  $neg$neg$great: Infix_$$$great
};

exports.Conjunctive = Conjunctive;
exports.Disjunctive = Disjunctive;
exports.Eq = Eq;
exports.Ord = Ord;
exports.Bounded = Bounded;
exports.Join_Semilattice = Join_Semilattice;
exports.Meet_Semilattice = Meet_Semilattice;
exports.Bounded_Join_Semilattice = Bounded_Join_Semilattice;
exports.Bounded_Meet_Semilattice = Bounded_Meet_Semilattice;
exports.Lattice = Lattice;
exports.Bounded_Lattice = Bounded_Lattice;
exports.Distributive_Lattice = Distributive_Lattice;
exports.Bounded_Distributive_Lattice = Bounded_Distributive_Lattice;
exports.Heyting_Algebra = Heyting_Algebra;
exports.Involutive_Heyting_Algebra = Involutive_Heyting_Algebra;
exports.Boolean_Algebra = Boolean_Algebra;
exports.Show = Show;
exports.Infix = Infix;
/* include Not a pure module */
