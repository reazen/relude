// Generated by Melange
'use strict';

var Caml_obj = require("melange.runtime/caml_obj.js");
var Bastet__Infix = require("./Infix.js");
var Bastet__Function = require("./Function.js");
var Bastet__Interface = require("./Interface.js");

function append(prim0, prim1) {
  return prim0 + prim1;
}

var Magma = {
  append: append
};

var Semigroup = {
  append: append
};

var Monoid = {
  append: append,
  empty: ""
};

var Quasigroup = {
  append: append
};

var Loop = {
  append: append,
  empty: ""
};

var eq = Caml_obj.caml_equal;

var Eq = {
  eq: eq
};

var Ord = {
  eq: eq,
  compare: Bastet__Interface.unsafe_compare
};

var show = Bastet__Function.Category.id;

var Show = {
  show: show
};

var include = Bastet__Infix.Magma(Magma);

var include$1 = Bastet__Infix.Eq(Eq);

var include$2 = Bastet__Infix.Ord(Ord);

var Infix_$less$colon$great = include.$less$colon$great;

var Infix_$eq$pipe$eq = include$1.$eq$pipe$eq;

var Infix_$less$pipe$pipe = include$2.$less$pipe$pipe;

var Infix_$pipe$pipe$great = include$2.$pipe$pipe$great;

var Infix_$less$pipe$eq = include$2.$less$pipe$eq;

var Infix_$great$pipe$eq = include$2.$great$pipe$eq;

var Infix = {
  $less$colon$great: Infix_$less$colon$great,
  $eq$pipe$eq: Infix_$eq$pipe$eq,
  $less$pipe$pipe: Infix_$less$pipe$pipe,
  $pipe$pipe$great: Infix_$pipe$pipe$great,
  $less$pipe$eq: Infix_$less$pipe$eq,
  $great$pipe$eq: Infix_$great$pipe$eq
};

exports.Magma = Magma;
exports.Semigroup = Semigroup;
exports.Monoid = Monoid;
exports.Quasigroup = Quasigroup;
exports.Loop = Loop;
exports.Eq = Eq;
exports.Ord = Ord;
exports.Show = Show;
exports.Infix = Infix;
/* include Not a pure module */
