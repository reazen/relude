// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Bastet__Int = require("./Int.js");
var Bastet__Bool = require("./Bool.js");
var Bastet__List = require("./List.js");
var Bastet__Array = require("./Array.js");
var Bastet__Float = require("./Float.js");
var Bastet__Infix = require("./Infix.js");
var Bastet__Tuple = require("./Tuple.js");
var Bastet__Option = require("./Option.js");
var Bastet__Result = require("./Result.js");
var Bastet__String = require("./String.js");
var Bastet__Function = require("./Function.js");
var Bastet__Functions = require("./Functions.js");

var Travsersable = Bastet__Functions.Traversable(Bastet__Array.Traversable);

var Functions = {
  Travsersable: Travsersable
};

var Eq = Curry._1(Bastet__Array.Eq, Bastet__Int.Eq);

var Ord = Curry._1(Bastet__Array.Ord, Bastet__Int.Ord);

var Show = Curry._1(Bastet__Array.Show, Bastet__Int.Show);

var Fold_Map = Curry._1(Bastet__Array.Foldable.Fold_Map, Bastet__Int.Additive.Monoid);

var Additive = {
  Fold_Map: Fold_Map
};

var Fold_Map$1 = Curry._1(Bastet__Array.Foldable.Fold_Map, Bastet__Int.Multiplicative.Monoid);

var Multiplicative = {
  Fold_Map: Fold_Map$1
};

var Scan = Curry._1(Travsersable.Scan, {});

var Functions$1 = {
  Scan: Scan
};

var Int = {
  Eq: Eq,
  Ord: Ord,
  Show: Show,
  Additive: Additive,
  Multiplicative: Multiplicative,
  Functions: Functions$1
};

var Eq$1 = Curry._1(Bastet__Array.Eq, Bastet__Float.Eq);

var Ord$1 = Curry._1(Bastet__Array.Ord, Bastet__Float.Ord);

var Show$1 = Curry._1(Bastet__Array.Show, Bastet__Float.Show);

var Fold_Map$2 = Curry._1(Bastet__Array.Foldable.Fold_Map, Bastet__Float.Additive.Monoid);

var Additive$1 = {
  Fold_Map: Fold_Map$2
};

var Fold_Map$3 = Curry._1(Bastet__Array.Foldable.Fold_Map, Bastet__Float.Multiplicative.Monoid);

var Multiplicative$1 = {
  Fold_Map: Fold_Map$3
};

var Scan$1 = Curry._1(Travsersable.Scan, {});

var Functions$2 = {
  Scan: Scan$1
};

var Float = {
  Eq: Eq$1,
  Ord: Ord$1,
  Show: Show$1,
  Additive: Additive$1,
  Multiplicative: Multiplicative$1,
  Functions: Functions$2
};

var Eq$2 = Curry._1(Bastet__Array.Eq, Bastet__Bool.Eq);

var Ord$2 = Curry._1(Bastet__Array.Ord, Bastet__Bool.Ord);

var Show$2 = Curry._1(Bastet__Array.Show, Bastet__Bool.Show);

var Bool = {
  Eq: Eq$2,
  Ord: Ord$2,
  Show: Show$2
};

var Eq$3 = Curry._1(Bastet__Array.Eq, Bastet__String.Eq);

var Ord$3 = Curry._1(Bastet__Array.Ord, Bastet__String.Ord);

var $$String = {
  Eq: Eq$3,
  Ord: Ord$3
};

var Fold_Map_Plus = Curry._1(Bastet__Array.Foldable.Fold_Map_Plus, Bastet__List.Plus);

var Traversable = Curry._1(Bastet__Array.Traversable, Bastet__List.Applicative);

var List = {
  Fold_Map_Plus: Fold_Map_Plus,
  Traversable: Traversable
};

var Fold_Map_Plus$1 = Curry._1(Bastet__Array.Foldable.Fold_Map_Plus, Bastet__Option.Plus);

var Traversable$1 = Curry._1(Bastet__Array.Traversable, Bastet__Option.Applicative);

var $$Option = {
  Fold_Map_Plus: Fold_Map_Plus$1,
  Traversable: Traversable$1
};

var Functor = Bastet__Infix.Functor(Bastet__Array.Functor);

var Apply = Bastet__Infix.Apply(Bastet__Array.Apply);

var Monad = Bastet__Infix.Monad(Bastet__Array.Monad);

var Alt = Bastet__Infix.Alt(Bastet__Array.Alt);

var Infix = {
  Functor: Functor,
  Apply: Apply,
  Monad: Monad,
  Alt: Alt
};

var Traversable$2 = Curry._1(Bastet__Array.Traversable, Bastet__Array.Applicative);

var $$Array = {
  Traversable: Traversable$2
};

var ArrayF = {
  Functions: Functions,
  Int: Int,
  Float: Float,
  Bool: Bool,
  $$String: $$String,
  List: List,
  $$Option: $$Option,
  Infix: Infix,
  $$Array: $$Array
};

var Travsersable$1 = Bastet__Functions.Traversable(Bastet__List.Traversable);

var Functions$3 = {
  Travsersable: Travsersable$1
};

var Eq$4 = Bastet__List.Eq(Bastet__Int.Eq);

var Show$3 = Bastet__List.Show(Bastet__Int.Show);

var Fold_Map$4 = Curry._1(Bastet__List.Foldable.Fold_Map, Bastet__Int.Additive.Monoid);

var Additive$2 = {
  Fold_Map: Fold_Map$4
};

var Fold_Map$5 = Curry._1(Bastet__List.Foldable.Fold_Map, Bastet__Int.Multiplicative.Monoid);

var Multiplicative$2 = {
  Fold_Map: Fold_Map$5
};

var Scan$2 = Curry._1(Travsersable$1.Scan, {});

var Functions$4 = {
  Scan: Scan$2
};

var Int$1 = {
  Eq: Eq$4,
  Show: Show$3,
  Additive: Additive$2,
  Multiplicative: Multiplicative$2,
  Functions: Functions$4
};

var Eq$5 = Bastet__List.Eq(Bastet__Float.Eq);

var Show$4 = Bastet__List.Show(Bastet__Float.Show);

var Fold_Map$6 = Curry._1(Bastet__List.Foldable.Fold_Map, Bastet__Float.Additive.Monoid);

var Additive$3 = {
  Fold_Map: Fold_Map$6
};

var Fold_Map$7 = Curry._1(Bastet__List.Foldable.Fold_Map, Bastet__Float.Multiplicative.Monoid);

var Multiplicative$3 = {
  Fold_Map: Fold_Map$7
};

var Scan$3 = Curry._1(Travsersable$1.Scan, {});

var Functions$5 = {
  Scan: Scan$3
};

var Float$1 = {
  Eq: Eq$5,
  Show: Show$4,
  Additive: Additive$3,
  Multiplicative: Multiplicative$3,
  Functions: Functions$5
};

var Eq$6 = Bastet__List.Eq(Bastet__Bool.Eq);

var Show$5 = Bastet__List.Show(Bastet__Bool.Show);

var Bool$1 = {
  Eq: Eq$6,
  Show: Show$5
};

var Eq$7 = Bastet__List.Eq(Bastet__String.Eq);

var $$String$1 = {
  Eq: Eq$7
};

var Traversable$3 = Bastet__List.Traversable(Bastet__Array.Applicative);

var $$Array$1 = {
  Traversable: Traversable$3
};

var Fold_Map_Plus$2 = Curry._1(Bastet__List.Foldable.Fold_Map_Plus, Bastet__Option.Plus);

var Traversable$4 = Bastet__List.Traversable(Bastet__Option.Applicative);

var $$Option$1 = {
  Fold_Map_Plus: Fold_Map_Plus$2,
  Traversable: Traversable$4
};

var Functor$1 = Bastet__Infix.Functor(Bastet__List.Functor);

var Apply$1 = Bastet__Infix.Apply(Bastet__List.Apply);

var Monad$1 = Bastet__Infix.Monad(Bastet__List.Monad);

var Alt$1 = Bastet__Infix.Alt(Bastet__List.Alt);

var Infix$1 = {
  Functor: Functor$1,
  Apply: Apply$1,
  Monad: Monad$1,
  Alt: Alt$1
};

var Fold_Map_Plus$3 = Curry._1(Bastet__List.Foldable.Fold_Map_Plus, Bastet__List.Plus);

var Traversable$5 = Bastet__List.Traversable(Bastet__List.Applicative);

var List$1 = {
  Fold_Map_Plus: Fold_Map_Plus$3,
  Traversable: Traversable$5
};

var ListF = {
  Functions: Functions$3,
  Int: Int$1,
  Float: Float$1,
  Bool: Bool$1,
  $$String: $$String$1,
  $$Array: $$Array$1,
  $$Option: $$Option$1,
  Infix: Infix$1,
  List: List$1
};

var Eq$8 = Bastet__Option.Eq(Bastet__Int.Eq);

var Ord$4 = Bastet__Option.Ord(Bastet__Int.Ord);

var Semigroup = Bastet__Option.Semigroup(Bastet__Int.Additive.Semigroup);

var Quasigroup = Bastet__Option.Quasigroup(Bastet__Int.Additive.Quasigroup);

var Monoid = Bastet__Option.Monoid(Bastet__Int.Additive.Semigroup);

var Fold_Map$8 = Bastet__Option.Foldable.Fold_Map(Bastet__Int.Additive.Monoid);

var Additive$4 = {
  Semigroup: Semigroup,
  Quasigroup: Quasigroup,
  Monoid: Monoid,
  Fold_Map: Fold_Map$8
};

var Semigroup$1 = Bastet__Option.Semigroup(Bastet__Int.Multiplicative.Semigroup);

var Quasigroup$1 = Bastet__Option.Quasigroup(Bastet__Int.Multiplicative.Quasigroup);

var Monoid$1 = Bastet__Option.Monoid(Bastet__Int.Multiplicative.Semigroup);

var Fold_Map$9 = Bastet__Option.Foldable.Fold_Map(Bastet__Int.Multiplicative.Monoid);

var Multiplicative$4 = {
  Semigroup: Semigroup$1,
  Quasigroup: Quasigroup$1,
  Monoid: Monoid$1,
  Fold_Map: Fold_Map$9
};

var Quasigroup$2 = Bastet__Option.Quasigroup(Bastet__Int.Subtractive.Quasigroup);

var Subtractive = {
  Quasigroup: Quasigroup$2
};

var Int$2 = {
  Eq: Eq$8,
  Ord: Ord$4,
  Additive: Additive$4,
  Multiplicative: Multiplicative$4,
  Subtractive: Subtractive
};

var Eq$9 = Bastet__Option.Eq(Bastet__Float.Eq);

var Ord$5 = Bastet__Option.Ord(Bastet__Float.Ord);

var Semigroup$2 = Bastet__Option.Semigroup(Bastet__Float.Additive.Semigroup);

var Quasigroup$3 = Bastet__Option.Quasigroup(Bastet__Float.Additive.Quasigroup);

var Monoid$2 = Bastet__Option.Monoid(Bastet__Float.Additive.Semigroup);

var Fold_Map$10 = Bastet__Option.Foldable.Fold_Map(Bastet__Float.Additive.Monoid);

var Additive$5 = {
  Semigroup: Semigroup$2,
  Quasigroup: Quasigroup$3,
  Monoid: Monoid$2,
  Fold_Map: Fold_Map$10
};

var Semigroup$3 = Bastet__Option.Semigroup(Bastet__Float.Multiplicative.Semigroup);

var Quasigroup$4 = Bastet__Option.Quasigroup(Bastet__Float.Multiplicative.Quasigroup);

var Monoid$3 = Bastet__Option.Monoid(Bastet__Float.Multiplicative.Semigroup);

var Fold_Map$11 = Bastet__Option.Foldable.Fold_Map(Bastet__Float.Multiplicative.Monoid);

var Multiplicative$5 = {
  Semigroup: Semigroup$3,
  Quasigroup: Quasigroup$4,
  Monoid: Monoid$3,
  Fold_Map: Fold_Map$11
};

var Quasigroup$5 = Bastet__Option.Quasigroup(Bastet__Float.Subtractive.Quasigroup);

var Subtractive$1 = {
  Quasigroup: Quasigroup$5
};

var Quasigroup$6 = Bastet__Option.Quasigroup(Bastet__Float.Divisive.Quasigroup);

var Divisive = {
  Quasigroup: Quasigroup$6
};

var Float$2 = {
  Eq: Eq$9,
  Ord: Ord$5,
  Additive: Additive$5,
  Multiplicative: Multiplicative$5,
  Subtractive: Subtractive$1,
  Divisive: Divisive
};

var Eq$10 = Bastet__Option.Eq(Bastet__Bool.Eq);

var Ord$6 = Bastet__Option.Ord(Bastet__Bool.Ord);

var Semigroup$4 = Bastet__Option.Semigroup(Bastet__Bool.Conjunctive.Semigroup);

var Monoid$4 = Bastet__Option.Monoid(Bastet__Bool.Conjunctive.Semigroup);

var Conjunctive = {
  Semigroup: Semigroup$4,
  Monoid: Monoid$4
};

var Semigroup$5 = Bastet__Option.Semigroup(Bastet__Bool.Disjunctive.Semigroup);

var Monoid$5 = Bastet__Option.Monoid(Bastet__Bool.Disjunctive.Semigroup);

var Disjunctive = {
  Semigroup: Semigroup$5,
  Monoid: Monoid$5
};

var Bool$2 = {
  Eq: Eq$10,
  Ord: Ord$6,
  Conjunctive: Conjunctive,
  Disjunctive: Disjunctive
};

var Eq$11 = Bastet__Option.Eq(Bastet__String.Eq);

var Ord$7 = Bastet__Option.Ord(Bastet__String.Ord);

var Semigroup$6 = Bastet__Option.Semigroup(Bastet__String.Semigroup);

var Monoid$6 = Bastet__Option.Monoid(Bastet__String.Semigroup);

var $$String$2 = {
  Eq: Eq$11,
  Ord: Ord$7,
  Semigroup: Semigroup$6,
  Monoid: Monoid$6
};

var Fold_Map_Plus$4 = Bastet__Option.Foldable.Fold_Map_Plus(Bastet__List.Plus);

var Traversable$6 = Bastet__Option.Traversable(Bastet__List.Applicative);

var List$2 = {
  Fold_Map_Plus: Fold_Map_Plus$4,
  Traversable: Traversable$6
};

var Traversable$7 = Bastet__Option.Traversable(Bastet__Array.Applicative);

var $$Array$2 = {
  Traversable: Traversable$7
};

var Functor$2 = Bastet__Infix.Functor(Bastet__Option.Functor);

var Apply$2 = Bastet__Infix.Apply(Bastet__Option.Apply);

var Monad$2 = Bastet__Infix.Monad(Bastet__Option.Monad);

var Alt$2 = Bastet__Infix.Alt(Bastet__Option.Alt);

var Infix$2 = {
  Functor: Functor$2,
  Apply: Apply$2,
  Monad: Monad$2,
  Alt: Alt$2
};

var Fold_Map_Plus$5 = Bastet__Option.Foldable.Fold_Map_Plus(Bastet__Option.Plus);

var Traversable$8 = Bastet__Option.Traversable(Bastet__Option.Applicative);

var $$Option$2 = {
  Fold_Map_Plus: Fold_Map_Plus$5,
  Traversable: Traversable$8
};

var OptionF = {
  Int: Int$2,
  Float: Float$2,
  Bool: Bool$2,
  $$String: $$String$2,
  List: List$2,
  $$Array: $$Array$2,
  Infix: Infix$2,
  $$Option: $$Option$2
};

var Functor$3 = Bastet__Result.Functor({});

var Apply$3 = Bastet__Result.Apply({});

var Applicative = Bastet__Result.Applicative({});

var Monad$3 = Bastet__Result.Monad({});

var Extend = Bastet__Result.Extend({});

var Alt$3 = Bastet__Result.Alt({});

var Foldable = Bastet__Result.Foldable({});

var Traversable$9 = Bastet__Result.Traversable({}, Bastet__List.Applicative);

var List$3 = {
  Traversable: Traversable$9
};

var Traversable$10 = Bastet__Result.Traversable({}, Bastet__Array.Applicative);

var $$Array$3 = {
  Traversable: Traversable$10
};

var Traversable$11 = Bastet__Result.Traversable({}, Bastet__Option.Applicative);

var $$Option$3 = {
  Traversable: Traversable$11
};

var Eq$12 = Bastet__Result.Eq(Bastet__Int.Eq, Bastet__Bool.Eq);

var Ord$8 = Bastet__Result.Ord(Bastet__Int.Ord, Bastet__Bool.Ord);

var Show$6 = Bastet__Result.Show(Bastet__Int.Show, Bastet__Bool.Show);

var Bool$3 = {
  Eq: Eq$12,
  Ord: Ord$8,
  Show: Show$6
};

var Eq$13 = Bastet__Result.Eq(Bastet__Int.Eq, Bastet__Float.Eq);

var Ord$9 = Bastet__Result.Ord(Bastet__Int.Ord, Bastet__Float.Ord);

var Show$7 = Bastet__Result.Show(Bastet__Int.Show, Bastet__Float.Show);

var Float$3 = {
  Eq: Eq$13,
  Ord: Ord$9,
  Show: Show$7
};

var Eq$14 = Bastet__Result.Eq(Bastet__Int.Eq, Bastet__String.Eq);

var Ord$10 = Bastet__Result.Ord(Bastet__Int.Ord, Bastet__String.Ord);

var Show$8 = Bastet__Result.Show(Bastet__Int.Show, Bastet__String.Show);

var $$String$3 = {
  Eq: Eq$14,
  Ord: Ord$10,
  Show: Show$8
};

var Int$3 = {
  Functor: Functor$3,
  Apply: Apply$3,
  Applicative: Applicative,
  Monad: Monad$3,
  Extend: Extend,
  Alt: Alt$3,
  Foldable: Foldable,
  List: List$3,
  $$Array: $$Array$3,
  $$Option: $$Option$3,
  Bool: Bool$3,
  Float: Float$3,
  $$String: $$String$3
};

var Functor$4 = Bastet__Result.Functor({});

var Apply$4 = Bastet__Result.Apply({});

var Applicative$1 = Bastet__Result.Applicative({});

var Monad$4 = Bastet__Result.Monad({});

var Extend$1 = Bastet__Result.Extend({});

var Alt$4 = Bastet__Result.Alt({});

var Foldable$1 = Bastet__Result.Foldable({});

var Traversable$12 = Bastet__Result.Traversable({}, Bastet__List.Applicative);

var List$4 = {
  Traversable: Traversable$12
};

var Traversable$13 = Bastet__Result.Traversable({}, Bastet__Array.Applicative);

var $$Array$4 = {
  Traversable: Traversable$13
};

var Traversable$14 = Bastet__Result.Traversable({}, Bastet__Option.Applicative);

var $$Option$4 = {
  Traversable: Traversable$14
};

var Eq$15 = Bastet__Result.Eq(Bastet__Float.Eq, Bastet__Bool.Eq);

var Ord$11 = Bastet__Result.Ord(Bastet__Float.Ord, Bastet__Bool.Ord);

var Show$9 = Bastet__Result.Show(Bastet__Float.Show, Bastet__Bool.Show);

var Bool$4 = {
  Eq: Eq$15,
  Ord: Ord$11,
  Show: Show$9
};

var Eq$16 = Bastet__Result.Eq(Bastet__Float.Eq, Bastet__Int.Eq);

var Ord$12 = Bastet__Result.Ord(Bastet__Float.Ord, Bastet__Int.Ord);

var Show$10 = Bastet__Result.Show(Bastet__Float.Show, Bastet__Int.Show);

var Int$4 = {
  Eq: Eq$16,
  Ord: Ord$12,
  Show: Show$10
};

var Eq$17 = Bastet__Result.Eq(Bastet__Float.Eq, Bastet__String.Eq);

var Ord$13 = Bastet__Result.Ord(Bastet__Float.Ord, Bastet__String.Ord);

var Show$11 = Bastet__Result.Show(Bastet__Float.Show, Bastet__String.Show);

var $$String$4 = {
  Eq: Eq$17,
  Ord: Ord$13,
  Show: Show$11
};

var Float$4 = {
  Functor: Functor$4,
  Apply: Apply$4,
  Applicative: Applicative$1,
  Monad: Monad$4,
  Extend: Extend$1,
  Alt: Alt$4,
  Foldable: Foldable$1,
  List: List$4,
  $$Array: $$Array$4,
  $$Option: $$Option$4,
  Bool: Bool$4,
  Int: Int$4,
  $$String: $$String$4
};

var Functor$5 = Bastet__Result.Functor({});

var Apply$5 = Bastet__Result.Apply({});

var Applicative$2 = Bastet__Result.Applicative({});

var Monad$5 = Bastet__Result.Monad({});

var Extend$2 = Bastet__Result.Extend({});

var Alt$5 = Bastet__Result.Alt({});

var Foldable$2 = Bastet__Result.Foldable({});

var Traversable$15 = Bastet__Result.Traversable({}, Bastet__List.Applicative);

var List$5 = {
  Traversable: Traversable$15
};

var Traversable$16 = Bastet__Result.Traversable({}, Bastet__Array.Applicative);

var $$Array$5 = {
  Traversable: Traversable$16
};

var Traversable$17 = Bastet__Result.Traversable({}, Bastet__Option.Applicative);

var $$Option$5 = {
  Traversable: Traversable$17
};

var Eq$18 = Bastet__Result.Eq(Bastet__Bool.Eq, Bastet__Int.Eq);

var Ord$14 = Bastet__Result.Ord(Bastet__Bool.Ord, Bastet__Int.Ord);

var Show$12 = Bastet__Result.Show(Bastet__Bool.Show, Bastet__Int.Show);

var Int$5 = {
  Eq: Eq$18,
  Ord: Ord$14,
  Show: Show$12
};

var Eq$19 = Bastet__Result.Eq(Bastet__Bool.Eq, Bastet__Float.Eq);

var Ord$15 = Bastet__Result.Ord(Bastet__Bool.Ord, Bastet__Float.Ord);

var Show$13 = Bastet__Result.Show(Bastet__Bool.Show, Bastet__Float.Show);

var Float$5 = {
  Eq: Eq$19,
  Ord: Ord$15,
  Show: Show$13
};

var Eq$20 = Bastet__Result.Eq(Bastet__Bool.Eq, Bastet__String.Eq);

var Ord$16 = Bastet__Result.Ord(Bastet__Bool.Ord, Bastet__String.Ord);

var Show$14 = Bastet__Result.Show(Bastet__Bool.Show, Bastet__String.Show);

var $$String$5 = {
  Eq: Eq$20,
  Ord: Ord$16,
  Show: Show$14
};

var Bool$5 = {
  Functor: Functor$5,
  Apply: Apply$5,
  Applicative: Applicative$2,
  Monad: Monad$5,
  Extend: Extend$2,
  Alt: Alt$5,
  Foldable: Foldable$2,
  List: List$5,
  $$Array: $$Array$5,
  $$Option: $$Option$5,
  Int: Int$5,
  Float: Float$5,
  $$String: $$String$5
};

var Functor$6 = Bastet__Result.Functor({});

var Apply$6 = Bastet__Result.Apply({});

var Applicative$3 = Bastet__Result.Applicative({});

var Monad$6 = Bastet__Result.Monad({});

var Extend$3 = Bastet__Result.Extend({});

var Alt$6 = Bastet__Result.Alt({});

var Foldable$3 = Bastet__Result.Foldable({});

var Traversable$18 = Bastet__Result.Traversable({}, Bastet__List.Applicative);

var List$6 = {
  Traversable: Traversable$18
};

var Traversable$19 = Bastet__Result.Traversable({}, Bastet__Array.Applicative);

var $$Array$6 = {
  Traversable: Traversable$19
};

var Traversable$20 = Bastet__Result.Traversable({}, Bastet__Option.Applicative);

var $$Option$6 = {
  Traversable: Traversable$20
};

var Eq$21 = Bastet__Result.Eq(Bastet__String.Eq, Bastet__Int.Eq);

var Ord$17 = Bastet__Result.Ord(Bastet__String.Ord, Bastet__Int.Ord);

var Show$15 = Bastet__Result.Show(Bastet__String.Show, Bastet__Int.Show);

var Int$6 = {
  Eq: Eq$21,
  Ord: Ord$17,
  Show: Show$15
};

var Eq$22 = Bastet__Result.Eq(Bastet__String.Eq, Bastet__Float.Eq);

var Ord$18 = Bastet__Result.Ord(Bastet__String.Ord, Bastet__Float.Ord);

var Show$16 = Bastet__Result.Show(Bastet__String.Show, Bastet__Float.Show);

var Float$6 = {
  Eq: Eq$22,
  Ord: Ord$18,
  Show: Show$16
};

var Eq$23 = Bastet__Result.Eq(Bastet__String.Eq, Bastet__Bool.Eq);

var Ord$19 = Bastet__Result.Ord(Bastet__String.Ord, Bastet__Bool.Ord);

var Show$17 = Bastet__Result.Show(Bastet__String.Show, Bastet__Bool.Show);

var Bool$6 = {
  Eq: Eq$23,
  Ord: Ord$19,
  Show: Show$17
};

var $$String$6 = {
  Functor: Functor$6,
  Apply: Apply$6,
  Applicative: Applicative$3,
  Monad: Monad$6,
  Extend: Extend$3,
  Alt: Alt$6,
  Foldable: Foldable$3,
  List: List$6,
  $$Array: $$Array$6,
  $$Option: $$Option$6,
  Int: Int$6,
  Float: Float$6,
  Bool: Bool$6
};

var ResultF = {
  Int: Int$3,
  Float: Float$4,
  Bool: Bool$5,
  $$String: $$String$6
};

var Functor$7 = Bastet__Tuple.Functor({});

var Foldable$4 = Bastet__Tuple.Foldable({});

var Apply$7 = Bastet__Tuple.Apply(Bastet__Int.Additive.Semigroup);

var Applicative$4 = Bastet__Tuple.Applicative(Bastet__Int.Additive.Monoid);

var Monad$7 = Bastet__Tuple.Monad(Bastet__Int.Additive.Monoid);

var Additive$6 = {
  Apply: Apply$7,
  Applicative: Applicative$4,
  Monad: Monad$7
};

var Apply$8 = Bastet__Tuple.Apply(Bastet__Int.Multiplicative.Semigroup);

var Applicative$5 = Bastet__Tuple.Applicative(Bastet__Int.Multiplicative.Monoid);

var Monad$8 = Bastet__Tuple.Monad(Bastet__Int.Multiplicative.Monoid);

var Multiplicative$6 = {
  Apply: Apply$8,
  Applicative: Applicative$5,
  Monad: Monad$8
};

var Traversable$21 = Bastet__Tuple.Traversable({}, Bastet__List.Applicative);

var List$7 = {
  Traversable: Traversable$21
};

var Traversable$22 = Bastet__Tuple.Traversable({}, Bastet__Array.Applicative);

var $$Array$7 = {
  Traversable: Traversable$22
};

var Traversable$23 = Bastet__Tuple.Traversable({}, Bastet__Option.Applicative);

var $$Option$7 = {
  Traversable: Traversable$23
};

var Int$7 = {
  Functor: Functor$7,
  Foldable: Foldable$4,
  Additive: Additive$6,
  Multiplicative: Multiplicative$6,
  List: List$7,
  $$Array: $$Array$7,
  $$Option: $$Option$7
};

var Functor$8 = Bastet__Tuple.Functor({});

var Foldable$5 = Bastet__Tuple.Foldable({});

var Apply$9 = Bastet__Tuple.Apply(Bastet__Bool.Conjunctive.Semigroup);

var Applicative$6 = Bastet__Tuple.Applicative(Bastet__Bool.Conjunctive.Monoid);

var Monad$9 = Bastet__Tuple.Monad(Bastet__Bool.Conjunctive.Monoid);

var Conjunctive$1 = {
  Apply: Apply$9,
  Applicative: Applicative$6,
  Monad: Monad$9
};

var Apply$10 = Bastet__Tuple.Apply(Bastet__Bool.Disjunctive.Semigroup);

var Applicative$7 = Bastet__Tuple.Applicative(Bastet__Bool.Disjunctive.Monoid);

var Monad$10 = Bastet__Tuple.Monad(Bastet__Bool.Disjunctive.Monoid);

var Disjunctive$1 = {
  Apply: Apply$10,
  Applicative: Applicative$7,
  Monad: Monad$10
};

var Traversable$24 = Bastet__Tuple.Traversable({}, Bastet__List.Applicative);

var List$8 = {
  Traversable: Traversable$24
};

var Traversable$25 = Bastet__Tuple.Traversable({}, Bastet__Array.Applicative);

var $$Array$8 = {
  Traversable: Traversable$25
};

var Traversable$26 = Bastet__Tuple.Traversable({}, Bastet__Option.Applicative);

var $$Option$8 = {
  Traversable: Traversable$26
};

var Bool$7 = {
  Functor: Functor$8,
  Foldable: Foldable$5,
  Conjunctive: Conjunctive$1,
  Disjunctive: Disjunctive$1,
  List: List$8,
  $$Array: $$Array$8,
  $$Option: $$Option$8
};

var Functor$9 = Bastet__Tuple.Functor({});

var Foldable$6 = Bastet__Tuple.Foldable({});

var Apply$11 = Bastet__Tuple.Apply(Bastet__String.Semigroup);

var Applicative$8 = Bastet__Tuple.Applicative(Bastet__String.Monoid);

var Monad$11 = Bastet__Tuple.Monad(Bastet__String.Monoid);

var Traversable$27 = Bastet__Tuple.Traversable({}, Bastet__List.Applicative);

var List$9 = {
  Traversable: Traversable$27
};

var Traversable$28 = Bastet__Tuple.Traversable({}, Bastet__Array.Applicative);

var $$Array$9 = {
  Traversable: Traversable$28
};

var Traversable$29 = Bastet__Tuple.Traversable({}, Bastet__Option.Applicative);

var $$Option$9 = {
  Traversable: Traversable$29
};

var $$String$7 = {
  Functor: Functor$9,
  Foldable: Foldable$6,
  Apply: Apply$11,
  Applicative: Applicative$8,
  Monad: Monad$11,
  List: List$9,
  $$Array: $$Array$9,
  $$Option: $$Option$9
};

var TupleF = {
  Int: Int$7,
  Bool: Bool$7,
  $$String: $$String$7
};

var Functor$10 = Bastet__Function.Functor({});

var Int$8 = {
  Functor: Functor$10
};

var Functor$11 = Bastet__Function.Functor({});

var Bool$8 = {
  Functor: Functor$11
};

var Functor$12 = Bastet__Function.Functor({});

var $$String$8 = {
  Functor: Functor$12
};

var FunctionF = {
  Int: Int$8,
  Bool: Bool$8,
  $$String: $$String$8
};

exports.ArrayF = ArrayF;
exports.ListF = ListF;
exports.OptionF = OptionF;
exports.ResultF = ResultF;
exports.TupleF = TupleF;
exports.FunctionF = FunctionF;
/* Travsersable Not a pure module */
