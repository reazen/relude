// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Bastet__Dual = require("./Dual.js");
var Bastet__Endo = require("./Endo.js");
var Bastet__Infix = require("./Infix.js");
var Bastet__Function = require("./Function.js");

var $less$dot = Bastet__Function.Infix.$less$dot;

function Fold_Map(M, F) {
  var I = Bastet__Infix.Magma(M);
  var fold_map_default_left = function (f, x) {
    return Curry._3(F.fold_left, (function (acc, x) {
                  return Curry._2(I.$less$colon$great, acc, Curry._1(f, x));
                }), M.empty, x);
  };
  var fold_map_default_right = function (f, x) {
    return Curry._3(F.fold_right, (function (x, acc) {
                  return Curry._2(I.$less$colon$great, Curry._1(f, x), acc);
                }), M.empty, x);
  };
  return {
          I: I,
          fold_map_default_left: fold_map_default_left,
          fold_map_default_right: fold_map_default_right
        };
}

function Fold_Map_Any(M, F) {
  var I = Bastet__Infix.Magma_Any(M);
  var fold_map_default_left = function (f, x) {
    return Curry._3(F.fold_left, (function (acc, x) {
                  return Curry._2(I.$less$colon$great, acc, Curry._1(f, x));
                }), M.empty, x);
  };
  var fold_map_default_right = function (f, x) {
    return Curry._3(F.fold_right, (function (x, acc) {
                  return Curry._2(I.$less$colon$great, Curry._1(f, x), acc);
                }), M.empty, x);
  };
  return {
          I: I,
          fold_map_default_left: fold_map_default_left,
          fold_map_default_right: fold_map_default_right
        };
}

function Fold_Map_Plus(P, F) {
  var I = Bastet__Infix.Alt(P);
  var fold_map_default_left = function (f, x) {
    return Curry._3(F.fold_left, (function (acc, x) {
                  return Curry._2(I.$less$pipe$great, acc, Curry._1(f, x));
                }), P.empty, x);
  };
  var fold_map_default_right = function (f, x) {
    return Curry._3(F.fold_right, (function (x, acc) {
                  return Curry._2(I.$less$pipe$great, Curry._1(f, x), acc);
                }), P.empty, x);
  };
  return {
          I: I,
          fold_map_default_left: fold_map_default_left,
          fold_map_default_right: fold_map_default_right
        };
}

function Fold(F) {
  var Dual_Endo = Bastet__Dual.Monoid_Any(Bastet__Endo.Monoid);
  var Dual_Fold_Map = Curry._1(F.Fold_Map_Any, Dual_Endo);
  var Endo_Fold_Map = Curry._1(F.Fold_Map_Any, Bastet__Endo.Monoid);
  var fold_left_default = function (f, init, xs) {
    var match = Curry._2(Dual_Fold_Map.fold_map, Curry._2($less$dot, (function (x) {
                return /* Dual */{
                        _0: /* Endo */{
                          _0: x
                        }
                      };
              }), (function (param, param$1) {
                return Bastet__Function.flip(f, param, param$1);
              })), xs);
    return Curry._1(match._0._0, init);
  };
  var fold_right_default = function (f, init, xs) {
    var r = Curry._2(Endo_Fold_Map.fold_map, Curry._2($less$dot, (function (x) {
                return /* Endo */{
                        _0: x
                      };
              }), f), xs);
    return Curry._1(r._0, init);
  };
  return {
          Dual_Endo: Dual_Endo,
          Dual_Fold_Map: Dual_Fold_Map,
          Endo_Fold_Map: Endo_Fold_Map,
          fold_left_default: fold_left_default,
          fold_right_default: fold_right_default
        };
}

function Sequence(T) {
  var sequence_default = function (xs) {
    return Curry._2(T.traverse, Bastet__Function.Category.id, xs);
  };
  return {
          sequence_default: sequence_default
        };
}

function Traverse(S) {
  var traverse_default = function (f, xs) {
    return Curry._1(S.sequence, Curry._2(S.map, f, xs));
  };
  return {
          traverse_default: traverse_default
        };
}

exports.$less$dot = $less$dot;
exports.Fold_Map = Fold_Map;
exports.Fold_Map_Any = Fold_Map_Any;
exports.Fold_Map_Plus = Fold_Map_Plus;
exports.Fold = Fold;
exports.Sequence = Sequence;
exports.Traverse = Traverse;
/* Bastet__Dual Not a pure module */
