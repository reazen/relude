// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Bastet__Endo = require("./Endo.js");
var Bastet__Infix = require("./Infix.js");
var Bastet__Function = require("./Function.js");

var id = Bastet__Function.Category.id;

var $less$dot = Bastet__Function.Infix.$less$dot;

function Monoid(M) {
  var I = Bastet__Infix.Magma(M);
  var power = function (x, p) {
    var go = function (p) {
      if (p <= 0) {
        return M.empty;
      }
      if (p === 1) {
        return x;
      }
      if (p % 2 === 0) {
        var x$p = go(p / 2 | 0);
        return Curry._2(I.$less$colon$great, x$p, x$p);
      }
      var x$p$1 = go(p / 2 | 0);
      return Curry._2(I.$less$colon$great, Curry._2(I.$less$colon$great, x$p$1, x$p$1), x);
    };
    return go(p);
  };
  var guard = function (p, a) {
    if (p) {
      return a;
    } else {
      return M.empty;
    }
  };
  return {
          I: I,
          power: power,
          guard: guard
        };
}

function Functor(F) {
  var $$void = function (fa) {
    return Curry._2(F.map, (function (param) {
                  return Bastet__Function.$$const(undefined, param);
                }), fa);
  };
  var void_right = function (a, fb) {
    return Curry._2(F.map, (function (param) {
                  return Bastet__Function.$$const(a, param);
                }), fb);
  };
  var void_left = function (fa, b) {
    return Curry._2(F.map, (function (param) {
                  return Bastet__Function.$$const(b, param);
                }), fa);
  };
  var flap = function (fs, a) {
    return Curry._2(F.map, (function (f) {
                  return Curry._1(f, a);
                }), fs);
  };
  return {
          $$void: $$void,
          void_right: void_right,
          void_left: void_left,
          flap: flap
        };
}

function Apply(A) {
  var I = Bastet__Infix.Apply(A);
  var apply_first = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, Bastet__Function.$$const, a), b);
  };
  var apply_second = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (param) {
                      return Bastet__Function.$$const(id, param);
                    }), a), b);
  };
  var apply_both = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (a$p, b$p) {
                      return [
                              a$p,
                              b$p
                            ];
                    }), a), b);
  };
  var lift2 = function (f, a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b);
  };
  var lift3 = function (f, a, b, c) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c);
  };
  var lift4 = function (f, a, b, c, d) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d);
  };
  var lift5 = function (f, a, b, c, d, e) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d), e);
  };
  var Infix = {
    $less$star: apply_first,
    $star$great: apply_second
  };
  return {
          I: I,
          apply_first: apply_first,
          apply_second: apply_second,
          apply_both: apply_both,
          lift2: lift2,
          lift3: lift3,
          lift4: lift4,
          lift5: lift5,
          Infix: Infix
        };
}

function Apply$p(A, T) {
  var F = Bastet__Function.Apply({});
  var F$p = Bastet__Function.Apply({});
  var I = Bastet__Infix.Apply(F);
  var apply_first = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, Bastet__Function.$$const, a), b);
  };
  var apply_second = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (param) {
                      return Bastet__Function.$$const(id, param);
                    }), a), b);
  };
  var apply_both = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (a$p, b$p) {
                      return [
                              a$p,
                              b$p
                            ];
                    }), a), b);
  };
  var lift2 = function (f, a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b);
  };
  var lift3 = function (f, a, b, c) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c);
  };
  var lift4 = function (f, a, b, c, d) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d);
  };
  var lift5 = function (f, a, b, c, d, e) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d), e);
  };
  var Infix = {
    $less$star: apply_first,
    $star$great: apply_second
  };
  var Apply_F = {
    I: I,
    apply_first: apply_first,
    apply_second: apply_second,
    apply_both: apply_both,
    lift2: lift2,
    lift3: lift3,
    lift4: lift4,
    lift5: lift5,
    Infix: Infix
  };
  var I$1 = Bastet__Infix.Apply(A);
  var apply_first$1 = function (a, b) {
    return Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$$great, Bastet__Function.$$const, a), b);
  };
  var apply_second$1 = function (a, b) {
    return Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$$great, (function (param) {
                      return Bastet__Function.$$const(id, param);
                    }), a), b);
  };
  var apply_both$1 = function (a, b) {
    return Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$$great, (function (a$p, b$p) {
                      return [
                              a$p,
                              b$p
                            ];
                    }), a), b);
  };
  var lift2$1 = function (f, a, b) {
    return Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$$great, f, a), b);
  };
  var lift3$1 = function (f, a, b, c) {
    return Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$$great, f, a), b), c);
  };
  var lift4$1 = function (f, a, b, c, d) {
    return Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$$great, f, a), b), c), d);
  };
  var lift5$1 = function (f, a, b, c, d, e) {
    return Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$star$great, Curry._2(I$1.$less$$great, f, a), b), c), d), e);
  };
  var Infix$1 = {
    $less$star: apply_first$1,
    $star$great: apply_second$1
  };
  var Apply_A = {
    I: I$1,
    apply_first: apply_first$1,
    apply_second: apply_second$1,
    apply_both: apply_both$1,
    lift2: lift2$1,
    lift3: lift3$1,
    lift4: lift4$1,
    lift5: lift5$1,
    Infix: Infix$1
  };
  var apply_const = function (f, x) {
    return Curry._3(F$p.apply, apply_first$1, f, x);
  };
  var apply_first$2 = function (f, g, x) {
    return Curry._1(lift2(apply_first$1, f, g), x);
  };
  var apply_second$2 = function (f, g, x) {
    return Curry._1(lift2(apply_second$1, f, g), x);
  };
  var apply_both$2 = function (f, g, x) {
    return Curry._1(lift2(apply_both$1, f, g), x);
  };
  return {
          F: F,
          F$p: F$p,
          Apply_F: Apply_F,
          Apply_A: Apply_A,
          apply_const: apply_const,
          apply_first: apply_first$2,
          apply_second: apply_second$2,
          apply_both: apply_both$2
        };
}

function Applicative(A) {
  var I = Bastet__Infix.Apply(A);
  var liftA1 = function (f, fa) {
    return Curry._2(I.$less$star$great, Curry._1(A.pure, f), fa);
  };
  var when_ = function (p, fa) {
    if (p) {
      return fa;
    } else {
      return Curry._1(A.pure, undefined);
    }
  };
  var unless = function (p, fa) {
    if (p) {
      return Curry._1(A.pure, undefined);
    } else {
      return fa;
    }
  };
  return {
          I: I,
          liftA1: liftA1,
          when_: when_,
          unless: unless
        };
}

function Monad(M) {
  var I = Bastet__Infix.Monad(M);
  var I$1 = Bastet__Infix.Apply(M);
  var liftA1 = function (f, fa) {
    return Curry._2(I$1.$less$star$great, Curry._1(M.pure, f), fa);
  };
  var when_ = function (p, fa) {
    if (p) {
      return fa;
    } else {
      return Curry._1(M.pure, undefined);
    }
  };
  var unless = function (p, fa) {
    if (p) {
      return Curry._1(M.pure, undefined);
    } else {
      return fa;
    }
  };
  var A = {
    I: I$1,
    liftA1: liftA1,
    when_: when_,
    unless: unless
  };
  var flatten = function (m) {
    return Curry._2(I.$great$great$eq, m, id);
  };
  var compose_kliesli = function (f, g, a) {
    return Curry._2(I.$great$great$eq, Curry._1(f, a), g);
  };
  var compose_kliesli_flipped = function (f, g, a) {
    return Curry._2(I.$eq$less$less, f, Curry._1(g, a));
  };
  var if_m = function (p, t, f) {
    return Curry._2(I.$great$great$eq, p, (function (p$p) {
                  if (p$p) {
                    return t;
                  } else {
                    return f;
                  }
                }));
  };
  var liftM1 = function (f, fa) {
    return Curry._2(I.$great$great$eq, fa, (function (fa$p) {
                  return Curry._1(M.pure, Curry._1(f, fa$p));
                }));
  };
  var ap = function (f, fa) {
    return Curry._2(I.$great$great$eq, f, (function (f$p) {
                  return Curry._2(I.$great$great$eq, fa, (function (fa$p) {
                                return Curry._1(M.pure, Curry._1(f$p, fa$p));
                              }));
                }));
  };
  var when_$1 = function (p, fa) {
    return Curry._2(I.$great$great$eq, p, (function (p$p) {
                  return when_(p$p, fa);
                }));
  };
  var unless$1 = function (p, fa) {
    return Curry._2(I.$great$great$eq, p, (function (p$p) {
                  return unless(p$p, fa);
                }));
  };
  return {
          I: I,
          A: A,
          flatten: flatten,
          compose_kliesli: compose_kliesli,
          compose_kliesli_flipped: compose_kliesli_flipped,
          if_m: if_m,
          liftM1: liftM1,
          ap: ap,
          when_: when_$1,
          unless: unless$1
        };
}

function Foldable(F) {
  var Semigroup = function (S) {
    var FM = Curry._1(F.Fold_Map_Any, Bastet__Endo.Monoid);
    var I = Bastet__Infix.Magma(S);
    var surround_map = function (delimiter, f, fa) {
      var joined = function (a) {
        return /* Endo */{
                _0: (function (m) {
                    return Curry._2(I.$less$colon$great, Curry._2(I.$less$colon$great, delimiter, Curry._1(f, a)), m);
                  })
              };
      };
      var fn = Curry._2(FM.fold_map, joined, fa);
      return Curry._1(fn._0, delimiter);
    };
    var surround = function (delimiter, fa) {
      return surround_map(delimiter, id, fa);
    };
    return {
            FM: FM,
            I: I,
            surround_map: surround_map,
            surround: surround
          };
  };
  var Monoid = function (M) {
    var FM = Curry._1(F.Fold_Map, M);
    var I = Bastet__Infix.Magma(M);
    var fold = Curry._1(FM.fold_map, id);
    var intercalate = function (separator, xs) {
      var go = function (acc, x) {
        if (acc.init) {
          return {
                  init: false,
                  acc: x
                };
        } else {
          return {
                  init: false,
                  acc: Curry._2(I.$less$colon$great, Curry._2(I.$less$colon$great, acc.acc, separator), x)
                };
        }
      };
      return Curry._3(F.fold_left, go, {
                  init: true,
                  acc: M.empty
                }, xs).acc;
    };
    return {
            FM: FM,
            I: I,
            fold: fold,
            intercalate: intercalate
          };
  };
  var Applicative = function (A) {
    var I = Bastet__Infix.Apply(A);
    var apply_first = function (a, b) {
      return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, Bastet__Function.$$const, a), b);
    };
    var apply_second = function (a, b) {
      return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (param) {
                        return Bastet__Function.$$const(id, param);
                      }), a), b);
    };
    var apply_both = function (a, b) {
      return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (a$p, b$p) {
                        return [
                                a$p,
                                b$p
                              ];
                      }), a), b);
    };
    var lift2 = function (f, a, b) {
      return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b);
    };
    var lift3 = function (f, a, b, c) {
      return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c);
    };
    var lift4 = function (f, a, b, c, d) {
      return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d);
    };
    var lift5 = function (f, a, b, c, d, e) {
      return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d), e);
    };
    var Infix = {
      $less$star: apply_first,
      $star$great: apply_second
    };
    var Fn = {
      I: I,
      apply_first: apply_first,
      apply_second: apply_second,
      apply_both: apply_both,
      lift2: lift2,
      lift3: lift3,
      lift4: lift4,
      lift5: lift5,
      Infix: Infix
    };
    var traverse$p = function (f, fa) {
      return Curry._3(F.fold_right, Curry._2($less$dot, apply_second, f), Curry._1(A.pure, undefined), fa);
    };
    var sequence$p = function (fa) {
      return traverse$p(id, fa);
    };
    return {
            Fn: Fn,
            traverse$p: traverse$p,
            sequence$p: sequence$p
          };
  };
  var Plus = function (P) {
    var one_of = function (fa) {
      return Curry._3(F.fold_right, P.alt, P.empty, fa);
    };
    return {
            one_of: one_of
          };
  };
  var Monad = function (M) {
    var I = Bastet__Infix.Monad(M);
    var fold_monad = function (f, a, fa) {
      return Curry._3(F.fold_left, (function (acc, x) {
                    return Curry._2(I.$great$great$eq, acc, (function (param) {
                                  return Bastet__Function.flip(f, x, param);
                                }));
                  }), Curry._1(M.pure, a), fa);
    };
    return {
            I: I,
            fold_monad: fold_monad
          };
  };
  return {
          Semigroup: Semigroup,
          Monoid: Monoid,
          Applicative: Applicative,
          Plus: Plus,
          Monad: Monad
        };
}

function Traversable(T) {
  var apply_state = function (s, a) {
    return Curry._1(s, a);
  };
  var State_Left = function (Type) {
    var map = function (f, k, s) {
      var match = Curry._1(k, s);
      return {
              accum: match.accum,
              value: Curry._1(f, match.value)
            };
    };
    var Functor = {
      map: map
    };
    var apply = function (f, x, s) {
      var match = Curry._1(f, s);
      var match$1 = Curry._1(x, match.accum);
      return {
              accum: match$1.accum,
              value: Curry._1(match.value, match$1.value)
            };
    };
    var Apply = {
      map: map,
      apply: apply
    };
    var pure = function (a, s) {
      return {
              accum: s,
              value: a
            };
    };
    var Applicative = {
      map: map,
      apply: apply,
      pure: pure
    };
    return {
            Functor: Functor,
            Apply: Apply,
            Applicative: Applicative
          };
  };
  var State_Right = function (Type) {
    var map = function (f, k, s) {
      var match = Curry._1(k, s);
      return {
              accum: match.accum,
              value: Curry._1(f, match.value)
            };
    };
    var Functor = {
      map: map
    };
    var apply = function (f, x, s) {
      var match = Curry._1(x, s);
      var match$1 = Curry._1(f, match.accum);
      return {
              accum: match$1.accum,
              value: Curry._1(match$1.value, match.value)
            };
    };
    var Apply = {
      map: map,
      apply: apply
    };
    var pure = function (a, s) {
      return {
              accum: s,
              value: a
            };
    };
    var Applicative = {
      map: map,
      apply: apply,
      pure: pure
    };
    return {
            Functor: Functor,
            Apply: Apply,
            Applicative: Applicative
          };
  };
  var Map_Accum = function (Type, T) {
    var map = function (f, k, s) {
      var match = Curry._1(k, s);
      return {
              accum: match.accum,
              value: Curry._1(f, match.value)
            };
    };
    var Functor = {
      map: map
    };
    var apply = function (f, x, s) {
      var match = Curry._1(f, s);
      var match$1 = Curry._1(x, match.accum);
      return {
              accum: match$1.accum,
              value: Curry._1(match.value, match$1.value)
            };
    };
    var Apply = {
      map: map,
      apply: apply
    };
    var pure = function (a, s) {
      return {
              accum: s,
              value: a
            };
    };
    var Applicative = {
      map: map,
      apply: apply,
      pure: pure
    };
    var SL = {
      Functor: Functor,
      Apply: Apply,
      Applicative: Applicative
    };
    var map$1 = function (f, k, s) {
      var match = Curry._1(k, s);
      return {
              accum: match.accum,
              value: Curry._1(f, match.value)
            };
    };
    var Functor$1 = {
      map: map$1
    };
    var apply$1 = function (f, x, s) {
      var match = Curry._1(x, s);
      var match$1 = Curry._1(f, match.accum);
      return {
              accum: match$1.accum,
              value: Curry._1(match$1.value, match.value)
            };
    };
    var Apply$1 = {
      map: map$1,
      apply: apply$1
    };
    var pure$1 = function (a, s) {
      return {
              accum: s,
              value: a
            };
    };
    var Applicative$1 = {
      map: map$1,
      apply: apply$1,
      pure: pure$1
    };
    var SR = {
      Functor: Functor$1,
      Apply: Apply$1,
      Applicative: Applicative$1
    };
    var TSL = Curry._1(T, Applicative);
    var TSR = Curry._1(T, Applicative$1);
    var map_accum_left = function (f, s, xs) {
      return Curry._3(TSL.traverse, (function (a, s$p) {
                    return Curry._2(f, s$p, a);
                  }), xs, s);
    };
    var map_accum_right = function (f, s, xs) {
      return Curry._3(TSR.traverse, (function (a, s$p) {
                    return Curry._2(f, s$p, a);
                  }), xs, s);
    };
    return {
            SL: SL,
            SR: SR,
            TSL: TSL,
            TSR: TSR,
            map_accum_left: map_accum_left,
            map_accum_right: map_accum_right
          };
  };
  var Internal = {
    apply_state: apply_state,
    State_Left: State_Left,
    State_Right: State_Right,
    Map_Accum: Map_Accum
  };
  var Scan = function (Type) {
    var map = function (f, k, s) {
      var match = Curry._1(k, s);
      return {
              accum: match.accum,
              value: Curry._1(f, match.value)
            };
    };
    var Functor = {
      map: map
    };
    var apply = function (f, x, s) {
      var match = Curry._1(f, s);
      var match$1 = Curry._1(x, match.accum);
      return {
              accum: match$1.accum,
              value: Curry._1(match.value, match$1.value)
            };
    };
    var Apply = {
      map: map,
      apply: apply
    };
    var pure = function (a, s) {
      return {
              accum: s,
              value: a
            };
    };
    var Applicative = {
      map: map,
      apply: apply,
      pure: pure
    };
    var SL = {
      Functor: Functor,
      Apply: Apply,
      Applicative: Applicative
    };
    var map$1 = function (f, k, s) {
      var match = Curry._1(k, s);
      return {
              accum: match.accum,
              value: Curry._1(f, match.value)
            };
    };
    var Functor$1 = {
      map: map$1
    };
    var apply$1 = function (f, x, s) {
      var match = Curry._1(x, s);
      var match$1 = Curry._1(f, match.accum);
      return {
              accum: match$1.accum,
              value: Curry._1(match$1.value, match.value)
            };
    };
    var Apply$1 = {
      map: map$1,
      apply: apply$1
    };
    var pure$1 = function (a, s) {
      return {
              accum: s,
              value: a
            };
    };
    var Applicative$1 = {
      map: map$1,
      apply: apply$1,
      pure: pure$1
    };
    var SR = {
      Functor: Functor$1,
      Apply: Apply$1,
      Applicative: Applicative$1
    };
    var TSL = Curry._1(T, Applicative);
    var TSR = Curry._1(T, Applicative$1);
    var map_accum_left = function (f, s, xs) {
      return Curry._3(TSL.traverse, (function (a, s$p) {
                    return Curry._2(f, s$p, a);
                  }), xs, s);
    };
    var map_accum_right = function (f, s, xs) {
      return Curry._3(TSR.traverse, (function (a, s$p) {
                    return Curry._2(f, s$p, a);
                  }), xs, s);
    };
    var MA = {
      SL: SL,
      SR: SR,
      TSL: TSL,
      TSR: TSR,
      map_accum_left: map_accum_left,
      map_accum_right: map_accum_right
    };
    var scan_left = function (f, init, xs) {
      return map_accum_left((function (b, a) {
                    var b$p = Curry._2(f, b, a);
                    return {
                            accum: b$p,
                            value: b$p
                          };
                  }), init, xs).value;
    };
    var scan_right = function (f, init, xs) {
      return map_accum_right((function (b, a) {
                    var b$p = Curry._2(f, a, b);
                    return {
                            accum: b$p,
                            value: b$p
                          };
                  }), init, xs).value;
    };
    return {
            MA: MA,
            scan_left: scan_left,
            scan_right: scan_right
          };
  };
  return {
          Internal: Internal,
          Scan: Scan
        };
}

function Apply$1(A) {
  var I = Bastet__Infix.Apply(A);
  var apply_first = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, Bastet__Function.$$const, a), b);
  };
  var apply_second = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (param) {
                      return Bastet__Function.$$const(id, param);
                    }), a), b);
  };
  var apply_both = function (a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, (function (a$p, b$p) {
                      return [
                              a$p,
                              b$p
                            ];
                    }), a), b);
  };
  var lift2 = function (f, a, b) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b);
  };
  var lift3 = function (f, a, b, c) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c);
  };
  var lift4 = function (f, a, b, c, d) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d);
  };
  var lift5 = function (f, a, b, c, d, e) {
    return Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$star$great, Curry._2(I.$less$$great, f, a), b), c), d), e);
  };
  var Infix = {
    $less$star: apply_first,
    $star$great: apply_second
  };
  var Functions = {
    I: I,
    apply_first: apply_first,
    apply_second: apply_second,
    apply_both: apply_both,
    lift2: lift2,
    lift3: lift3,
    lift4: lift4,
    lift5: lift5,
    Infix: Infix
  };
  return {
          Functions: Functions,
          $less$star: apply_first,
          $star$great: apply_second
        };
}

function Monad$1(M) {
  var Functions = Bastet__Infix.Monad(M);
  return {
          Functions: Functions,
          $great$eq$great: Functions.$great$eq$great,
          $less$eq$less: Functions.$less$eq$less
        };
}

function Void(F) {
  var $$void = function (fa) {
    return Curry._2(F.map, (function (param) {
                  return Bastet__Function.$$const(undefined, param);
                }), fa);
  };
  var void_right = function (a, fb) {
    return Curry._2(F.map, (function (param) {
                  return Bastet__Function.$$const(a, param);
                }), fb);
  };
  var void_left = function (fa, b) {
    return Curry._2(F.map, (function (param) {
                  return Bastet__Function.$$const(b, param);
                }), fa);
  };
  var flap = function (fs, a) {
    return Curry._2(F.map, (function (f) {
                  return Curry._1(f, a);
                }), fs);
  };
  var Functions = {
    $$void: $$void,
    void_right: void_right,
    void_left: void_left,
    flap: flap
  };
  return {
          Functions: Functions,
          $$great: void_left,
          $less$: void_right,
          $less$at$great: flap
        };
}

var Infix = {
  Apply: Apply$1,
  Monad: Monad$1,
  Void: Void
};

var $$const = Bastet__Function.$$const;

var flip = Bastet__Function.flip;

exports.$$const = $$const;
exports.flip = flip;
exports.id = id;
exports.$less$dot = $less$dot;
exports.Monoid = Monoid;
exports.Functor = Functor;
exports.Apply = Apply;
exports.Apply$p = Apply$p;
exports.Applicative = Applicative;
exports.Monad = Monad;
exports.Foldable = Foldable;
exports.Traversable = Traversable;
exports.Infix = Infix;
/* Bastet__Endo Not a pure module */
