// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Belt_List = require("melange.belt/./belt_List.js");
var Bastet__List = require("bastet/./List.js");
var Bastet__String = require("bastet/./String.js");
var Relude__Relude_Extensions_Alt = require("../extensions/Relude_Extensions_Alt.js");
var Relude__Relude_Extensions_Plus = require("../extensions/Relude_Extensions_Plus.js");
var Relude__Relude_Extensions_Apply = require("../extensions/Relude_Extensions_Apply.js");
var Relude__Relude_Extensions_Monad = require("../extensions/Relude_Extensions_Monad.js");
var Relude__Relude_Extensions_Functor = require("../extensions/Relude_Extensions_Functor.js");
var Relude__Relude_Extensions_Foldable = require("../extensions/Relude_Extensions_Foldable.js");
var Relude__Relude_Extensions_MonoidAny = require("../extensions/Relude_Extensions_MonoidAny.js");
var Relude__Relude_Extensions_Unfoldable = require("../extensions/Relude_Extensions_Unfoldable.js");
var Relude__Relude_Extensions_Alternative = require("../extensions/Relude_Extensions_Alternative.js");
var Relude__Relude_Extensions_Applicative = require("../extensions/Relude_Extensions_Applicative.js");
var Relude__Relude_Extensions_SemigroupAny = require("../extensions/Relude_Extensions_SemigroupAny.js");

var concat = Belt_List.concat;

var SemigroupAny = {
  append: concat
};

var include = Relude__Relude_Extensions_SemigroupAny.SemigroupAnyExtensions(SemigroupAny);

var MonoidAny = {
  append: concat,
  empty: /* [] */0
};

var include$1 = Relude__Relude_Extensions_MonoidAny.MonoidAnyExtensions(MonoidAny);

var map = Bastet__List.Functor.map;

var Functor = {
  map: map
};

var include$2 = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);

var apply = Bastet__List.Apply.apply;

var Apply = {
  map: map,
  apply: apply
};

var include$3 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);

var pure = Bastet__List.Applicative.pure;

var Applicative = {
  map: map,
  apply: apply,
  pure: pure
};

var include$4 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);

var bind = Bastet__List.Monad.flat_map;

var Monad = {
  map: map,
  apply: apply,
  pure: pure,
  flat_map: bind
};

var include$5 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);

var alt = Bastet__List.Alt.alt;

var Alt = {
  map: map,
  alt: alt
};

var include$6 = Relude__Relude_Extensions_Alt.AltExtensions(Alt);

var Plus = {
  map: map,
  alt: alt,
  empty: /* [] */0
};

Relude__Relude_Extensions_Plus.PlusExtensions(Plus);

var Alternative = {
  apply: apply,
  pure: pure,
  map: map,
  alt: alt,
  empty: /* [] */0
};

Relude__Relude_Extensions_Alternative.AlternativeExtensions(Alternative);

var foldLeft = Bastet__List.Foldable.fold_left;

var foldRight = Bastet__List.Foldable.fold_right;

var Foldable_Fold_Map = Bastet__List.Foldable.Fold_Map;

var Foldable_Fold_Map_Any = Bastet__List.Foldable.Fold_Map_Any;

var Foldable_Fold_Map_Plus = Bastet__List.Foldable.Fold_Map_Plus;

var Foldable = {
  fold_left: foldLeft,
  fold_right: foldRight,
  Fold_Map: Foldable_Fold_Map,
  Fold_Map_Any: Foldable_Fold_Map_Any,
  Fold_Map_Plus: Foldable_Fold_Map_Plus
};

var include$7 = Relude__Relude_Extensions_Foldable.FoldableExtensions(Foldable);

var intercalate = include$7.intercalate;

var unfold = Bastet__List.Unfoldable.unfold;

var Unfoldable = {
  unfold: Bastet__List.Unfoldable.unfold
};

Relude__Relude_Extensions_Unfoldable.UnfoldableExtensions(Unfoldable);

function eqBy(innerEq, _a, _b) {
  while(true) {
    var b = _b;
    var a = _a;
    if (!a) {
      if (b) {
        return false;
      } else {
        return true;
      }
    }
    if (!b) {
      return false;
    }
    if (!Curry._2(innerEq, a.hd, b.hd)) {
      return false;
    }
    _b = b.tl;
    _a = a.tl;
    continue ;
  };
}

function eq(eqA, xs, ys) {
  return eqBy(eqA.eq, xs, ys);
}

function Eq(EqA) {
  var eq = function (xs, ys) {
    return eqBy(EqA.eq, xs, ys);
  };
  return {
          eq: eq
        };
}

function showBy(innerShow, xs) {
  var join = Curry._1(intercalate, Bastet__String.Monoid);
  return "[" + (Curry._2(join, ", ", map(innerShow)(xs)) + "]");
}

function show(showA, xs) {
  return showBy(showA.show, xs);
}

function Show(ShowA) {
  var show = function (xs) {
    return showBy(ShowA.show, xs);
  };
  return {
          show: show
        };
}

var IsoArray = {
  fromArray: Belt_List.fromArray,
  toArray: Belt_List.toArray
};

var concatNamed = include.concatNamed;

var empty = /* [] */0;

var guard = include$1.guard;

var power = include$1.power;

var BsFunctorExtensions = include$2.BsFunctorExtensions;

var flipMap = include$2.flipMap;

var $$void = include$2.$$void;

var voidRight = include$2.voidRight;

var voidLeft = include$2.voidLeft;

var flap = include$2.flap;

var BsApplyExtensions = include$3.BsApplyExtensions;

var applyFirst = include$3.applyFirst;

var applySecond = include$3.applySecond;

var map2 = include$3.map2;

var map3 = include$3.map3;

var map4 = include$3.map4;

var map5 = include$3.map5;

var tuple2 = include$3.tuple2;

var tuple3 = include$3.tuple3;

var tuple4 = include$3.tuple4;

var tuple5 = include$3.tuple5;

var mapTuple2 = include$3.mapTuple2;

var mapTuple3 = include$3.mapTuple3;

var mapTuple4 = include$3.mapTuple4;

var mapTuple5 = include$3.mapTuple5;

var BsApplicativeExtensions = include$4.BsApplicativeExtensions;

var liftA1 = include$4.liftA1;

var BsMonadExtensions = include$5.BsMonadExtensions;

var flatMap = include$5.flatMap;

var flatten = include$5.flatten;

var composeKleisli = include$5.composeKleisli;

var flipComposeKleisli = include$5.flipComposeKleisli;

var liftM1 = include$5.liftM1;

var when_ = include$5.when_;

var unless = include$5.unless;

var orElse = include$6.orElse;

var BsFoldableExtensions = include$7.BsFoldableExtensions;

var any = include$7.any;

var all = include$7.all;

var containsBy = include$7.containsBy;

var contains = include$7.contains;

var indexOfBy = include$7.indexOfBy;

var indexOf = include$7.indexOf;

var minBy = include$7.minBy;

var min = include$7.min;

var maxBy = include$7.maxBy;

var max = include$7.max;

var countBy = include$7.countBy;

var length = include$7.length;

var size = include$7.size;

var count = include$7.count;

var forEach = include$7.forEach;

var forEachWithIndex = include$7.forEachWithIndex;

var find = include$7.find;

var findWithIndex = include$7.findWithIndex;

var toList = include$7.toList;

var FoldableSemigroupExtensions = include$7.FoldableSemigroupExtensions;

var FoldableMonoidExtensions = include$7.FoldableMonoidExtensions;

var foldMap = include$7.foldMap;

var foldWithMonoid = include$7.foldWithMonoid;

var FoldableApplicativeExtensions = include$7.FoldableApplicativeExtensions;

var FoldableMonadExtensions = include$7.FoldableMonadExtensions;

var FoldableEqExtensions = include$7.FoldableEqExtensions;

var FoldableOrdExtensions = include$7.FoldableOrdExtensions;

var Traversable = Bastet__List.Traversable;

var fromArray = Belt_List.fromArray;

var toArray = Belt_List.toArray;

exports.concat = concat;
exports.SemigroupAny = SemigroupAny;
exports.concatNamed = concatNamed;
exports.empty = empty;
exports.MonoidAny = MonoidAny;
exports.guard = guard;
exports.power = power;
exports.map = map;
exports.Functor = Functor;
exports.BsFunctorExtensions = BsFunctorExtensions;
exports.flipMap = flipMap;
exports.$$void = $$void;
exports.voidRight = voidRight;
exports.voidLeft = voidLeft;
exports.flap = flap;
exports.apply = apply;
exports.Apply = Apply;
exports.BsApplyExtensions = BsApplyExtensions;
exports.applyFirst = applyFirst;
exports.applySecond = applySecond;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.tuple2 = tuple2;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.tuple5 = tuple5;
exports.mapTuple2 = mapTuple2;
exports.mapTuple3 = mapTuple3;
exports.mapTuple4 = mapTuple4;
exports.mapTuple5 = mapTuple5;
exports.pure = pure;
exports.Applicative = Applicative;
exports.BsApplicativeExtensions = BsApplicativeExtensions;
exports.liftA1 = liftA1;
exports.bind = bind;
exports.Monad = Monad;
exports.BsMonadExtensions = BsMonadExtensions;
exports.flatMap = flatMap;
exports.flatten = flatten;
exports.composeKleisli = composeKleisli;
exports.flipComposeKleisli = flipComposeKleisli;
exports.liftM1 = liftM1;
exports.when_ = when_;
exports.unless = unless;
exports.alt = alt;
exports.Alt = Alt;
exports.orElse = orElse;
exports.Plus = Plus;
exports.Alternative = Alternative;
exports.foldLeft = foldLeft;
exports.foldRight = foldRight;
exports.Foldable = Foldable;
exports.BsFoldableExtensions = BsFoldableExtensions;
exports.any = any;
exports.all = all;
exports.containsBy = containsBy;
exports.contains = contains;
exports.indexOfBy = indexOfBy;
exports.indexOf = indexOf;
exports.minBy = minBy;
exports.min = min;
exports.maxBy = maxBy;
exports.max = max;
exports.countBy = countBy;
exports.length = length;
exports.size = size;
exports.count = count;
exports.forEach = forEach;
exports.forEachWithIndex = forEachWithIndex;
exports.find = find;
exports.findWithIndex = findWithIndex;
exports.toList = toList;
exports.FoldableSemigroupExtensions = FoldableSemigroupExtensions;
exports.FoldableMonoidExtensions = FoldableMonoidExtensions;
exports.foldMap = foldMap;
exports.foldWithMonoid = foldWithMonoid;
exports.intercalate = intercalate;
exports.FoldableApplicativeExtensions = FoldableApplicativeExtensions;
exports.FoldableMonadExtensions = FoldableMonadExtensions;
exports.FoldableEqExtensions = FoldableEqExtensions;
exports.FoldableOrdExtensions = FoldableOrdExtensions;
exports.unfold = unfold;
exports.Unfoldable = Unfoldable;
exports.Traversable = Traversable;
exports.eqBy = eqBy;
exports.eq = eq;
exports.Eq = Eq;
exports.showBy = showBy;
exports.show = show;
exports.Show = Show;
exports.fromArray = fromArray;
exports.toArray = toArray;
exports.IsoArray = IsoArray;
/* include Not a pure module */
