// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Bastet__Int = require("bastet/./Int.js");
var Bastet__List = require("bastet/./List.js");
var Bastet__Float = require("bastet/./Float.js");
var Relude__Relude_IO = require("../Relude_IO.js");
var Relude__Relude_Int = require("../Relude_Int.js");
var Relude__Relude_Float = require("../Relude_Float.js");
var Relude__Relude_Result = require("../Relude_Result.js");
var Relude__Relude_String = require("../Relude_String.js");
var Relude__Relude_NonEmpty = require("../Relude_NonEmpty.js");
var Relude__Relude_List_Base = require("./Relude_List_Base.js");
var Relude__Relude_Validation = require("../Relude_Validation.js");
var Relude__Relude_List_Instances = require("./Relude_List_Instances.js");
var Relude__Relude_Option_Instances = require("../option/Relude_Option_Instances.js");

function ListEqExtensions(E) {
  var include = Curry._1(Relude__Relude_List_Instances.FoldableEqExtensions, E);
  var distinct = function (param) {
    return Relude__Relude_List_Base.distinctBy(E.eq, param);
  };
  var removeFirst = function (param, param$1) {
    return Relude__Relude_List_Base.removeFirstBy(E.eq, param, param$1);
  };
  var removeEach = function (param, param$1) {
    return Relude__Relude_List_Base.removeEachBy(E.eq, param, param$1);
  };
  var eq = function (param, param$1) {
    return Relude__Relude_List_Instances.eqBy(E.eq, param, param$1);
  };
  return {
          contains: include.contains,
          indexOf: include.indexOf,
          distinct: distinct,
          removeFirst: removeFirst,
          removeEach: removeEach,
          eq: eq
        };
}

function ListOrdExtensions(O) {
  var include = Curry._1(Relude__Relude_List_Instances.FoldableEqExtensions, O);
  var distinct = function (param) {
    return Relude__Relude_List_Base.distinctBy(O.eq, param);
  };
  var removeFirst = function (param, param$1) {
    return Relude__Relude_List_Base.removeFirstBy(O.eq, param, param$1);
  };
  var removeEach = function (param, param$1) {
    return Relude__Relude_List_Base.removeEachBy(O.eq, param, param$1);
  };
  var eq = function (param, param$1) {
    return Relude__Relude_List_Instances.eqBy(O.eq, param, param$1);
  };
  var include$1 = Curry._1(Relude__Relude_List_Instances.FoldableOrdExtensions, O);
  var sort = function (param) {
    return Relude__Relude_List_Base.sortBy(O.compare, param);
  };
  return {
          contains: include.contains,
          indexOf: include.indexOf,
          distinct: distinct,
          removeFirst: removeFirst,
          removeEach: removeEach,
          eq: eq,
          min: include$1.min,
          max: include$1.max,
          sort: sort
        };
}

function ListMonoidExtensions(M) {
  return Curry._1(Relude__Relude_List_Instances.FoldableMonoidExtensions, M);
}

var include = Curry._1(Relude__Relude_List_Instances.FoldableEqExtensions, Relude__Relude_String.Ord);

function removeFirst(param, param$1) {
  return Relude__Relude_List_Base.removeFirstBy(Relude__Relude_String.Ord.eq, param, param$1);
}

function removeEach(param, param$1) {
  return Relude__Relude_List_Base.removeEachBy(Relude__Relude_String.Ord.eq, param, param$1);
}

function eq(param, param$1) {
  return Relude__Relude_List_Instances.eqBy(Relude__Relude_String.Ord.eq, param, param$1);
}

var include$1 = Curry._1(Relude__Relude_List_Instances.FoldableOrdExtensions, Relude__Relude_String.Ord);

function sort(param) {
  return Relude__Relude_List_Base.sortBy(Relude__Relude_String.Ord.compare, param);
}

var include$2 = Curry._1(Relude__Relude_List_Instances.FoldableMonoidExtensions, Relude__Relude_String.Monoid);

var foldWithMonoid = include$2.foldWithMonoid;

var intercalate = include$2.intercalate;

function distinct(xs) {
  return Relude__Relude_List_Instances.fromArray(Object.keys(Relude__Relude_List_Instances.foldLeft((function (acc, curr) {
                          acc[curr] = 0;
                          return acc;
                        }), {})(xs)));
}

var String_contains = include.contains;

var String_indexOf = include.indexOf;

var String_min = include$1.min;

var String_max = include$1.max;

var String_BsFoldableMonoidExtensions = include$2.BsFoldableMonoidExtensions;

var String_foldMap = include$2.foldMap;

var $$String = {
  contains: String_contains,
  indexOf: String_indexOf,
  removeFirst: removeFirst,
  removeEach: removeEach,
  eq: eq,
  min: String_min,
  max: String_max,
  sort: sort,
  BsFoldableMonoidExtensions: String_BsFoldableMonoidExtensions,
  foldMap: String_foldMap,
  foldWithMonoid: foldWithMonoid,
  intercalate: intercalate,
  join: foldWithMonoid,
  joinWith: intercalate,
  distinct: distinct
};

var include$3 = Curry._1(Relude__Relude_List_Instances.FoldableEqExtensions, Relude__Relude_Int.Ord);

function distinct$1(param) {
  return Relude__Relude_List_Base.distinctBy(Relude__Relude_Int.Ord.eq, param);
}

function removeFirst$1(param, param$1) {
  return Relude__Relude_List_Base.removeFirstBy(Relude__Relude_Int.Ord.eq, param, param$1);
}

function removeEach$1(param, param$1) {
  return Relude__Relude_List_Base.removeEachBy(Relude__Relude_Int.Ord.eq, param, param$1);
}

function eq$1(param, param$1) {
  return Relude__Relude_List_Instances.eqBy(Relude__Relude_Int.Ord.eq, param, param$1);
}

var include$4 = Curry._1(Relude__Relude_List_Instances.FoldableOrdExtensions, Relude__Relude_Int.Ord);

function sort$1(param) {
  return Relude__Relude_List_Base.sortBy(Relude__Relude_Int.Ord.compare, param);
}

var sum = Curry._1(Relude__Relude_List_Instances.foldWithMonoid, Bastet__Int.Additive.Monoid);

var product = Curry._1(Relude__Relude_List_Instances.foldWithMonoid, Bastet__Int.Multiplicative.Monoid);

var Int_contains = include$3.contains;

var Int_indexOf = include$3.indexOf;

var Int_min = include$4.min;

var Int_max = include$4.max;

var Int = {
  contains: Int_contains,
  indexOf: Int_indexOf,
  distinct: distinct$1,
  removeFirst: removeFirst$1,
  removeEach: removeEach$1,
  eq: eq$1,
  min: Int_min,
  max: Int_max,
  sort: sort$1,
  sum: sum,
  product: product
};

var include$5 = Curry._1(Relude__Relude_List_Instances.FoldableEqExtensions, Relude__Relude_Float.Ord);

function distinct$2(param) {
  return Relude__Relude_List_Base.distinctBy(Relude__Relude_Float.Ord.eq, param);
}

function removeFirst$2(param, param$1) {
  return Relude__Relude_List_Base.removeFirstBy(Relude__Relude_Float.Ord.eq, param, param$1);
}

function removeEach$2(param, param$1) {
  return Relude__Relude_List_Base.removeEachBy(Relude__Relude_Float.Ord.eq, param, param$1);
}

function eq$2(param, param$1) {
  return Relude__Relude_List_Instances.eqBy(Relude__Relude_Float.Ord.eq, param, param$1);
}

var include$6 = Curry._1(Relude__Relude_List_Instances.FoldableOrdExtensions, Relude__Relude_Float.Ord);

function sort$2(param) {
  return Relude__Relude_List_Base.sortBy(Relude__Relude_Float.Ord.compare, param);
}

var sum$1 = Curry._1(Relude__Relude_List_Instances.foldWithMonoid, Bastet__Float.Additive.Monoid);

var product$1 = Curry._1(Relude__Relude_List_Instances.foldWithMonoid, Bastet__Float.Multiplicative.Monoid);

var Float_contains = include$5.contains;

var Float_indexOf = include$5.indexOf;

var Float_min = include$6.min;

var Float_max = include$6.max;

var Float = {
  contains: Float_contains,
  indexOf: Float_indexOf,
  distinct: distinct$2,
  removeFirst: removeFirst$2,
  removeEach: removeEach$2,
  eq: eq$2,
  min: Float_min,
  max: Float_max,
  sort: sort$2,
  sum: sum$1,
  product: product$1
};

var include$7 = Relude__Relude_List_Instances.Traversable(Relude__Relude_Option_Instances.Applicative);

var $$Option = include$7;

function traverse(f, list) {
  var ResultE = Relude__Relude_Result.WithError({});
  var TraverseResult = Relude__Relude_List_Instances.Traversable(ResultE.Applicative);
  return Curry._2(TraverseResult.traverse, f, list);
}

function sequence(xs) {
  var ResultE = Relude__Relude_Result.WithError({});
  var TraverseResult = Relude__Relude_List_Instances.Traversable(ResultE.Applicative);
  return Curry._1(TraverseResult.sequence, xs);
}

var Result = {
  traverse: traverse,
  sequence: sequence
};

function traverse$1(f, list) {
  var IoE = Relude__Relude_IO.WithError({});
  var TraverseIO = Relude__Relude_List_Instances.Traversable(IoE.Applicative);
  return Curry._2(TraverseIO.traverse, f, list);
}

function sequence$1(xs) {
  var IoE = Relude__Relude_IO.WithError({});
  var TraverseIO = Relude__Relude_List_Instances.Traversable(IoE.Applicative);
  return Curry._1(TraverseIO.sequence, xs);
}

var IO = {
  traverse: traverse$1,
  sequence: sequence$1
};

function Traversable(Errors, $$Error) {
  var ValidationE = Relude__Relude_Validation.WithErrors(Errors, $$Error);
  var include = Bastet__List.Traversable(ValidationE.Applicative);
  return {
          ValidationE: ValidationE,
          map: include.map,
          fold_left: include.fold_left,
          fold_right: include.fold_right,
          Fold_Map: include.Fold_Map,
          Fold_Map_Any: include.Fold_Map_Any,
          Fold_Map_Plus: include.Fold_Map_Plus,
          traverse: include.traverse,
          sequence: include.sequence
        };
}

function TraversableWithErrorsAsList($$Error) {
  var ValidationE = Relude__Relude_Validation.WithErrors(Relude__Relude_List_Instances.SemigroupAny, $$Error);
  var include = Bastet__List.Traversable(ValidationE.Applicative);
  return {
          ValidationE: ValidationE,
          map: include.map,
          fold_left: include.fold_left,
          fold_right: include.fold_right,
          Fold_Map: include.Fold_Map,
          Fold_Map_Any: include.Fold_Map_Any,
          Fold_Map_Plus: include.Fold_Map_Plus,
          traverse: include.traverse,
          sequence: include.sequence
        };
}

var $$Error = {};

var ValidationE = Relude__Relude_Validation.WithErrors(Relude__Relude_List_Instances.SemigroupAny, $$Error);

var include$8 = Bastet__List.Traversable(ValidationE.Applicative);

var TraversableWithErrorsAsListOfStrings_map = include$8.map;

var TraversableWithErrorsAsListOfStrings_fold_left = include$8.fold_left;

var TraversableWithErrorsAsListOfStrings_fold_right = include$8.fold_right;

var TraversableWithErrorsAsListOfStrings_Fold_Map = include$8.Fold_Map;

var TraversableWithErrorsAsListOfStrings_Fold_Map_Any = include$8.Fold_Map_Any;

var TraversableWithErrorsAsListOfStrings_Fold_Map_Plus = include$8.Fold_Map_Plus;

var TraversableWithErrorsAsListOfStrings_traverse = include$8.traverse;

var TraversableWithErrorsAsListOfStrings_sequence = include$8.sequence;

var TraversableWithErrorsAsListOfStrings = {
  ValidationE: ValidationE,
  map: TraversableWithErrorsAsListOfStrings_map,
  fold_left: TraversableWithErrorsAsListOfStrings_fold_left,
  fold_right: TraversableWithErrorsAsListOfStrings_fold_right,
  Fold_Map: TraversableWithErrorsAsListOfStrings_Fold_Map,
  Fold_Map_Any: TraversableWithErrorsAsListOfStrings_Fold_Map_Any,
  Fold_Map_Plus: TraversableWithErrorsAsListOfStrings_Fold_Map_Plus,
  traverse: TraversableWithErrorsAsListOfStrings_traverse,
  sequence: TraversableWithErrorsAsListOfStrings_sequence
};

function TraversableWithErrorsAsNonEmptyList($$Error) {
  var Errors = Relude__Relude_NonEmpty.List.SemigroupAny;
  var ValidationE = Relude__Relude_Validation.WithErrors(Errors, $$Error);
  var include = Bastet__List.Traversable(ValidationE.Applicative);
  return {
          ValidationE: ValidationE,
          map: include.map,
          fold_left: include.fold_left,
          fold_right: include.fold_right,
          Fold_Map: include.Fold_Map,
          Fold_Map_Any: include.Fold_Map_Any,
          Fold_Map_Plus: include.Fold_Map_Plus,
          traverse: include.traverse,
          sequence: include.sequence
        };
}

function traverse$2(f, list) {
  var $$Error = {};
  var Errors = Relude__Relude_NonEmpty.List.SemigroupAny;
  var ValidationE = Relude__Relude_Validation.WithErrors(Errors, $$Error);
  var include = Bastet__List.Traversable(ValidationE.Applicative);
  return Curry._2(include.traverse, (function (a) {
                return Relude__Relude_Result.toValidationNel(Curry._1(f, a));
              }), list);
}

var Validation = {
  Traversable: Traversable,
  TraversableWithErrorsAsList: TraversableWithErrorsAsList,
  TraversableWithErrorsAsListOfStrings: TraversableWithErrorsAsListOfStrings,
  TraversableWithErrorsAsNonEmptyList: TraversableWithErrorsAsNonEmptyList,
  traverse: traverse$2
};

exports.ListEqExtensions = ListEqExtensions;
exports.ListOrdExtensions = ListOrdExtensions;
exports.ListMonoidExtensions = ListMonoidExtensions;
exports.$$String = $$String;
exports.Int = Int;
exports.Float = Float;
exports.$$Option = $$Option;
exports.Result = Result;
exports.IO = IO;
exports.Validation = Validation;
/* include Not a pure module */
