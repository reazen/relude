// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Js_dict = require("melange.belt/./js_dict.js");
var Js_json = require("melange.belt/./js_json.js");
var Caml_option = require("melange.runtime/caml_option.js");
var Stdlib__Array = require("melange/./array.js");
var Relude__Relude_List = require("../Relude_List.js");
var Relude__Relude_Array = require("../Relude_Array.js");
var Relude__Relude_Option = require("../Relude_Option.js");
var Relude__Relude_Function = require("../Relude_Function.js");
var Relude__Relude_NonEmpty = require("../Relude_NonEmpty.js");
var Relude__Relude_Validation = require("../Relude_Validation.js");
var Relude__Relude_Array_Specializations = require("../array/Relude_Array_Specializations.js");

function show(indentSpacesOpt, json) {
  var indentSpaces = indentSpacesOpt !== undefined ? indentSpacesOpt : 2;
  return JSON.stringify(json, null, indentSpaces);
}

function isNull(json) {
  return Js_json.test(json, /* Null */5);
}

function isBool(json) {
  return Js_json.test(json, /* Boolean */4);
}

function isString(json) {
  return Js_json.test(json, /* String */0);
}

function isNumber(json) {
  return Js_json.test(json, /* Number */1);
}

function isObject(json) {
  return Js_json.test(json, /* Object */2);
}

function isArray(json) {
  return Js_json.test(json, /* Array */3);
}

var $$null = null;

function fromBool(prim) {
  return prim;
}

function fromString(prim) {
  return prim;
}

function fromInt(param) {
  return Relude__Relude_Function.Infix.$great$great((function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), param);
}

function fromFloat(prim) {
  return prim;
}

function fromOption(encode, opt) {
  return Relude__Relude_Option.fold($$null, encode, opt);
}

function fromArrayOfJson(prim) {
  return prim;
}

var fromArrayOfJsonBy = Stdlib__Array.map;

function fromListOfJson(param) {
  return Relude__Relude_Function.Infix.$great$great(Relude__Relude_List.toArray, fromArrayOfJson, param);
}

function fromListOfJsonBy(f, items) {
  return fromListOfJson(Relude__Relude_List.map(f)(items));
}

function fromDictOfJson(prim) {
  return prim;
}

function fromArrayOfDictOfJson(prim) {
  return prim;
}

function fromListOfDictOfJson(param) {
  return Relude__Relude_Function.Infix.$great$great(Relude__Relude_List.toArray, (function (prim) {
                return prim;
              }), param);
}

var fromArrayOfKeyValueTuples = Js_dict.fromArray;

var fromListOfKeyValueTuples = Js_dict.fromList;

function toNull(json) {
  return Curry._1(Relude__Relude_Option.$$void, Js_json.decodeNull(json));
}

function toInt(json) {
  return Relude__Relude_Option.map((function (prim) {
                return prim | 0;
              }), Js_json.decodeNumber(json));
}

function toArrayOfJsonOrElse($$default, json) {
  return Relude__Relude_Option.getOrElse($$default, Js_json.decodeArray(json));
}

var partial_arg = [];

function toArrayOfJsonOrEmpty(param) {
  return Relude__Relude_Option.getOrElse(partial_arg, Js_json.decodeArray(param));
}

function toListOfJson(json) {
  return Relude__Relude_Option.map(Relude__Relude_Array.toList, Js_json.decodeArray(json));
}

function toListOfJsonOrElse($$default, json) {
  return Relude__Relude_Option.getOrElse($$default, Relude__Relude_Option.map(Relude__Relude_Array.toList, Js_json.decodeArray(json)));
}

function toListOrEmpty(param) {
  return toListOfJsonOrElse(/* [] */0, param);
}

function toDictOfJsonOrElse($$default, json) {
  return Relude__Relude_Option.getOrElse($$default, Js_json.decodeObject(json));
}

var partial_arg$1 = {};

function toDictOfJsonOrEmpty(param) {
  return Relude__Relude_Option.getOrElse(partial_arg$1, Js_json.decodeObject(param));
}

var Type = {};

var $$Error = {
  Type: Type
};

var pure = Relude__Relude_NonEmpty.$$Array.pure;

var make = Relude__Relude_NonEmpty.$$Array.make;

var Errors = {
  pure: pure,
  make: make,
  map: Relude__Relude_Validation.mapErrorsNea
};

var ValidationE = Relude__Relude_Validation.WithErrors(Relude__Relude_NonEmpty.$$Array.SemigroupAny, Type);

var ArrayValidationE = Relude__Relude_Array_Specializations.Validation.WithErrors(Relude__Relude_NonEmpty.$$Array.SemigroupAny, Type);

function validateNull(json) {
  return Relude__Relude_Validation.fromOptionLazy((function (param) {
                return Curry._1(pure, "JSON value is not a null: " + show(undefined, json));
              }), Curry._1(Relude__Relude_Option.$$void, Js_json.decodeNull(json)));
}

function validateBool(json) {
  return Relude__Relude_Validation.fromOptionLazy((function (param) {
                return Curry._1(pure, "JSON value is not a bool: " + show(undefined, json));
              }), Js_json.decodeBoolean(json));
}

function validateString(json) {
  return Relude__Relude_Validation.fromOptionLazy((function (param) {
                return Curry._1(pure, "JSON value is not a string: " + show(undefined, json));
              }), Js_json.decodeString(json));
}

function validateInt(json) {
  return Relude__Relude_Validation.fromOptionLazy((function (param) {
                return Curry._1(pure, "JSON value is not an int: " + show(undefined, json));
              }), toInt(json));
}

function validateFloat(json) {
  return Relude__Relude_Validation.fromOptionLazy((function (param) {
                return Curry._1(pure, "JSON value is not a float: " + show(undefined, json));
              }), Js_json.decodeNumber(json));
}

function validateOptional(errorAsNoneOpt, validate) {
  var errorAsNone = errorAsNoneOpt !== undefined ? errorAsNoneOpt : false;
  return function (json) {
    var match = validateNull(json);
    if (match.TAG === /* VOk */0) {
      return {
              TAG: /* VOk */0,
              _0: undefined
            };
    }
    var a = Curry._1(validate, json);
    if (a.TAG === /* VOk */0) {
      return Relude__Relude_Validation.pure(Caml_option.some(a._0));
    } else if (errorAsNone) {
      return Relude__Relude_Validation.pure(undefined);
    } else {
      return a;
    }
  };
}

function getJsonAtIndex(index, json) {
  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                return Relude__Relude_Array.at(index, param);
              }), Js_json.decodeArray(json));
}

function validateJsonAtIndex(index, validateItem, json) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return Relude__Relude_Validation.error(Curry._1(pure, String(index) + (" was not found in JSON: " + show(undefined, json))));
              }), Curry.__1(validateItem), getJsonAtIndex(index, json));
}

function validateNullAtIndex(index, json) {
  return validateJsonAtIndex(index, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (error) {
                              return String(index) + (": " + error);
                            }), validateNull(json));
              }), json);
}

function validateBoolAtIndex(index, json) {
  return validateJsonAtIndex(index, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return String(index) + (": " + e);
                            }), validateBool(json));
              }), json);
}

function validateIntAtIndex(index, json) {
  return validateJsonAtIndex(index, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return String(index) + (": " + e);
                            }), validateInt(json));
              }), json);
}

function validateFloatAtIndex(index, json) {
  return validateJsonAtIndex(index, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return String(index) + (": " + e);
                            }), validateFloat(json));
              }), json);
}

function validateStringAtIndex(index, json) {
  return validateJsonAtIndex(index, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return String(index) + (": " + e);
                            }), validateString(json));
              }), json);
}

function validateOptionalAtIndex(missingAsNoneOpt, nullAsNoneOpt, errorAsNoneOpt, index) {
  var missingAsNone = missingAsNoneOpt !== undefined ? missingAsNoneOpt : true;
  var nullAsNone = nullAsNoneOpt !== undefined ? nullAsNoneOpt : true;
  var errorAsNone = errorAsNoneOpt !== undefined ? errorAsNoneOpt : false;
  return function (validate, json) {
    var json$1 = getJsonAtIndex(index, json);
    if (json$1 === undefined) {
      if (missingAsNone) {
        return Relude__Relude_Validation.ok(undefined);
      } else {
        return Relude__Relude_Validation.error(Curry._1(pure, "No value was found at index " + (String(index) + (" for JSON: " + show(undefined, json)))));
      }
    }
    var json$2 = Caml_option.valFromOption(json$1);
    var match = validateNull(json$2);
    if (match.TAG === /* VOk */0) {
      if (nullAsNone) {
        return Relude__Relude_Validation.pure(undefined);
      } else {
        return Relude__Relude_Validation.error(Curry._1(pure, String(index) + (" had a null value in JSON: " + show(undefined, json$2))));
      }
    }
    var a = Curry._1(validate, json$2);
    if (a.TAG === /* VOk */0) {
      return Relude__Relude_Validation.pure(Caml_option.some(a._0));
    } else if (errorAsNone) {
      return Relude__Relude_Validation.pure(undefined);
    } else {
      return a;
    }
  };
}

function validateArrayOfJson(validateItem, json) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return Relude__Relude_Validation.error(Curry._1(pure, "JSON value is not an array: " + show(undefined, json)));
              }), (function (jsonValues) {
                return Curry._2(ArrayValidationE.Traversable.traverse, (function (param) {
                              var index = param[1];
                              return Relude__Relude_Validation.mapErrorsNea((function (e) {
                                            return String(index) + (": " + e);
                                          }), Curry._2(validateItem, index, param[0]));
                            }), Relude__Relude_Array.zipWithIndex(jsonValues));
              }), Js_json.decodeArray(json));
}

function validateArrayOfJsonAsList(validateItem, json) {
  return Relude__Relude_Validation.map(Relude__Relude_Array.toList, Relude__Relude_Option.foldLazy((function (param) {
                    return Relude__Relude_Validation.error(Curry._1(pure, "JSON value is not an array: " + show(undefined, json)));
                  }), (function (arrayOfJson) {
                    return Curry._2(ArrayValidationE.Traversable.traverse, (function (param) {
                                  var index = param[1];
                                  return Relude__Relude_Validation.mapErrorsNea((function (e) {
                                                return String(index) + (": " + e);
                                              }), Curry._2(validateItem, index, param[0]));
                                }), Relude__Relude_Array.zipWithIndex(arrayOfJson));
                  }), Js_json.decodeArray(json)));
}

function validateArrayAtIndex(index, validateItem, json) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return Relude__Relude_Validation.error(Curry._1(pure, String(index) + (" was not found in JSON: " + show(undefined, json))));
              }), (function (json) {
                return validateArrayOfJson(validateItem, json);
              }), getJsonAtIndex(index, json));
}

function getJsonForKey(key, json) {
  return Curry._2(Relude__Relude_Option.flatMap, (function (dict) {
                return Js_dict.get(dict, key);
              }), Js_json.decodeObject(json));
}

function validateJsonForKey(key, validateItem, json) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return Relude__Relude_Validation.error(Curry._1(pure, key + (" was not found in JSON: " + show(undefined, json))));
              }), Curry.__1(validateItem), getJsonForKey(key, json));
}

function validateNullForKey(key, json) {
  return validateJsonForKey(key, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return key + (": " + e);
                            }), validateNull(json));
              }), json);
}

function validateBoolForKey(key, json) {
  return validateJsonForKey(key, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return key + (": " + e);
                            }), validateBool(json));
              }), json);
}

function validateIntForKey(key, json) {
  return validateJsonForKey(key, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return key + (": " + e);
                            }), validateInt(json));
              }), json);
}

function validateFloatForKey(key, json) {
  return validateJsonForKey(key, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return key + (": " + e);
                            }), validateFloat(json));
              }), json);
}

function validateStringForKey(key, json) {
  return validateJsonForKey(key, (function (json) {
                return Relude__Relude_Validation.mapErrorsNea((function (e) {
                              return key + (": " + e);
                            }), validateString(json));
              }), json);
}

function validateOptionalForKey(missingAsNoneOpt, nullAsNoneOpt, errorAsNoneOpt, key) {
  var missingAsNone = missingAsNoneOpt !== undefined ? missingAsNoneOpt : true;
  var nullAsNone = nullAsNoneOpt !== undefined ? nullAsNoneOpt : true;
  var errorAsNone = errorAsNoneOpt !== undefined ? errorAsNoneOpt : false;
  return function (validate, json) {
    var json$1 = getJsonForKey(key, json);
    if (json$1 === undefined) {
      if (missingAsNone) {
        return Relude__Relude_Validation.ok(undefined);
      } else {
        return Relude__Relude_Validation.error(Curry._1(pure, key + (" was not found in JSON: " + show(undefined, json))));
      }
    }
    var json$2 = Caml_option.valFromOption(json$1);
    var match = validateNull(json$2);
    if (match.TAG === /* VOk */0) {
      if (nullAsNone) {
        return Relude__Relude_Validation.pure(undefined);
      } else {
        return Relude__Relude_Validation.error(Curry._1(pure, key + (" contained a null value in JSON: " + show(undefined, json$2))));
      }
    }
    var a = Curry._1(validate, json$2);
    if (a.TAG === /* VOk */0) {
      return Relude__Relude_Validation.pure(Caml_option.some(a._0));
    } else if (errorAsNone) {
      return Relude__Relude_Validation.pure(undefined);
    } else {
      return a;
    }
  };
}

function validateArrayForKey(key, validateItem, json) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return Relude__Relude_Validation.error(Curry._1(pure, key + (" was not found in JSON: " + show(undefined, json))));
              }), (function (json) {
                return validateArrayOfJson(validateItem, json);
              }), getJsonForKey(key, json));
}

function validateListForKey(key, validateItem, json) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return Relude__Relude_Validation.error(Curry._1(pure, key + (" was not found in JSON: " + show(undefined, json))));
              }), (function (json) {
                return validateArrayOfJsonAsList(validateItem, json);
              }), getJsonForKey(key, json));
}

var $less$$great = ValidationE.Infix.$less$$great;

var $less$$$great = ValidationE.Infix.$less$$$great;

var $less$star$great = ValidationE.Infix.$less$star$great;

var $great$great$eq = ValidationE.Infix.$great$great$eq;

var JE = {
  $$null: $$null,
  bool: fromBool,
  $$int: fromInt,
  $$float: fromFloat,
  num: fromFloat,
  string: fromString,
  opt: fromOption,
  array: fromArrayOfJson,
  arrayBy: fromArrayOfJsonBy,
  arrayOfDict: fromArrayOfDictOfJson,
  arrayOfTuples: fromArrayOfKeyValueTuples,
  list: fromListOfJson,
  listBy: fromListOfJsonBy,
  listOfDict: fromListOfDictOfJson,
  listOfTuples: fromListOfKeyValueTuples,
  dict: fromDictOfJson
};

function opt(errorAsNoneOpt, validate) {
  var errorAsNone = errorAsNoneOpt !== undefined ? errorAsNoneOpt : false;
  return function (json) {
    return validateOptional(errorAsNone, validate)(json);
  };
}

function optAt(missingAsNoneOpt, nullAsNoneOpt, errorAsNoneOpt, index) {
  var missingAsNone = missingAsNoneOpt !== undefined ? missingAsNoneOpt : true;
  var nullAsNone = nullAsNoneOpt !== undefined ? nullAsNoneOpt : true;
  var errorAsNone = errorAsNoneOpt !== undefined ? errorAsNoneOpt : false;
  return function (validate, json) {
    return validateOptionalAtIndex(missingAsNone, nullAsNone, errorAsNone, index)(validate, json);
  };
}

function optFor(missingAsNoneOpt, nullAsNoneOpt, errorAsNoneOpt, key) {
  var missingAsNone = missingAsNoneOpt !== undefined ? missingAsNoneOpt : true;
  var nullAsNone = nullAsNoneOpt !== undefined ? nullAsNoneOpt : true;
  var errorAsNone = errorAsNoneOpt !== undefined ? errorAsNoneOpt : false;
  return function (validate, json) {
    return validateOptionalForKey(missingAsNone, nullAsNone, errorAsNone, key)(validate, json);
  };
}

var JD = {
  $$null: validateNull,
  bool: validateBool,
  $$int: validateInt,
  $$float: validateFloat,
  string: validateString,
  opt: opt,
  getAt: getJsonAtIndex,
  jsonAt: validateJsonAtIndex,
  nullAt: validateNullAtIndex,
  boolAt: validateBoolAtIndex,
  stringAt: validateStringAtIndex,
  intAt: validateIntAtIndex,
  floatAt: validateFloatAtIndex,
  optAt: optAt,
  arrayAt: validateArrayAtIndex,
  objectAt: validateJsonAtIndex,
  array: validateArrayOfJson,
  list: validateArrayOfJsonAsList,
  getFor: getJsonForKey,
  jsonFor: validateJsonForKey,
  nullFor: validateNullForKey,
  boolFor: validateBoolForKey,
  stringFor: validateStringForKey,
  intFor: validateIntForKey,
  floatFor: validateFloatForKey,
  optFor: optFor,
  arrayFor: validateArrayForKey,
  listFor: validateListForKey,
  objectFor: validateJsonForKey
};

var DSL = {
  $less$$great: $less$$great,
  $less$$$great: $less$$$great,
  $less$star$great: $less$star$great,
  $great$great$eq: $great$great$eq,
  JE: JE,
  JD: JD
};

var toBool = Js_json.decodeBoolean;

var toString = Js_json.decodeString;

var toFloat = Js_json.decodeNumber;

var toArrayOfJson = Js_json.decodeArray;

var toDictOfJson = Js_json.decodeObject;

var validateObjectAtIndex = validateJsonAtIndex;

var validateObjectForKey = validateJsonForKey;

exports.show = show;
exports.isNull = isNull;
exports.isBool = isBool;
exports.isString = isString;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isArray = isArray;
exports.$$null = $$null;
exports.fromBool = fromBool;
exports.fromString = fromString;
exports.fromInt = fromInt;
exports.fromFloat = fromFloat;
exports.fromOption = fromOption;
exports.fromArrayOfJson = fromArrayOfJson;
exports.fromArrayOfJsonBy = fromArrayOfJsonBy;
exports.fromListOfJson = fromListOfJson;
exports.fromListOfJsonBy = fromListOfJsonBy;
exports.fromDictOfJson = fromDictOfJson;
exports.fromArrayOfDictOfJson = fromArrayOfDictOfJson;
exports.fromListOfDictOfJson = fromListOfDictOfJson;
exports.fromArrayOfKeyValueTuples = fromArrayOfKeyValueTuples;
exports.fromListOfKeyValueTuples = fromListOfKeyValueTuples;
exports.toNull = toNull;
exports.toBool = toBool;
exports.toString = toString;
exports.toInt = toInt;
exports.toFloat = toFloat;
exports.toArrayOfJson = toArrayOfJson;
exports.toArrayOfJsonOrElse = toArrayOfJsonOrElse;
exports.toArrayOfJsonOrEmpty = toArrayOfJsonOrEmpty;
exports.toListOfJson = toListOfJson;
exports.toListOfJsonOrElse = toListOfJsonOrElse;
exports.toListOrEmpty = toListOrEmpty;
exports.toDictOfJson = toDictOfJson;
exports.toDictOfJsonOrElse = toDictOfJsonOrElse;
exports.toDictOfJsonOrEmpty = toDictOfJsonOrEmpty;
exports.$$Error = $$Error;
exports.Errors = Errors;
exports.ValidationE = ValidationE;
exports.ArrayValidationE = ArrayValidationE;
exports.validateNull = validateNull;
exports.validateBool = validateBool;
exports.validateString = validateString;
exports.validateInt = validateInt;
exports.validateFloat = validateFloat;
exports.validateOptional = validateOptional;
exports.getJsonAtIndex = getJsonAtIndex;
exports.validateJsonAtIndex = validateJsonAtIndex;
exports.validateNullAtIndex = validateNullAtIndex;
exports.validateBoolAtIndex = validateBoolAtIndex;
exports.validateIntAtIndex = validateIntAtIndex;
exports.validateFloatAtIndex = validateFloatAtIndex;
exports.validateStringAtIndex = validateStringAtIndex;
exports.validateOptionalAtIndex = validateOptionalAtIndex;
exports.validateArrayOfJson = validateArrayOfJson;
exports.validateArrayOfJsonAsList = validateArrayOfJsonAsList;
exports.validateArrayAtIndex = validateArrayAtIndex;
exports.validateObjectAtIndex = validateObjectAtIndex;
exports.getJsonForKey = getJsonForKey;
exports.validateJsonForKey = validateJsonForKey;
exports.validateNullForKey = validateNullForKey;
exports.validateBoolForKey = validateBoolForKey;
exports.validateIntForKey = validateIntForKey;
exports.validateFloatForKey = validateFloatForKey;
exports.validateStringForKey = validateStringForKey;
exports.validateOptionalForKey = validateOptionalForKey;
exports.validateArrayForKey = validateArrayForKey;
exports.validateListForKey = validateListForKey;
exports.validateObjectForKey = validateObjectForKey;
exports.DSL = DSL;
/* null Not a pure module */
