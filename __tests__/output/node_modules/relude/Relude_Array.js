// Generated by Melange
'use strict';

var Relude__Relude_Array_Base = require("./array/Relude_Array_Base.js");
var Relude__Relude_Extensions_Alt = require("./extensions/Relude_Extensions_Alt.js");
var Relude__Relude_Array_Instances = require("./array/Relude_Array_Instances.js");
var Relude__Relude_Extensions_Apply = require("./extensions/Relude_Extensions_Apply.js");
var Relude__Relude_Extensions_Monad = require("./extensions/Relude_Extensions_Monad.js");
var Relude__Relude_Extensions_Functor = require("./extensions/Relude_Extensions_Functor.js");
var Relude__Relude_Array_Specializations = require("./array/Relude_Array_Specializations.js");

var include = Relude__Relude_Extensions_Functor.FunctorInfix(Relude__Relude_Array_Instances.Functor);

var include$1 = Relude__Relude_Extensions_Alt.AltInfix(Relude__Relude_Array_Instances.Alt);

var include$2 = Relude__Relude_Extensions_Apply.ApplyInfix(Relude__Relude_Array_Instances.Apply);

var include$3 = Relude__Relude_Extensions_Monad.MonadInfix(Relude__Relude_Array_Instances.Monad);

var Infix_FunctorExtensions = include.FunctorExtensions;

var Infix_$less$$great = include.$less$$great;

var Infix_$less$$$great = include.$less$$$great;

var Infix_$less$ = include.$less$;

var Infix_$$great = include.$$great;

var Infix_$less$at$great = include.$less$at$great;

var Infix_$less$pipe$great = include$1.$less$pipe$great;

var Infix_ApplyExtensions = include$2.ApplyExtensions;

var Infix_$less$star$great = include$2.$less$star$great;

var Infix_$less$star = include$2.$less$star;

var Infix_$star$great = include$2.$star$great;

var Infix_MonadExtensions = include$3.MonadExtensions;

var Infix_$great$great$eq = include$3.$great$great$eq;

var Infix_$eq$less$less = include$3.$eq$less$less;

var Infix_$great$eq$great = include$3.$great$eq$great;

var Infix_$less$eq$less = include$3.$less$eq$less;

var Infix = {
  FunctorExtensions: Infix_FunctorExtensions,
  $less$$great: Infix_$less$$great,
  $less$$$great: Infix_$less$$$great,
  $less$: Infix_$less$,
  $$great: Infix_$$great,
  $less$at$great: Infix_$less$at$great,
  $less$pipe$great: Infix_$less$pipe$great,
  ApplyExtensions: Infix_ApplyExtensions,
  $less$star$great: Infix_$less$star$great,
  $less$star: Infix_$less$star,
  $star$great: Infix_$star$great,
  MonadExtensions: Infix_MonadExtensions,
  $great$great$eq: Infix_$great$great$eq,
  $eq$less$less: Infix_$eq$less$less,
  $great$eq$great: Infix_$great$eq$great,
  $less$eq$less: Infix_$less$eq$less
};

var concat = Relude__Relude_Array_Instances.concat;

var SemigroupAny = Relude__Relude_Array_Instances.SemigroupAny;

var concatNamed = Relude__Relude_Array_Instances.concatNamed;

var map = Relude__Relude_Array_Instances.map;

var Functor = Relude__Relude_Array_Instances.Functor;

var BsFunctorExtensions = Relude__Relude_Array_Instances.BsFunctorExtensions;

var flipMap = Relude__Relude_Array_Instances.flipMap;

var $$void = Relude__Relude_Array_Instances.$$void;

var voidRight = Relude__Relude_Array_Instances.voidRight;

var voidLeft = Relude__Relude_Array_Instances.voidLeft;

var flap = Relude__Relude_Array_Instances.flap;

var apply = Relude__Relude_Array_Instances.apply;

var Apply = Relude__Relude_Array_Instances.Apply;

var BsApplyExtensions = Relude__Relude_Array_Instances.BsApplyExtensions;

var applyFirst = Relude__Relude_Array_Instances.applyFirst;

var applySecond = Relude__Relude_Array_Instances.applySecond;

var map2 = Relude__Relude_Array_Instances.map2;

var map3 = Relude__Relude_Array_Instances.map3;

var map4 = Relude__Relude_Array_Instances.map4;

var map5 = Relude__Relude_Array_Instances.map5;

var tuple2 = Relude__Relude_Array_Instances.tuple2;

var tuple3 = Relude__Relude_Array_Instances.tuple3;

var tuple4 = Relude__Relude_Array_Instances.tuple4;

var tuple5 = Relude__Relude_Array_Instances.tuple5;

var mapTuple2 = Relude__Relude_Array_Instances.mapTuple2;

var mapTuple3 = Relude__Relude_Array_Instances.mapTuple3;

var mapTuple4 = Relude__Relude_Array_Instances.mapTuple4;

var mapTuple5 = Relude__Relude_Array_Instances.mapTuple5;

var pure = Relude__Relude_Array_Instances.pure;

var Applicative = Relude__Relude_Array_Instances.Applicative;

var BsApplicativeExtensions = Relude__Relude_Array_Instances.BsApplicativeExtensions;

var liftA1 = Relude__Relude_Array_Instances.liftA1;

var bind = Relude__Relude_Array_Instances.bind;

var Monad = Relude__Relude_Array_Instances.Monad;

var BsMonadExtensions = Relude__Relude_Array_Instances.BsMonadExtensions;

var flatMap = Relude__Relude_Array_Instances.flatMap;

var flatten = Relude__Relude_Array_Instances.flatten;

var composeKleisli = Relude__Relude_Array_Instances.composeKleisli;

var flipComposeKleisli = Relude__Relude_Array_Instances.flipComposeKleisli;

var liftM1 = Relude__Relude_Array_Instances.liftM1;

var when_ = Relude__Relude_Array_Instances.when_;

var unless = Relude__Relude_Array_Instances.unless;

var alt = Relude__Relude_Array_Instances.alt;

var Alt = Relude__Relude_Array_Instances.Alt;

var orElse = Relude__Relude_Array_Instances.orElse;

var imap = Relude__Relude_Array_Instances.imap;

var Invariant = Relude__Relude_Array_Instances.Invariant;

var extend = Relude__Relude_Array_Instances.extend;

var Extend = Relude__Relude_Array_Instances.Extend;

var foldLeft = Relude__Relude_Array_Instances.foldLeft;

var foldRight = Relude__Relude_Array_Instances.foldRight;

var Foldable = Relude__Relude_Array_Instances.Foldable;

var BsFoldableExtensions = Relude__Relude_Array_Instances.BsFoldableExtensions;

var any = Relude__Relude_Array_Instances.any;

var all = Relude__Relude_Array_Instances.all;

var containsBy = Relude__Relude_Array_Instances.containsBy;

var contains = Relude__Relude_Array_Instances.contains;

var indexOfBy = Relude__Relude_Array_Instances.indexOfBy;

var indexOf = Relude__Relude_Array_Instances.indexOf;

var minBy = Relude__Relude_Array_Instances.minBy;

var min = Relude__Relude_Array_Instances.min;

var maxBy = Relude__Relude_Array_Instances.maxBy;

var max = Relude__Relude_Array_Instances.max;

var countBy = Relude__Relude_Array_Instances.countBy;

var size = Relude__Relude_Array_Instances.size;

var count = Relude__Relude_Array_Instances.count;

var forEach = Relude__Relude_Array_Instances.forEach;

var forEachWithIndex = Relude__Relude_Array_Instances.forEachWithIndex;

var find = Relude__Relude_Array_Instances.find;

var findWithIndex = Relude__Relude_Array_Instances.findWithIndex;

var toArray = Relude__Relude_Array_Instances.toArray;

var FoldableSemigroupExtensions = Relude__Relude_Array_Instances.FoldableSemigroupExtensions;

var FoldableMonoidExtensions = Relude__Relude_Array_Instances.FoldableMonoidExtensions;

var foldMap = Relude__Relude_Array_Instances.foldMap;

var foldWithMonoid = Relude__Relude_Array_Instances.foldWithMonoid;

var intercalate = Relude__Relude_Array_Instances.intercalate;

var FoldableApplicativeExtensions = Relude__Relude_Array_Instances.FoldableApplicativeExtensions;

var FoldableMonadExtensions = Relude__Relude_Array_Instances.FoldableMonadExtensions;

var FoldableEqExtensions = Relude__Relude_Array_Instances.FoldableEqExtensions;

var FoldableOrdExtensions = Relude__Relude_Array_Instances.FoldableOrdExtensions;

var eqBy = Relude__Relude_Array_Instances.eqBy;

var eq = Relude__Relude_Array_Instances.eq;

var Eq = Relude__Relude_Array_Instances.Eq;

var showBy = Relude__Relude_Array_Instances.showBy;

var show = Relude__Relude_Array_Instances.show;

var Show = Relude__Relude_Array_Instances.Show;

var fromList = Relude__Relude_Array_Instances.fromList;

var toList = Relude__Relude_Array_Instances.toList;

var IsoList = Relude__Relude_Array_Instances.IsoList;

var cons = Relude__Relude_Array_Base.cons;

var prepend = Relude__Relude_Array_Base.prepend;

var uncons = Relude__Relude_Array_Base.uncons;

var append = Relude__Relude_Array_Base.append;

var repeat = Relude__Relude_Array_Base.repeat;

var makeWithIndex = Relude__Relude_Array_Base.makeWithIndex;

var mapWithIndex = Relude__Relude_Array_Base.mapWithIndex;

var reverse = Relude__Relude_Array_Base.reverse;

var shuffleInPlace = Relude__Relude_Array_Base.shuffleInPlace;

var shuffle = Relude__Relude_Array_Base.shuffle;

var length = Relude__Relude_Array_Base.length;

var isEmpty = Relude__Relude_Array_Base.isEmpty;

var isNotEmpty = Relude__Relude_Array_Base.isNotEmpty;

var at = Relude__Relude_Array_Base.at;

var setAt = Relude__Relude_Array_Base.setAt;

var head = Relude__Relude_Array_Base.head;

var tail = Relude__Relude_Array_Base.tail;

var tailOrEmpty = Relude__Relude_Array_Base.tailOrEmpty;

var init = Relude__Relude_Array_Base.init;

var initOrEmpty = Relude__Relude_Array_Base.initOrEmpty;

var last = Relude__Relude_Array_Base.last;

var take = Relude__Relude_Array_Base.take;

var takeExactly = Relude__Relude_Array_Base.takeExactly;

var takeWhile = Relude__Relude_Array_Base.takeWhile;

var drop = Relude__Relude_Array_Base.drop;

var dropExactly = Relude__Relude_Array_Base.dropExactly;

var dropWhile = Relude__Relude_Array_Base.dropWhile;

var filter = Relude__Relude_Array_Base.filter;

var keep = Relude__Relude_Array_Base.keep;

var filterWithIndex = Relude__Relude_Array_Base.filterWithIndex;

var keepWithIndex = Relude__Relude_Array_Base.keepWithIndex;

var filterNot = Relude__Relude_Array_Base.filterNot;

var reject = Relude__Relude_Array_Base.reject;

var filterNotWithIndex = Relude__Relude_Array_Base.filterNotWithIndex;

var rejectWithIndex = Relude__Relude_Array_Base.rejectWithIndex;

var mapOption = Relude__Relude_Array_Base.mapOption;

var catOption = Relude__Relude_Array_Base.catOption;

var partition = Relude__Relude_Array_Base.partition;

var splitAt = Relude__Relude_Array_Base.splitAt;

var prependToAll = Relude__Relude_Array_Base.prependToAll;

var intersperse = Relude__Relude_Array_Base.intersperse;

var replicate = Relude__Relude_Array_Base.replicate;

var zip = Relude__Relude_Array_Base.zip;

var zipWith = Relude__Relude_Array_Base.zipWith;

var zipWithIndex = Relude__Relude_Array_Base.zipWithIndex;

var unzip = Relude__Relude_Array_Base.unzip;

var sortWithInt = Relude__Relude_Array_Base.sortWithInt;

var sortBy = Relude__Relude_Array_Base.sortBy;

var sort = Relude__Relude_Array_Base.sort;

var distinctBy = Relude__Relude_Array_Base.distinctBy;

var removeFirstBy = Relude__Relude_Array_Base.removeFirstBy;

var removeEachBy = Relude__Relude_Array_Base.removeEachBy;

var distinct = Relude__Relude_Array_Base.distinct;

var removeFirst = Relude__Relude_Array_Base.removeFirst;

var removeEach = Relude__Relude_Array_Base.removeEach;

var replaceAt = Relude__Relude_Array_Base.replaceAt;

var scanLeft = Relude__Relude_Array_Base.scanLeft;

var scanRight = Relude__Relude_Array_Base.scanRight;

var insertAt = Relude__Relude_Array_Base.insertAt;

var updateAt = Relude__Relude_Array_Base.updateAt;

var swapAt = Relude__Relude_Array_Base.swapAt;

var removeAt = Relude__Relude_Array_Base.removeAt;

var chunk = Relude__Relude_Array_Base.chunk;

var ArrayEqExtensions = Relude__Relude_Array_Specializations.ArrayEqExtensions;

var ArrayOrdExtensions = Relude__Relude_Array_Specializations.ArrayOrdExtensions;

var ArrayMonoidExtensions = Relude__Relude_Array_Specializations.ArrayMonoidExtensions;

var $$String = Relude__Relude_Array_Specializations.$$String;

var Int = Relude__Relude_Array_Specializations.Int;

var Float = Relude__Relude_Array_Specializations.Float;

var $$Option = Relude__Relude_Array_Specializations.$$Option;

var Result = Relude__Relude_Array_Specializations.Result;

var IO = Relude__Relude_Array_Specializations.IO;

var Validation = Relude__Relude_Array_Specializations.Validation;

exports.concat = concat;
exports.SemigroupAny = SemigroupAny;
exports.concatNamed = concatNamed;
exports.map = map;
exports.Functor = Functor;
exports.BsFunctorExtensions = BsFunctorExtensions;
exports.flipMap = flipMap;
exports.$$void = $$void;
exports.voidRight = voidRight;
exports.voidLeft = voidLeft;
exports.flap = flap;
exports.apply = apply;
exports.Apply = Apply;
exports.BsApplyExtensions = BsApplyExtensions;
exports.applyFirst = applyFirst;
exports.applySecond = applySecond;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.tuple2 = tuple2;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.tuple5 = tuple5;
exports.mapTuple2 = mapTuple2;
exports.mapTuple3 = mapTuple3;
exports.mapTuple4 = mapTuple4;
exports.mapTuple5 = mapTuple5;
exports.pure = pure;
exports.Applicative = Applicative;
exports.BsApplicativeExtensions = BsApplicativeExtensions;
exports.liftA1 = liftA1;
exports.bind = bind;
exports.Monad = Monad;
exports.BsMonadExtensions = BsMonadExtensions;
exports.flatMap = flatMap;
exports.flatten = flatten;
exports.composeKleisli = composeKleisli;
exports.flipComposeKleisli = flipComposeKleisli;
exports.liftM1 = liftM1;
exports.when_ = when_;
exports.unless = unless;
exports.alt = alt;
exports.Alt = Alt;
exports.orElse = orElse;
exports.imap = imap;
exports.Invariant = Invariant;
exports.extend = extend;
exports.Extend = Extend;
exports.foldLeft = foldLeft;
exports.foldRight = foldRight;
exports.Foldable = Foldable;
exports.BsFoldableExtensions = BsFoldableExtensions;
exports.any = any;
exports.all = all;
exports.containsBy = containsBy;
exports.contains = contains;
exports.indexOfBy = indexOfBy;
exports.indexOf = indexOf;
exports.minBy = minBy;
exports.min = min;
exports.maxBy = maxBy;
exports.max = max;
exports.countBy = countBy;
exports.size = size;
exports.count = count;
exports.forEach = forEach;
exports.forEachWithIndex = forEachWithIndex;
exports.find = find;
exports.findWithIndex = findWithIndex;
exports.toArray = toArray;
exports.FoldableSemigroupExtensions = FoldableSemigroupExtensions;
exports.FoldableMonoidExtensions = FoldableMonoidExtensions;
exports.foldMap = foldMap;
exports.foldWithMonoid = foldWithMonoid;
exports.intercalate = intercalate;
exports.FoldableApplicativeExtensions = FoldableApplicativeExtensions;
exports.FoldableMonadExtensions = FoldableMonadExtensions;
exports.FoldableEqExtensions = FoldableEqExtensions;
exports.FoldableOrdExtensions = FoldableOrdExtensions;
exports.eqBy = eqBy;
exports.eq = eq;
exports.Eq = Eq;
exports.showBy = showBy;
exports.show = show;
exports.Show = Show;
exports.fromList = fromList;
exports.toList = toList;
exports.IsoList = IsoList;
exports.cons = cons;
exports.prepend = prepend;
exports.uncons = uncons;
exports.append = append;
exports.repeat = repeat;
exports.makeWithIndex = makeWithIndex;
exports.mapWithIndex = mapWithIndex;
exports.reverse = reverse;
exports.shuffleInPlace = shuffleInPlace;
exports.shuffle = shuffle;
exports.length = length;
exports.isEmpty = isEmpty;
exports.isNotEmpty = isNotEmpty;
exports.at = at;
exports.setAt = setAt;
exports.head = head;
exports.tail = tail;
exports.tailOrEmpty = tailOrEmpty;
exports.init = init;
exports.initOrEmpty = initOrEmpty;
exports.last = last;
exports.take = take;
exports.takeExactly = takeExactly;
exports.takeWhile = takeWhile;
exports.drop = drop;
exports.dropExactly = dropExactly;
exports.dropWhile = dropWhile;
exports.filter = filter;
exports.keep = keep;
exports.filterWithIndex = filterWithIndex;
exports.keepWithIndex = keepWithIndex;
exports.filterNot = filterNot;
exports.reject = reject;
exports.filterNotWithIndex = filterNotWithIndex;
exports.rejectWithIndex = rejectWithIndex;
exports.mapOption = mapOption;
exports.catOption = catOption;
exports.partition = partition;
exports.splitAt = splitAt;
exports.prependToAll = prependToAll;
exports.intersperse = intersperse;
exports.replicate = replicate;
exports.zip = zip;
exports.zipWith = zipWith;
exports.zipWithIndex = zipWithIndex;
exports.unzip = unzip;
exports.sortWithInt = sortWithInt;
exports.sortBy = sortBy;
exports.sort = sort;
exports.distinctBy = distinctBy;
exports.removeFirstBy = removeFirstBy;
exports.removeEachBy = removeEachBy;
exports.distinct = distinct;
exports.removeFirst = removeFirst;
exports.removeEach = removeEach;
exports.replaceAt = replaceAt;
exports.scanLeft = scanLeft;
exports.scanRight = scanRight;
exports.insertAt = insertAt;
exports.updateAt = updateAt;
exports.swapAt = swapAt;
exports.removeAt = removeAt;
exports.chunk = chunk;
exports.ArrayEqExtensions = ArrayEqExtensions;
exports.ArrayOrdExtensions = ArrayOrdExtensions;
exports.ArrayMonoidExtensions = ArrayMonoidExtensions;
exports.$$String = $$String;
exports.Int = Int;
exports.Float = Float;
exports.$$Option = $$Option;
exports.Result = Result;
exports.IO = IO;
exports.Validation = Validation;
exports.Infix = Infix;
/* include Not a pure module */
