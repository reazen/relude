// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Js_exn = require("melange.belt/./js_exn.js");
var Caml_js_exceptions = require("melange.runtime/caml_js_exceptions.js");
var Relude__Relude_Void = require("./Relude_Void.js");
var Relude__Relude_Js_Exn = require("./js/Relude_Js_Exn.js");
var Relude__Relude_Result = require("./Relude_Result.js");
var Relude__Relude_Function = require("./Relude_Function.js");
var Relude__Relude_Option_Base = require("./option/Relude_Option_Base.js");
var Relude__Relude_Extensions_Alt = require("./extensions/Relude_Extensions_Alt.js");
var Relude__Relude_Extensions_Apply = require("./extensions/Relude_Extensions_Apply.js");
var Relude__Relude_Extensions_Monad = require("./extensions/Relude_Extensions_Monad.js");
var Relude__Relude_Option_Instances = require("./option/Relude_Option_Instances.js");
var Relude__Relude_Extensions_Functor = require("./extensions/Relude_Extensions_Functor.js");
var Relude__Relude_Extensions_Bifunctor = require("./extensions/Relude_Extensions_Bifunctor.js");
var Relude__Relude_Extensions_Semialign = require("./extensions/Relude_Extensions_Semialign.js");
var Relude__Relude_Extensions_MonadError = require("./extensions/Relude_Extensions_MonadError.js");
var Relude__Relude_Extensions_MonadThrow = require("./extensions/Relude_Extensions_MonadThrow.js");
var Relude__Relude_Extensions_Applicative = require("./extensions/Relude_Extensions_Applicative.js");
var Relude__Relude_Extensions_Semigroupoid = require("./extensions/Relude_Extensions_Semigroupoid.js");

function pure(a) {
  return {
          TAG: /* Pure */0,
          _0: a
        };
}

function pureWithVoid(a) {
  return {
          TAG: /* Pure */0,
          _0: a
        };
}

function $$throw(e) {
  return {
          TAG: /* Throw */1,
          _0: e
        };
}

function throwWithVoid(e) {
  return {
          TAG: /* Throw */1,
          _0: e
        };
}

function suspend(getA) {
  return {
          TAG: /* Suspend */2,
          _0: getA
        };
}

function suspendWithVoid(getA) {
  return {
          TAG: /* Suspend */2,
          _0: getA
        };
}

function suspendThrow(getError) {
  return {
          TAG: /* SuspendIO */3,
          _0: (function (param) {
              return {
                      TAG: /* Throw */1,
                      _0: Curry._1(getError, undefined)
                    };
            })
        };
}

function suspendIO(getIO) {
  return {
          TAG: /* SuspendIO */3,
          _0: getIO
        };
}

function async(onDone) {
  return {
          TAG: /* Async */4,
          _0: onDone
        };
}

function fromOption(getError, option) {
  return Relude__Relude_Option_Base.foldLazy((function (param) {
                return {
                        TAG: /* Throw */1,
                        _0: Curry._1(getError, undefined)
                      };
              }), pure, option);
}

function fromResult(res) {
  return Relude__Relude_Result.fold($$throw, pure, res);
}

function map(f, io) {
  return {
          TAG: /* Map */5,
          _0: f,
          _1: io
        };
}

function $less$$$great(ioA, aToB) {
  return {
          TAG: /* Map */5,
          _0: aToB,
          _1: ioA
        };
}

function tap(f) {
  return function (param) {
    return {
            TAG: /* Map */5,
            _0: (function (a) {
                Curry._1(f, a);
                return a;
              }),
            _1: param
          };
  };
}

function apply(ioAToB, ioA) {
  return {
          TAG: /* Apply */6,
          _0: ioAToB,
          _1: ioA
        };
}

function flatMap(rToIOA, ioR) {
  return {
          TAG: /* FlatMap */7,
          _0: rToIOA,
          _1: ioR
        };
}

function bind(ioA, aToIOB) {
  return {
          TAG: /* FlatMap */7,
          _0: aToIOB,
          _1: ioA
        };
}

function cond(f, newA, err, ioA) {
  return {
          TAG: /* FlatMap */7,
          _0: (function (a) {
              if (Curry._1(f, a)) {
                return {
                        TAG: /* Pure */0,
                        _0: newA
                      };
              } else {
                return {
                        TAG: /* Throw */1,
                        _0: err
                      };
              }
            }),
          _1: ioA
        };
}

function condError(f, err, ioA) {
  return {
          TAG: /* FlatMap */7,
          _0: (function (a) {
              if (Curry._1(f, a)) {
                return {
                        TAG: /* Pure */0,
                        _0: a
                      };
              } else {
                return {
                        TAG: /* Throw */1,
                        _0: err
                      };
              }
            }),
          _1: ioA
        };
}

function unsafeRunAsync(_onDone, _ioA) {
  while(true) {
    var ioA = _ioA;
    var onDone = _onDone;
    switch (ioA.TAG | 0) {
      case /* Pure */0 :
          return Curry._1(onDone, {
                      TAG: /* Ok */0,
                      _0: ioA._0
                    });
      case /* Throw */1 :
          return Curry._1(onDone, {
                      TAG: /* Error */1,
                      _0: ioA._0
                    });
      case /* Suspend */2 :
          return Curry._1(onDone, {
                      TAG: /* Ok */0,
                      _0: Curry._1(ioA._0, undefined)
                    });
      case /* SuspendIO */3 :
          _ioA = Curry._1(ioA._0, undefined);
          continue ;
      case /* Async */4 :
          return Curry._1(ioA._0, onDone);
      case /* Map */5 :
          var r0ToA = ioA._0;
          _ioA = ioA._1;
          _onDone = (function(onDone,r0ToA){
          return function (resultE) {
            if (resultE.TAG === /* Ok */0) {
              return Curry._1(onDone, {
                          TAG: /* Ok */0,
                          _0: Curry._1(r0ToA, resultE._0)
                        });
            } else {
              return Curry._1(onDone, resultE);
            }
          }
          }(onDone,r0ToA));
          continue ;
      case /* Apply */6 :
          return unsafeRunAsyncPar2((function(onDone){
                    return function (resultR0ToA, resultR0) {
                      Curry._1(onDone, Relude__Relude_Result.apply(resultR0ToA, resultR0));
                    }
                    }(onDone)), ioA._0, ioA._1);
      case /* FlatMap */7 :
          var r0ToIOA = ioA._0;
          _ioA = ioA._1;
          _onDone = (function(onDone,r0ToIOA){
          return function (resultE) {
            if (resultE.TAG === /* Ok */0) {
              return unsafeRunAsync((function (resultE) {
                            if (resultE.TAG === /* Ok */0) {
                              return Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: resultE._0
                                        });
                            } else {
                              return Curry._1(onDone, resultE);
                            }
                          }), Curry._1(r0ToIOA, resultE._0));
            } else {
              return Curry._1(onDone, resultE);
            }
          }
          }(onDone,r0ToIOA));
          continue ;
      
    }
  };
}

function unsafeRunAsyncPar2(onDone, ioA, ioB) {
  var refA = {
    contents: undefined
  };
  var refB = {
    contents: undefined
  };
  unsafeRunAsync((function (resultA) {
          var resultB = refB.contents;
          if (resultB !== undefined) {
            return Curry._2(onDone, resultA, resultB);
          } else {
            refA.contents = resultA;
            return ;
          }
        }), ioA);
  unsafeRunAsync((function (resultB) {
          var resultA = refA.contents;
          if (resultA !== undefined) {
            return Curry._2(onDone, resultA, resultB);
          } else {
            refB.contents = resultB;
            return ;
          }
        }), ioB);
}

function unsafeRunAsyncPar3(onDone, ioA, ioB, ioC) {
  var refA = {
    contents: undefined
  };
  var refB = {
    contents: undefined
  };
  var refC = {
    contents: undefined
  };
  unsafeRunAsync((function (resultA) {
          var match = refB.contents;
          var match$1 = refC.contents;
          if (match !== undefined && match$1 !== undefined) {
            return Curry._3(onDone, resultA, match, match$1);
          } else {
            refA.contents = resultA;
            return ;
          }
        }), ioA);
  unsafeRunAsync((function (resultB) {
          var match = refA.contents;
          var match$1 = refC.contents;
          if (match !== undefined && match$1 !== undefined) {
            return Curry._3(onDone, match, resultB, match$1);
          } else {
            refB.contents = resultB;
            return ;
          }
        }), ioB);
  unsafeRunAsync((function (resultC) {
          var match = refA.contents;
          var match$1 = refB.contents;
          if (match !== undefined && match$1 !== undefined) {
            return Curry._3(onDone, match, match$1, resultC);
          } else {
            refC.contents = resultC;
            return ;
          }
        }), ioC);
}

function composeFlatMap(r0ToIOAToB, ioR0, ioBToC) {
  return {
          TAG: /* FlatMap */7,
          _0: (function (r0) {
              return {
                      TAG: /* FlatMap */7,
                      _0: (function (aToB) {
                          return {
                                  TAG: /* Map */5,
                                  _0: (function (bToC) {
                                      return function (param) {
                                        return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                      };
                                    }),
                                  _1: ioBToC
                                };
                        }),
                      _1: Curry._1(r0ToIOAToB, r0)
                    };
            }),
          _1: ioR0
        };
}

function composeMap(r0ToAToB, ioR0, ioBToC) {
  return {
          TAG: /* FlatMap */7,
          _0: (function (r0) {
              return {
                      TAG: /* Map */5,
                      _0: (function (bToC) {
                          var partial_arg = Curry._1(r0ToAToB, r0);
                          return function (param) {
                            return Relude__Relude_Function.Infix.$great$great(partial_arg, bToC, param);
                          };
                        }),
                      _1: ioBToC
                    };
            }),
          _1: ioR0
        };
}

function composeSuspendIO(getIOAToB, ioBToC) {
  switch (ioBToC.TAG | 0) {
    case /* Pure */0 :
        var bToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* Map */5,
                            _0: (function (aToB) {
                                return function (param) {
                                  return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                };
                              }),
                            _1: Curry._1(getIOAToB, undefined)
                          };
                  })
              };
    case /* Throw */1 :
        return ioBToC;
    case /* Suspend */2 :
        var getBToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* Map */5,
                            _0: (function (aToB) {
                                var partial_arg = Curry._1(getBToC, undefined);
                                return function (param) {
                                  return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                                };
                              }),
                            _1: Curry._1(getIOAToB, undefined)
                          };
                  })
              };
    case /* SuspendIO */3 :
        var getIOBToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* FlatMap */7,
                            _0: (function (aToB) {
                                return {
                                        TAG: /* Map */5,
                                        _0: (function (bToC) {
                                            return function (param) {
                                              return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                            };
                                          }),
                                        _1: Curry._1(getIOBToC, undefined)
                                      };
                              }),
                            _1: Curry._1(getIOAToB, undefined)
                          };
                  })
              };
    case /* Async */4 :
        var onDoneBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    unsafeRunAsync((function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            Curry._1(onDoneBToC, (function (resultE) {
                                    if (resultE.TAG !== /* Ok */0) {
                                      return Curry._1(onDone, resultE);
                                    }
                                    var bToC = resultE._0;
                                    Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: (function (param) {
                                              return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                            })
                                        });
                                  }));
                          }), Curry._1(getIOAToB, undefined));
                  })
              };
    case /* Map */5 :
        var ioR0 = ioBToC._1;
        var r0ToBToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* FlatMap */7,
                            _0: (function (aToB) {
                                return {
                                        TAG: /* Map */5,
                                        _0: (function (r0) {
                                            var partial_arg = Curry._1(r0ToBToC, r0);
                                            return function (param) {
                                              return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                                            };
                                          }),
                                        _1: ioR0
                                      };
                              }),
                            _1: Curry._1(getIOAToB, undefined)
                          };
                  })
              };
    case /* Apply */6 :
        var ioR0$1 = ioBToC._1;
        var ioR0ToBToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* FlatMap */7,
                            _0: (function (aToB) {
                                return {
                                        TAG: /* FlatMap */7,
                                        _0: (function (r0ToBToC) {
                                            return {
                                                    TAG: /* Map */5,
                                                    _0: (function (r0) {
                                                        var partial_arg = Curry._1(r0ToBToC, r0);
                                                        return function (param) {
                                                          return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                                                        };
                                                      }),
                                                    _1: ioR0$1
                                                  };
                                          }),
                                        _1: ioR0ToBToC
                                      };
                              }),
                            _1: Curry._1(getIOAToB, undefined)
                          };
                  })
              };
    case /* FlatMap */7 :
        var ioR0$2 = ioBToC._1;
        var r0ToIOBToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* FlatMap */7,
                            _0: (function (aToB) {
                                return {
                                        TAG: /* FlatMap */7,
                                        _0: (function (r0) {
                                            return {
                                                    TAG: /* Map */5,
                                                    _0: (function (bToC) {
                                                        return function (param) {
                                                          return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                                        };
                                                      }),
                                                    _1: Curry._1(r0ToIOBToC, r0)
                                                  };
                                          }),
                                        _1: ioR0$2
                                      };
                              }),
                            _1: Curry._1(getIOAToB, undefined)
                          };
                  })
              };
    
  }
}

function composeAsync(onDoneAToB, ioBToC) {
  switch (ioBToC.TAG | 0) {
    case /* Pure */0 :
        var bToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneAToB, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            Curry._1(onDone, {
                                  TAG: /* Ok */0,
                                  _0: (function (param) {
                                      return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                    })
                                });
                          }));
                  })
              };
    case /* Throw */1 :
        return ioBToC;
    case /* Suspend */2 :
        var getBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneAToB, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            var partial_arg = Curry._1(getBToC, undefined);
                            Curry._1(onDone, {
                                  TAG: /* Ok */0,
                                  _0: (function (param) {
                                      return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                                    })
                                });
                          }));
                  })
              };
    case /* SuspendIO */3 :
        var getIOBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneAToB, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            unsafeRunAsync((function (resultE) {
                                    if (resultE.TAG !== /* Ok */0) {
                                      return Curry._1(onDone, resultE);
                                    }
                                    var bToC = resultE._0;
                                    Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: (function (param) {
                                              return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                            })
                                        });
                                  }), Curry._1(getIOBToC, undefined));
                          }));
                  })
              };
    case /* Async */4 :
        var onDoneBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneAToB, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            Curry._1(onDoneBToC, (function (resultE) {
                                    if (resultE.TAG !== /* Ok */0) {
                                      return Curry._1(onDone, resultE);
                                    }
                                    var bToC = resultE._0;
                                    Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: (function (param) {
                                              return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                            })
                                        });
                                  }));
                          }));
                  })
              };
    case /* Map */5 :
        var ioR0 = ioBToC._1;
        var r0ToBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneAToB, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            unsafeRunAsync(onDone, {
                                  TAG: /* Map */5,
                                  _0: (function (r0) {
                                      var partial_arg = Curry._1(r0ToBToC, r0);
                                      return function (param) {
                                        return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                                      };
                                    }),
                                  _1: ioR0
                                });
                          }));
                  })
              };
    case /* Apply */6 :
        var ioR0$1 = ioBToC._1;
        var ioR0ToBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneAToB, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            unsafeRunAsync(onDone, {
                                  TAG: /* FlatMap */7,
                                  _0: (function (r0ToBToC) {
                                      return {
                                              TAG: /* Map */5,
                                              _0: (function (r0) {
                                                  var partial_arg = Curry._1(r0ToBToC, r0);
                                                  return function (param) {
                                                    return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                                                  };
                                                }),
                                              _1: ioR0$1
                                            };
                                    }),
                                  _1: ioR0ToBToC
                                });
                          }));
                  })
              };
    case /* FlatMap */7 :
        var ioR0$2 = ioBToC._1;
        var r0ToIOBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneAToB, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var aToB = resultE._0;
                            unsafeRunAsync(onDone, {
                                  TAG: /* FlatMap */7,
                                  _0: (function (r0) {
                                      return {
                                              TAG: /* Map */5,
                                              _0: (function (bToC) {
                                                  return function (param) {
                                                    return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                                  };
                                                }),
                                              _1: Curry._1(r0ToIOBToC, r0)
                                            };
                                    }),
                                  _1: ioR0$2
                                });
                          }));
                  })
              };
    
  }
}

function composeSuspend(getAToB, ioBToC) {
  switch (ioBToC.TAG | 0) {
    case /* Pure */0 :
        var bToC = ioBToC._0;
        return {
                TAG: /* Suspend */2,
                _0: (function (param) {
                    var partial_arg = Curry._1(getAToB, undefined);
                    return function (param) {
                      return Relude__Relude_Function.Infix.$great$great(partial_arg, bToC, param);
                    };
                  })
              };
    case /* Throw */1 :
        return ioBToC;
    case /* Suspend */2 :
        var getBToC = ioBToC._0;
        return {
                TAG: /* Suspend */2,
                _0: (function (param) {
                    var partial_arg = Curry._1(getBToC, undefined);
                    var partial_arg$1 = Curry._1(getAToB, undefined);
                    return function (param) {
                      return Relude__Relude_Function.Infix.$great$great(partial_arg$1, partial_arg, param);
                    };
                  })
              };
    case /* SuspendIO */3 :
        var getIOBToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* Map */5,
                            _0: (function (bToC) {
                                var partial_arg = Curry._1(getAToB, undefined);
                                return function (param) {
                                  return Relude__Relude_Function.Infix.$great$great(partial_arg, bToC, param);
                                };
                              }),
                            _1: Curry._1(getIOBToC, undefined)
                          };
                  })
              };
    case /* Async */4 :
        var onDoneBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneBToC, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var bToC = resultE._0;
                            var partial_arg = Curry._1(getAToB, undefined);
                            Curry._1(onDone, {
                                  TAG: /* Ok */0,
                                  _0: (function (param) {
                                      return Relude__Relude_Function.Infix.$great$great(partial_arg, bToC, param);
                                    })
                                });
                          }));
                  })
              };
    case /* Map */5 :
        var r0ToBToC = ioBToC._0;
        return {
                TAG: /* Map */5,
                _0: (function (r0) {
                    var partial_arg = Curry._1(r0ToBToC, r0);
                    var partial_arg$1 = Curry._1(getAToB, undefined);
                    return function (param) {
                      return Relude__Relude_Function.Infix.$great$great(partial_arg$1, partial_arg, param);
                    };
                  }),
                _1: ioBToC._1
              };
    case /* Apply */6 :
        return {
                TAG: /* Apply */6,
                _0: {
                  TAG: /* Map */5,
                  _0: (function (r0ToBToC, r0) {
                      var partial_arg = Curry._1(r0ToBToC, r0);
                      var partial_arg$1 = Curry._1(getAToB, undefined);
                      return function (param) {
                        return Relude__Relude_Function.Infix.$great$great(partial_arg$1, partial_arg, param);
                      };
                    }),
                  _1: ioBToC._0
                },
                _1: ioBToC._1
              };
    case /* FlatMap */7 :
        var r0ToIOBToC = ioBToC._0;
        return {
                TAG: /* FlatMap */7,
                _0: (function (r0) {
                    return {
                            TAG: /* Map */5,
                            _0: (function (bToC) {
                                var partial_arg = Curry._1(getAToB, undefined);
                                return function (param) {
                                  return Relude__Relude_Function.Infix.$great$great(partial_arg, bToC, param);
                                };
                              }),
                            _1: Curry._1(r0ToIOBToC, r0)
                          };
                  }),
                _1: ioBToC._1
              };
    
  }
}

function composeApply(ioR0ToAToB, ioR0, ioBToC) {
  return {
          TAG: /* FlatMap */7,
          _0: (function (r0ToAToB) {
              return {
                      TAG: /* FlatMap */7,
                      _0: (function (r0) {
                          return {
                                  TAG: /* Map */5,
                                  _0: (function (bToC) {
                                      var partial_arg = Curry._1(r0ToAToB, r0);
                                      return function (param) {
                                        return Relude__Relude_Function.Infix.$great$great(partial_arg, bToC, param);
                                      };
                                    }),
                                  _1: ioBToC
                                };
                        }),
                      _1: ioR0
                    };
            }),
          _1: ioR0ToAToB
        };
}

function composePure(aToB, ioBToC) {
  switch (ioBToC.TAG | 0) {
    case /* Pure */0 :
        var bToC = ioBToC._0;
        return {
                TAG: /* Pure */0,
                _0: (function (param) {
                    return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                  })
              };
    case /* Throw */1 :
        return ioBToC;
    case /* Suspend */2 :
        var getBToC = ioBToC._0;
        return {
                TAG: /* Suspend */2,
                _0: (function (param) {
                    var partial_arg = Curry._1(getBToC, undefined);
                    return function (param) {
                      return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                    };
                  })
              };
    case /* SuspendIO */3 :
        var getIOBToC = ioBToC._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* Map */5,
                            _0: (function (bToC) {
                                return function (param) {
                                  return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                };
                              }),
                            _1: Curry._1(getIOBToC, undefined)
                          };
                  })
              };
    case /* Async */4 :
        var onDoneBToC = ioBToC._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneBToC, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, resultE);
                            }
                            var bToC = resultE._0;
                            Curry._1(onDone, {
                                  TAG: /* Ok */0,
                                  _0: (function (param) {
                                      return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                    })
                                });
                          }));
                  })
              };
    case /* Map */5 :
        var r0ToBToC = ioBToC._0;
        return {
                TAG: /* Map */5,
                _0: (function (r0) {
                    var partial_arg = Curry._1(r0ToBToC, r0);
                    return function (param) {
                      return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                    };
                  }),
                _1: ioBToC._1
              };
    case /* Apply */6 :
        return {
                TAG: /* Apply */6,
                _0: {
                  TAG: /* Map */5,
                  _0: (function (r0ToBToC, r0) {
                      var partial_arg = Curry._1(r0ToBToC, r0);
                      return function (param) {
                        return Relude__Relude_Function.Infix.$great$great(aToB, partial_arg, param);
                      };
                    }),
                  _1: ioBToC._0
                },
                _1: ioBToC._1
              };
    case /* FlatMap */7 :
        var r0ToIOBToC = ioBToC._0;
        return {
                TAG: /* FlatMap */7,
                _0: (function (r0) {
                    return {
                            TAG: /* Map */5,
                            _0: (function (bToC) {
                                return function (param) {
                                  return Relude__Relude_Function.Infix.$great$great(aToB, bToC, param);
                                };
                              }),
                            _1: Curry._1(r0ToIOBToC, r0)
                          };
                  }),
                _1: ioBToC._1
              };
    
  }
}

function composeThrow(e, ioBToC) {
  return {
          TAG: /* Throw */1,
          _0: e
        };
}

function compose(ioBToC, ioAToB) {
  switch (ioAToB.TAG | 0) {
    case /* Pure */0 :
        return composePure(ioAToB._0, ioBToC);
    case /* Throw */1 :
        return composeThrow(ioAToB._0, ioBToC);
    case /* Suspend */2 :
        return composeSuspend(ioAToB._0, ioBToC);
    case /* SuspendIO */3 :
        return composeSuspendIO(ioAToB._0, ioBToC);
    case /* Async */4 :
        return composeAsync(ioAToB._0, ioBToC);
    case /* Map */5 :
        return composeMap(ioAToB._0, ioAToB._1, ioBToC);
    case /* Apply */6 :
        return composeApply(ioAToB._0, ioAToB._1, ioBToC);
    case /* FlatMap */7 :
        return composeFlatMap(ioAToB._0, ioAToB._1, ioBToC);
    
  }
}

function andThen(ioAToB, ioBToC) {
  return compose(ioBToC, ioAToB);
}

function mapError(e1ToE2, ioA) {
  switch (ioA.TAG | 0) {
    case /* Pure */0 :
        return {
                TAG: /* Pure */0,
                _0: ioA._0
              };
    case /* Throw */1 :
        return {
                TAG: /* Throw */1,
                _0: Curry._1(e1ToE2, ioA._0)
              };
    case /* Suspend */2 :
        return {
                TAG: /* Suspend */2,
                _0: ioA._0
              };
    case /* SuspendIO */3 :
        var getIOA = ioA._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return mapError(e1ToE2, Curry._1(getIOA, undefined));
                  })
              };
    case /* Async */4 :
        var onDoneA = ioA._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneA, (function (resultA) {
                            Curry._1(onDone, Curry._2(Relude__Relude_Result.mapError, e1ToE2, resultA));
                          }));
                  })
              };
    case /* Map */5 :
        return {
                TAG: /* Map */5,
                _0: ioA._0,
                _1: mapError(e1ToE2, ioA._1)
              };
    case /* Apply */6 :
        return {
                TAG: /* Apply */6,
                _0: mapError(e1ToE2, ioA._0),
                _1: mapError(e1ToE2, ioA._1)
              };
    case /* FlatMap */7 :
        var rToIOA = ioA._0;
        return {
                TAG: /* FlatMap */7,
                _0: (function (r) {
                    return mapError(e1ToE2, Curry._1(rToIOA, r));
                  }),
                _1: mapError(e1ToE2, ioA._1)
              };
    
  }
}

function tapError(f, io) {
  return mapError((function (e) {
                Curry._1(f, e);
                return e;
              }), io);
}

function catchError(eToIOA, ioA) {
  switch (ioA.TAG | 0) {
    case /* Pure */0 :
        return {
                TAG: /* Pure */0,
                _0: ioA._0
              };
    case /* Throw */1 :
        return Curry._1(eToIOA, ioA._0);
    case /* Suspend */2 :
        return {
                TAG: /* Suspend */2,
                _0: ioA._0
              };
    case /* SuspendIO */3 :
        var getIOA = ioA._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return catchError(eToIOA, Curry._1(getIOA, undefined));
                  })
              };
    case /* Async */4 :
        var onDoneA = ioA._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneA, (function (a) {
                            if (a.TAG === /* Ok */0) {
                              return Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: a._0
                                        });
                            } else {
                              return unsafeRunAsync(onDone, Curry._1(eToIOA, a._0));
                            }
                          }));
                  })
              };
    case /* Map */5 :
        return catchErrorMap(eToIOA, ioA._0, ioA._1);
    case /* Apply */6 :
        return catchErrorApply(eToIOA, ioA._0, ioA._1);
    case /* FlatMap */7 :
        return catchErrorFlatMap(eToIOA, ioA._0, ioA._1);
    
  }
}

function catchErrorMap(eToIOA, r0ToA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return catchError(eToIOA, {
                    TAG: /* Pure */0,
                    _0: Curry._1(r0ToA, ioR0._0)
                  });
    case /* Throw */1 :
        return Curry._1(eToIOA, ioR0._0);
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* Suspend */2,
                    _0: (function (param) {
                        return Curry._1(r0ToA, Curry._1(getR0, undefined));
                      })
                  });
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* SuspendIO */3,
                    _0: (function (param) {
                        return {
                                TAG: /* Map */5,
                                _0: r0ToA,
                                _1: Curry._1(getIOR0, undefined)
                              };
                      })
                  });
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (r0) {
                            if (r0.TAG === /* Ok */0) {
                              return Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: Curry._1(r0ToA, r0._0)
                                        });
                            } else {
                              return unsafeRunAsync(onDone, Curry._1(eToIOA, r0._0));
                            }
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* Map */5,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToR0, r0ToA, param);
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        return catchError(eToIOA, {
                    TAG: /* Apply */6,
                    _0: compose({
                          TAG: /* Pure */0,
                          _0: r0ToA
                        }, ioR0._0),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* FlatMap */7,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToIOR0, (function (param) {
                                      return {
                                              TAG: /* Map */5,
                                              _0: r0ToA,
                                              _1: param
                                            };
                                    }), param);
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function catchErrorApply(eToIOA, ioR0ToA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        var r0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* Map */5,
                    _0: (function (r0ToA) {
                        return Curry._1(r0ToA, r0);
                      }),
                    _1: ioR0ToA
                  });
    case /* Throw */1 :
        return Curry._1(eToIOA, ioR0._0);
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* Map */5,
                    _0: (function (r0ToA) {
                        return Curry._1(r0ToA, Curry._1(getR0, undefined));
                      }),
                    _1: ioR0ToA
                  });
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* SuspendIO */3,
                    _0: (function (param) {
                        return {
                                TAG: /* Apply */6,
                                _0: ioR0ToA,
                                _1: Curry._1(getIOR0, undefined)
                              };
                      })
                  });
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (e) {
                            if (e.TAG === /* Ok */0) {
                              return unsafeRunAsync(onDone, catchError(eToIOA, {
                                              TAG: /* Apply */6,
                                              _0: ioR0ToA,
                                              _1: {
                                                TAG: /* Pure */0,
                                                _0: e._0
                                              }
                                            }));
                            } else {
                              return unsafeRunAsync(onDone, Curry._1(eToIOA, e._0));
                            }
                          }));
                  })
              };
    case /* Map */5 :
        return catchError(eToIOA, {
                    TAG: /* Apply */6,
                    _0: compose(ioR0ToA, {
                          TAG: /* Pure */0,
                          _0: ioR0._0
                        }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        return catchError(eToIOA, {
                    TAG: /* Apply */6,
                    _0: compose(ioR0ToA, ioR0._0),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var ioR1 = ioR0._1;
        var r1ToIOR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* FlatMap */7,
                    _0: (function (r0ToA) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: (function (r1) {
                                    return {
                                            TAG: /* Map */5,
                                            _0: Curry.__1(r0ToA),
                                            _1: Curry._1(r1ToIOR0, r1)
                                          };
                                  }),
                                _1: ioR1
                              };
                      }),
                    _1: ioR0ToA
                  });
    
  }
}

function catchErrorFlatMap(eToIOA, r0ToIOA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return catchError(eToIOA, Curry._1(r0ToIOA, ioR0._0));
    case /* Throw */1 :
        return Curry._1(eToIOA, ioR0._0);
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* SuspendIO */3,
                    _0: (function (param) {
                        return Curry._1(r0ToIOA, Curry._1(getR0, undefined));
                      })
                  });
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* SuspendIO */3,
                    _0: (function (param) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: r0ToIOA,
                                _1: Curry._1(getIOR0, undefined)
                              };
                      })
                  });
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (r0) {
                            if (r0.TAG === /* Ok */0) {
                              return unsafeRunAsync(onDone, catchError(eToIOA, Curry._1(r0ToIOA, r0._0)));
                            } else {
                              return unsafeRunAsync(onDone, Curry._1(eToIOA, r0._0));
                            }
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* FlatMap */7,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToR0, r0ToIOA, param);
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        var ioR1ToR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: (function (r1ToR0) {
                                    return Curry._1(r0ToIOA, Curry._1(r1ToR0, r1));
                                  }),
                                _1: ioR1ToR0
                              };
                      }),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return catchError(eToIOA, {
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: r0ToIOA,
                                _1: Curry._1(r1ToIOR0, r1)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function handleError(eToA, ioA) {
  return catchError((function (e) {
                return {
                        TAG: /* Pure */0,
                        _0: Curry._1(eToA, e)
                      };
              }), ioA);
}

function mapHandleError(aToB, eToB, ioAE) {
  return handleError(eToB, {
              TAG: /* Map */5,
              _0: aToB,
              _1: ioAE
            });
}

function bimap(aToB, e1ToE2, io) {
  return mapError(e1ToE2, {
              TAG: /* Map */5,
              _0: aToB,
              _1: io
            });
}

function bitap(f, g, io) {
  return bimap((function (a) {
                Curry._1(f, a);
                return a;
              }), (function (e) {
                Curry._1(g, e);
                return e;
              }), io);
}

function alt(io1, io2) {
  return catchError((function (param) {
                return io2;
              }), io1);
}

function align(ioA, ioB) {
  return {
          TAG: /* Async */4,
          _0: (function (onDone) {
              unsafeRunAsyncPar2((function (resultA, resultB) {
                      if (resultA.TAG !== /* Ok */0) {
                        if (resultB.TAG === /* Ok */0) {
                          return Curry._1(onDone, {
                                      TAG: /* Ok */0,
                                      _0: {
                                        TAG: /* That */1,
                                        _0: resultB._0
                                      }
                                    });
                        } else {
                          return Curry._1(onDone, resultA);
                        }
                      }
                      var a = resultA._0;
                      if (resultB.TAG === /* Ok */0) {
                        return Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: {
                                      TAG: /* Both */2,
                                      _0: a,
                                      _1: resultB._0
                                    }
                                  });
                      } else {
                        return Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: {
                                      TAG: /* This */0,
                                      _0: a
                                    }
                                  });
                      }
                    }), ioA, ioB);
            })
        };
}

function alignWith(f, fa, fb) {
  return {
          TAG: /* Map */5,
          _0: f,
          _1: align(fa, fb)
        };
}

function orElse(fallback, io) {
  return catchError((function (param) {
                return fallback;
              }), io);
}

function tries(getA) {
  return {
          TAG: /* SuspendIO */3,
          _0: (function (param) {
              try {
                return {
                        TAG: /* Pure */0,
                        _0: Curry._1(getA, undefined)
                      };
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                return {
                        TAG: /* Throw */1,
                        _0: exn
                      };
              }
            })
        };
}

function triesJS(getA) {
  return {
          TAG: /* SuspendIO */3,
          _0: (function (param) {
              try {
                return {
                        TAG: /* Pure */0,
                        _0: Curry._1(getA, undefined)
                      };
              }
              catch (raw_jsExn){
                var jsExn = Caml_js_exceptions.internalToOCamlException(raw_jsExn);
                if (jsExn.RE_EXN_ID === Js_exn.$$Error) {
                  return {
                          TAG: /* Throw */1,
                          _0: jsExn._1
                        };
                }
                var jsExn$1 = Relude__Relude_Js_Exn.unsafeFromExn(jsExn);
                return {
                        TAG: /* Throw */1,
                        _0: jsExn$1
                      };
              }
            })
        };
}

function flip(ioA) {
  switch (ioA.TAG | 0) {
    case /* Pure */0 :
        return {
                TAG: /* Throw */1,
                _0: ioA._0
              };
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: ioA._0
              };
    case /* Suspend */2 :
        var getA = ioA._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* Throw */1,
                            _0: Curry._1(getA, undefined)
                          };
                  })
              };
    case /* SuspendIO */3 :
        var getIOA = ioA._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return flip(Curry._1(getIOA, undefined));
                  })
              };
    case /* Async */4 :
        var onDoneA = ioA._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneA, (function (resultA) {
                            Curry._1(onDone, Relude__Relude_Result.flip(resultA));
                          }));
                  })
              };
    case /* Map */5 :
        return flipMap(ioA._0, ioA._1);
    case /* Apply */6 :
        return flipApply(ioA._0, ioA._1);
    case /* FlatMap */7 :
        return flipFlatMap(ioA._0, ioA._1);
    
  }
}

function flipMap(r0ToA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return {
                TAG: /* Throw */1,
                _0: Curry._1(r0ToA, ioR0._0)
              };
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: ioR0._0
              };
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return {
                            TAG: /* Throw */1,
                            _0: Curry._1(r0ToA, Curry._1(getR0, undefined))
                          };
                  })
              };
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return flip({
                                TAG: /* Map */5,
                                _0: r0ToA,
                                _1: Curry._1(getIOR0, undefined)
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (resultR0) {
                            Curry._1(onDone, Relude__Relude_Result.flip(Relude__Relude_Result.map(r0ToA, resultR0)));
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return flip({
                    TAG: /* Map */5,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToR0, r0ToA, param);
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        return flip({
                    TAG: /* Apply */6,
                    _0: compose({
                          TAG: /* Pure */0,
                          _0: r0ToA
                        }, ioR0._0),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var rToIOR0 = ioR0._0;
        return flip({
                    TAG: /* FlatMap */7,
                    _0: (function (r) {
                        return {
                                TAG: /* Map */5,
                                _0: r0ToA,
                                _1: Curry._1(rToIOR0, r)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function flipApply(ioR0ToA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        var r0 = ioR0._0;
        return flip({
                    TAG: /* Map */5,
                    _0: (function (r0ToA) {
                        return Curry._1(r0ToA, r0);
                      }),
                    _1: ioR0ToA
                  });
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: ioR0._0
              };
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return flip({
                    TAG: /* Map */5,
                    _0: (function (r0ToA) {
                        return Curry._1(r0ToA, Curry._1(getR0, undefined));
                      }),
                    _1: ioR0ToA
                  });
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return flip({
                                TAG: /* Apply */6,
                                _0: ioR0ToA,
                                _1: Curry._1(getIOR0, undefined)
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (e) {
                            if (e.TAG !== /* Ok */0) {
                              return Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: e._0
                                        });
                            }
                            var r0 = e._0;
                            unsafeRunAsync((function (e) {
                                    if (e.TAG === /* Ok */0) {
                                      return Curry._1(onDone, {
                                                  TAG: /* Error */1,
                                                  _0: e._0
                                                });
                                    } else {
                                      return Curry._1(onDone, {
                                                  TAG: /* Ok */0,
                                                  _0: e._0
                                                });
                                    }
                                  }), {
                                  TAG: /* Map */5,
                                  _0: (function (r0ToA) {
                                      return Curry._1(r0ToA, r0);
                                    }),
                                  _1: ioR0ToA
                                });
                          }));
                  })
              };
    case /* Map */5 :
        return flip({
                    TAG: /* Apply */6,
                    _0: compose(ioR0ToA, {
                          TAG: /* Pure */0,
                          _0: ioR0._0
                        }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        return flip({
                    TAG: /* Apply */6,
                    _0: compose(ioR0ToA, ioR0._0),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return flip({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* Apply */6,
                                _0: ioR0ToA,
                                _1: Curry._1(r1ToIOR0, r1)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function flipFlatMap(r0ToIOA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return flip(Curry._1(r0ToIOA, ioR0._0));
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: ioR0._0
              };
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return flip(Curry._1(r0ToIOA, Curry._1(getR0, undefined)));
                  })
              };
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return flip({
                                TAG: /* FlatMap */7,
                                _0: r0ToIOA,
                                _1: Curry._1(getIOR0, undefined)
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (resultR0) {
                            if (resultR0.TAG === /* Ok */0) {
                              return unsafeRunAsync(onDone, flip(Curry._1(r0ToIOA, resultR0._0)));
                            } else {
                              return Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: resultR0._0
                                        });
                            }
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return flip({
                    TAG: /* FlatMap */7,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToR0, r0ToIOA, param);
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        var ioR1ToR0 = ioR0._0;
        return flip({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: (function (r1ToR0) {
                                    return Curry._1(r0ToIOA, Curry._1(r1ToR0, r1));
                                  }),
                                _1: ioR1ToR0
                              };
                      }),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var rToIOR0 = ioR0._0;
        return flip({
                    TAG: /* FlatMap */7,
                    _0: (function (r) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: r0ToIOA,
                                _1: Curry._1(rToIOR0, r)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function summonError(ioA) {
  switch (ioA.TAG | 0) {
    case /* Pure */0 :
        return {
                TAG: /* Pure */0,
                _0: {
                  TAG: /* Ok */0,
                  _0: ioA._0
                }
              };
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: {
                  TAG: /* Error */1,
                  _0: ioA._0
                }
              };
    case /* Suspend */2 :
        var getA = ioA._0;
        return {
                TAG: /* Suspend */2,
                _0: (function (param) {
                    return {
                            TAG: /* Ok */0,
                            _0: Curry._1(getA, undefined)
                          };
                  })
              };
    case /* SuspendIO */3 :
        var getIOA = ioA._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return summonError(Curry._1(getIOA, undefined));
                  })
              };
    case /* Async */4 :
        var onDoneA = ioA._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneA, (function (result) {
                            Curry._1(onDone, {
                                  TAG: /* Ok */0,
                                  _0: result
                                });
                          }));
                  })
              };
    case /* Map */5 :
        return summonErrorMap(ioA._0, ioA._1);
    case /* Apply */6 :
        return summonErrorApply(ioA._0, ioA._1);
    case /* FlatMap */7 :
        return summonErrorFlatMap(ioA._0, ioA._1);
    
  }
}

function summonErrorMap(r0ToA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return {
                TAG: /* Pure */0,
                _0: {
                  TAG: /* Ok */0,
                  _0: Curry._1(r0ToA, ioR0._0)
                }
              };
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: {
                  TAG: /* Error */1,
                  _0: ioR0._0
                }
              };
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return {
                TAG: /* Suspend */2,
                _0: (function (param) {
                    return {
                            TAG: /* Ok */0,
                            _0: Curry._1(r0ToA, Curry._1(getR0, undefined))
                          };
                  })
              };
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return summonError({
                                TAG: /* Map */5,
                                _0: r0ToA,
                                _1: Curry._1(getIOR0, undefined)
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (resR0) {
                            Curry._1(onDone, {
                                  TAG: /* Ok */0,
                                  _0: Relude__Relude_Result.map(r0ToA, resR0)
                                });
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return summonError({
                    TAG: /* Map */5,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToR0, r0ToA, param);
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        return summonError({
                    TAG: /* Apply */6,
                    _0: compose({
                          TAG: /* Pure */0,
                          _0: r0ToA
                        }, ioR0._0),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return summonError({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* Map */5,
                                _0: r0ToA,
                                _1: Curry._1(r1ToIOR0, r1)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function summonErrorApply(ioR0ToA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        var r0 = ioR0._0;
        return summonError({
                    TAG: /* Map */5,
                    _0: (function (r0ToA) {
                        return Curry._1(r0ToA, r0);
                      }),
                    _1: ioR0ToA
                  });
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: {
                  TAG: /* Error */1,
                  _0: ioR0._0
                }
              };
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return summonError({
                                TAG: /* Map */5,
                                _0: (function (r0ToA) {
                                    return Curry._1(r0ToA, Curry._1(getR0, undefined));
                                  }),
                                _1: ioR0ToA
                              });
                  })
              };
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return summonError({
                                TAG: /* FlatMap */7,
                                _0: (function (r0ToA) {
                                    return {
                                            TAG: /* Map */5,
                                            _0: r0ToA,
                                            _1: Curry._1(getIOR0, undefined)
                                          };
                                  }),
                                _1: ioR0ToA
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (resultE) {
                            if (resultE.TAG !== /* Ok */0) {
                              return Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: resultE
                                        });
                            }
                            var r0 = resultE._0;
                            unsafeRunAsync(onDone, summonError({
                                      TAG: /* Map */5,
                                      _0: (function (r0ToA) {
                                          return Curry._1(r0ToA, r0);
                                        }),
                                      _1: ioR0ToA
                                    }));
                          }));
                  })
              };
    case /* Map */5 :
        return summonError({
                    TAG: /* Apply */6,
                    _0: compose(ioR0ToA, {
                          TAG: /* Pure */0,
                          _0: ioR0._0
                        }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        return summonError({
                    TAG: /* Apply */6,
                    _0: compose(ioR0ToA, ioR0._0),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return summonError({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: (function (r0) {
                                    return {
                                            TAG: /* Map */5,
                                            _0: (function (r0ToA) {
                                                return Curry._1(r0ToA, r0);
                                              }),
                                            _1: ioR0ToA
                                          };
                                  }),
                                _1: Curry._1(r1ToIOR0, r1)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function summonErrorFlatMap(r0ToIOA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return summonError(Curry._1(r0ToIOA, ioR0._0));
    case /* Throw */1 :
        return {
                TAG: /* Pure */0,
                _0: {
                  TAG: /* Error */1,
                  _0: ioR0._0
                }
              };
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return summonError(Curry._1(r0ToIOA, Curry._1(getR0, undefined)));
                  })
              };
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return summonError({
                                TAG: /* FlatMap */7,
                                _0: r0ToIOA,
                                _1: Curry._1(getIOR0, undefined)
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDone) {
                    Curry._1(onDoneR0, (function (e) {
                            if (e.TAG === /* Ok */0) {
                              return unsafeRunAsync(onDone, summonError(Curry._1(r0ToIOA, e._0)));
                            } else {
                              return Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: {
                                            TAG: /* Error */1,
                                            _0: e._0
                                          }
                                        });
                            }
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return summonError({
                    TAG: /* FlatMap */7,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToR0, r0ToIOA, param);
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        var ioR1ToR0 = ioR0._0;
        return summonError({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: (function (r1ToR0) {
                                    return Curry._1(r0ToIOA, Curry._1(r1ToR0, r1));
                                  }),
                                _1: ioR1ToR0
                              };
                      }),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return summonError({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: Curry.__1(r0ToIOA),
                                _1: Curry._1(r1ToIOR0, r1)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function unsummonError(ioResultA) {
  switch (ioResultA.TAG | 0) {
    case /* Pure */0 :
        return Relude__Relude_Result.fold($$throw, pure, ioResultA._0);
    case /* Throw */1 :
        return Relude__Relude_Void.absurd(ioResultA._0);
    case /* Suspend */2 :
        var getResultA = ioResultA._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return Relude__Relude_Result.fold($$throw, pure, Curry._1(getResultA, undefined));
                  })
              };
    case /* SuspendIO */3 :
        var getIOResultA = ioResultA._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return unsummonError(Curry._1(getIOResultA, undefined));
                  })
              };
    case /* Async */4 :
        var onDoneResultResultA = ioResultA._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDoneResultA) {
                    Curry._1(onDoneResultResultA, (function (resultResultA) {
                            if (resultResultA.TAG === /* Ok */0) {
                              return Curry._1(onDoneResultA, resultResultA._0);
                            } else {
                              return Relude__Relude_Void.absurd(resultResultA._0);
                            }
                          }));
                  })
              };
    case /* Map */5 :
        return unsummonErrorMap(ioResultA._0, ioResultA._1);
    case /* Apply */6 :
        return unsummonErrorApply(ioResultA._0, ioResultA._1);
    case /* FlatMap */7 :
        return unsummonErrorFlatMap(ioResultA._0, ioResultA._1);
    
  }
}

function unsummonErrorMap(r0ToResultA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return Relude__Relude_Result.fold($$throw, pure, Curry._1(r0ToResultA, ioR0._0));
    case /* Throw */1 :
        return Relude__Relude_Void.absurd(ioR0._0);
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return Relude__Relude_Result.fold($$throw, pure, Curry._1(r0ToResultA, Curry._1(getR0, undefined)));
                  })
              };
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return unsummonError({
                                TAG: /* Map */5,
                                _0: r0ToResultA,
                                _1: Curry._1(getIOR0, undefined)
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDoneResultA) {
                    Curry._1(onDoneR0, (function (r0) {
                            if (r0.TAG === /* Ok */0) {
                              return Curry._1(onDoneResultA, Curry._1(r0ToResultA, r0._0));
                            } else {
                              return Relude__Relude_Void.absurd(r0._0);
                            }
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return unsummonError({
                    TAG: /* Map */5,
                    _0: (function (r1) {
                        return Curry._1(r0ToResultA, Curry._1(r1ToR0, r1));
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        return unsummonError({
                    TAG: /* Apply */6,
                    _0: compose({
                          TAG: /* Pure */0,
                          _0: r0ToResultA
                        }, ioR0._0),
                    _1: ioR0._1
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return unsummonError({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* Map */5,
                                _0: r0ToResultA,
                                _1: Curry._1(r1ToIOR0, r1)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function unsummonErrorApply(ioR0ToResultA, ioR0) {
  return unsummonError({
              TAG: /* FlatMap */7,
              _0: (function (r0ToResultA) {
                  return {
                          TAG: /* FlatMap */7,
                          _0: (function (r0) {
                              return {
                                      TAG: /* Pure */0,
                                      _0: Curry._1(r0ToResultA, r0)
                                    };
                            }),
                          _1: ioR0
                        };
                }),
              _1: ioR0ToResultA
            });
}

function unsummonErrorFlatMap(r0ToIOResultA, ioR0) {
  switch (ioR0.TAG | 0) {
    case /* Pure */0 :
        return unsummonError(Curry._1(r0ToIOResultA, ioR0._0));
    case /* Throw */1 :
        return Relude__Relude_Void.absurd(ioR0._0);
    case /* Suspend */2 :
        var getR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return unsummonError(Curry._1(r0ToIOResultA, Curry._1(getR0, undefined)));
                  })
              };
    case /* SuspendIO */3 :
        var getIOR0 = ioR0._0;
        return {
                TAG: /* SuspendIO */3,
                _0: (function (param) {
                    return unsummonError({
                                TAG: /* FlatMap */7,
                                _0: r0ToIOResultA,
                                _1: Curry._1(getIOR0, undefined)
                              });
                  })
              };
    case /* Async */4 :
        var onDoneR0 = ioR0._0;
        return {
                TAG: /* Async */4,
                _0: (function (onDoneResultA) {
                    Curry._1(onDoneR0, (function (r0) {
                            if (r0.TAG === /* Ok */0) {
                              return unsafeRunAsync(onDoneResultA, unsummonError(Curry._1(r0ToIOResultA, r0._0)));
                            } else {
                              return Relude__Relude_Void.absurd(r0._0);
                            }
                          }));
                  })
              };
    case /* Map */5 :
        var r1ToR0 = ioR0._0;
        return unsummonError({
                    TAG: /* FlatMap */7,
                    _0: (function (param) {
                        return Relude__Relude_Function.Infix.$great$great(r1ToR0, r0ToIOResultA, param);
                      }),
                    _1: ioR0._1
                  });
    case /* Apply */6 :
        var ioR1 = ioR0._1;
        return unsummonError({
                    TAG: /* FlatMap */7,
                    _0: (function (r1ToR0) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: (function (r1) {
                                    return {
                                            TAG: /* FlatMap */7,
                                            _0: pure,
                                            _1: Curry._1(r0ToIOResultA, Curry._1(r1ToR0, r1))
                                          };
                                  }),
                                _1: ioR1
                              };
                      }),
                    _1: ioR0._0
                  });
    case /* FlatMap */7 :
        var r1ToIOR0 = ioR0._0;
        return unsummonError({
                    TAG: /* FlatMap */7,
                    _0: (function (r1) {
                        return {
                                TAG: /* FlatMap */7,
                                _0: Curry.__1(r0ToIOResultA),
                                _1: Curry._1(r1ToIOR0, r1)
                              };
                      }),
                    _1: ioR0._1
                  });
    
  }
}

function delay(millis) {
  return {
          TAG: /* Async */4,
          _0: (function (onDone) {
              setTimeout((function (param) {
                      Curry._1(onDone, {
                            TAG: /* Ok */0,
                            _0: undefined
                          });
                    }), millis);
            })
        };
}

function delayWithVoid(millis) {
  return {
          TAG: /* Async */4,
          _0: (function (onDone) {
              setTimeout((function (param) {
                      Curry._1(onDone, {
                            TAG: /* Ok */0,
                            _0: undefined
                          });
                    }), millis);
            })
        };
}

function withDelayAfter(millis, io) {
  return {
          TAG: /* FlatMap */7,
          _0: (function (a) {
              return {
                      TAG: /* Map */5,
                      _0: (function (param) {
                          return a;
                        }),
                      _1: delay(millis)
                    };
            }),
          _1: io
        };
}

function withDelayBefore(millis, io) {
  return {
          TAG: /* FlatMap */7,
          _0: (function (param) {
              return io;
            }),
          _1: delay(millis)
        };
}

function debounce(immediateOpt, intervalMsOpt, io) {
  var immediate = immediateOpt !== undefined ? immediateOpt : false;
  var intervalMs = intervalMsOpt !== undefined ? intervalMsOpt : 150;
  var currentlyDebouncedIO = {
    contents: undefined
  };
  var startDebouncedIO = function (param) {
    var debouncedIO = delay(intervalMs);
    currentlyDebouncedIO.contents = Relude__Relude_Option_Instances.pure(debouncedIO);
    return {
            TAG: /* Map */5,
            _0: (function (param) {
                var shouldRunIO = Relude__Relude_Option_Base.fold(false, (function (param) {
                        return debouncedIO === param;
                      }), currentlyDebouncedIO.contents);
                if (shouldRunIO) {
                  currentlyDebouncedIO.contents = undefined;
                }
                return shouldRunIO;
              }),
            _1: debouncedIO
          };
  };
  return function (a) {
    var match = currentlyDebouncedIO.contents;
    var immediatelyRanIO = immediate && match === undefined ? Relude__Relude_Option_Instances.pure({
            TAG: /* SuspendIO */3,
            _0: (function (param) {
                return {
                        TAG: /* Map */5,
                        _0: Relude__Relude_Option_Instances.pure,
                        _1: Curry._1(io, a)
                      };
              })
          }) : undefined;
    var debouncedIO_0 = function (shouldRunIO) {
      if (shouldRunIO && Relude__Relude_Option_Base.isNone(immediatelyRanIO)) {
        return {
                TAG: /* Map */5,
                _0: Relude__Relude_Option_Instances.pure,
                _1: Curry._1(io, a)
              };
      } else {
        return {
                TAG: /* Pure */0,
                _0: undefined
              };
      }
    };
    var debouncedIO_1 = startDebouncedIO(undefined);
    var debouncedIO = {
      TAG: /* FlatMap */7,
      _0: debouncedIO_0,
      _1: debouncedIO_1
    };
    return Relude__Relude_Option_Base.getOrElse(debouncedIO, immediatelyRanIO);
  };
}

function throttle(intervalMsOpt, io) {
  var intervalMs = intervalMsOpt !== undefined ? intervalMsOpt : 150;
  var currentlyThrottled = {
    contents: false
  };
  var startThrottle = function (param) {
    currentlyThrottled.contents = true;
    setTimeout((function (param) {
            currentlyThrottled.contents = false;
          }), intervalMs);
  };
  return function (a) {
    if (currentlyThrottled.contents) {
      return {
              TAG: /* Pure */0,
              _0: undefined
            };
    } else {
      startThrottle(undefined);
      return {
              TAG: /* Map */5,
              _0: Relude__Relude_Option_Instances.pure,
              _1: Curry._1(io, a)
            };
    }
  };
}

var Bifunctor = {
  bimap: bimap
};

var include = Relude__Relude_Extensions_Bifunctor.BifunctorExtensions(Bifunctor);

var mapError$1 = include.mapError;

function WithError(E) {
  var Functor = {
    map: map
  };
  var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);
  var Alt = {
    map: map,
    alt: alt
  };
  var include$1 = Relude__Relude_Extensions_Alt.AltExtensions(Alt);
  var Apply = {
    map: map,
    apply: apply
  };
  var include$2 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);
  var Applicative = {
    map: map,
    apply: apply,
    pure: pure
  };
  var include$3 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);
  var Semialign = {
    map: map,
    align: align,
    alignWith: alignWith
  };
  Relude__Relude_Extensions_Semialign.SemialignExtensions(Semialign);
  var Monad = {
    map: map,
    apply: apply,
    pure: pure,
    flat_map: bind
  };
  var include$4 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);
  var MonadThrow = {
    map: map,
    apply: apply,
    pure: pure,
    flat_map: bind,
    throwError: $$throw
  };
  Relude__Relude_Extensions_MonadThrow.MonadThrowExtensions(MonadThrow);
  var MonadError = {
    map: map,
    apply: apply,
    pure: pure,
    flat_map: bind,
    throwError: $$throw,
    catchError: catchError
  };
  Relude__Relude_Extensions_MonadError.MonadErrorExtensions(MonadError);
  var Semigroupoid = {
    compose: compose
  };
  var include$5 = Relude__Relude_Extensions_Semigroupoid.SemigroupoidExtensions(Semigroupoid);
  var include$6 = Relude__Relude_Extensions_Functor.FunctorInfix(Functor);
  var include$7 = Relude__Relude_Extensions_Bifunctor.BifunctorInfix(Bifunctor);
  var include$8 = Relude__Relude_Extensions_Apply.ApplyInfix(Apply);
  var include$9 = Relude__Relude_Extensions_Monad.MonadInfix(Monad);
  var include$10 = Relude__Relude_Extensions_Alt.AltInfix(Alt);
  var include$11 = Relude__Relude_Extensions_Semigroupoid.SemigroupoidInfix(Semigroupoid);
  var Infix_FunctorExtensions = include$6.FunctorExtensions;
  var Infix_$less$$great = include$6.$less$$great;
  var Infix_$less$$$great = include$6.$less$$$great;
  var Infix_$less$ = include$6.$less$;
  var Infix_$$great = include$6.$$great;
  var Infix_$less$at$great = include$6.$less$at$great;
  var Infix_$less$less$$great$great = include$7.$less$less$$great$great;
  var Infix_ApplyExtensions = include$8.ApplyExtensions;
  var Infix_$less$star$great = include$8.$less$star$great;
  var Infix_$less$star = include$8.$less$star;
  var Infix_$star$great = include$8.$star$great;
  var Infix_MonadExtensions = include$9.MonadExtensions;
  var Infix_$great$great$eq = include$9.$great$great$eq;
  var Infix_$eq$less$less = include$9.$eq$less$less;
  var Infix_$great$eq$great = include$9.$great$eq$great;
  var Infix_$less$eq$less = include$9.$less$eq$less;
  var Infix_$less$pipe$great = include$10.$less$pipe$great;
  var Infix_SE = include$11.SE;
  var Infix_$less$less$less = include$11.$less$less$less;
  var Infix_$great$great$great = include$11.$great$great$great;
  var Infix = {
    FunctorExtensions: Infix_FunctorExtensions,
    $less$$great: Infix_$less$$great,
    $less$$$great: Infix_$less$$$great,
    $less$: Infix_$less$,
    $$great: Infix_$$great,
    $less$at$great: Infix_$less$at$great,
    $less$less$$great$great: Infix_$less$less$$great$great,
    ApplyExtensions: Infix_ApplyExtensions,
    $less$star$great: Infix_$less$star$great,
    $less$star: Infix_$less$star,
    $star$great: Infix_$star$great,
    MonadExtensions: Infix_MonadExtensions,
    $great$great$eq: Infix_$great$great$eq,
    $eq$less$less: Infix_$eq$less$less,
    $great$eq$great: Infix_$great$eq$great,
    $less$eq$less: Infix_$less$eq$less,
    $less$pipe$great: Infix_$less$pipe$great,
    SE: Infix_SE,
    $less$less$less: Infix_$less$less$less,
    $great$great$great: Infix_$great$great$great
  };
  return {
          Functor: Functor,
          map: map,
          mapError: mapError$1,
          BsFunctorExtensions: include.BsFunctorExtensions,
          flipMap: include.flipMap,
          $$void: include.$$void,
          voidRight: include.voidRight,
          voidLeft: include.voidLeft,
          flap: include.flap,
          Alt: Alt,
          alt: alt,
          orElse: include$1.orElse,
          Apply: Apply,
          apply: apply,
          BsApplyExtensions: include$2.BsApplyExtensions,
          applyFirst: include$2.applyFirst,
          applySecond: include$2.applySecond,
          map2: include$2.map2,
          map3: include$2.map3,
          map4: include$2.map4,
          map5: include$2.map5,
          tuple2: include$2.tuple2,
          tuple3: include$2.tuple3,
          tuple4: include$2.tuple4,
          tuple5: include$2.tuple5,
          mapTuple2: include$2.mapTuple2,
          mapTuple3: include$2.mapTuple3,
          mapTuple4: include$2.mapTuple4,
          mapTuple5: include$2.mapTuple5,
          Applicative: Applicative,
          pure: pure,
          BsApplicativeExtensions: include$3.BsApplicativeExtensions,
          liftA1: include$3.liftA1,
          all: include$3.all,
          Semialign: Semialign,
          Monad: Monad,
          bind: bind,
          BsMonadExtensions: include$4.BsMonadExtensions,
          flatMap: include$4.flatMap,
          flatten: include$4.flatten,
          composeKleisli: include$4.composeKleisli,
          flipComposeKleisli: include$4.flipComposeKleisli,
          liftM1: include$4.liftM1,
          when_: include$4.when_,
          unless: include$4.unless,
          MonadThrow: MonadThrow,
          throwError: $$throw,
          MonadError: MonadError,
          catchError: catchError,
          Semigroupoid: Semigroupoid,
          andThen: include$5.andThen,
          Infix: Infix
        };
}

var unit = {
  TAG: /* Pure */0,
  _0: undefined
};

var unitWithVoid = {
  TAG: /* Pure */0,
  _0: undefined
};

var $less$$great = map;

var $less$star$great = apply;

var $great$great$eq = bind;

var $less$less$less = compose;

var $great$great$great = andThen;

var withDelay = withDelayAfter;

var mapLeft = include.mapLeft;

var mapRight = include.mapRight;

exports.pure = pure;
exports.pureWithVoid = pureWithVoid;
exports.unit = unit;
exports.unitWithVoid = unitWithVoid;
exports.$$throw = $$throw;
exports.throwWithVoid = throwWithVoid;
exports.suspend = suspend;
exports.suspendWithVoid = suspendWithVoid;
exports.suspendThrow = suspendThrow;
exports.suspendIO = suspendIO;
exports.async = async;
exports.fromOption = fromOption;
exports.fromResult = fromResult;
exports.map = map;
exports.$less$$great = $less$$great;
exports.$less$$$great = $less$$$great;
exports.tap = tap;
exports.apply = apply;
exports.$less$star$great = $less$star$great;
exports.flatMap = flatMap;
exports.bind = bind;
exports.$great$great$eq = $great$great$eq;
exports.cond = cond;
exports.condError = condError;
exports.unsafeRunAsync = unsafeRunAsync;
exports.unsafeRunAsyncPar2 = unsafeRunAsyncPar2;
exports.unsafeRunAsyncPar3 = unsafeRunAsyncPar3;
exports.compose = compose;
exports.composePure = composePure;
exports.composeThrow = composeThrow;
exports.composeSuspend = composeSuspend;
exports.composeSuspendIO = composeSuspendIO;
exports.composeAsync = composeAsync;
exports.composeMap = composeMap;
exports.composeApply = composeApply;
exports.composeFlatMap = composeFlatMap;
exports.$less$less$less = $less$less$less;
exports.andThen = andThen;
exports.$great$great$great = $great$great$great;
exports.tapError = tapError;
exports.catchError = catchError;
exports.catchErrorMap = catchErrorMap;
exports.catchErrorApply = catchErrorApply;
exports.catchErrorFlatMap = catchErrorFlatMap;
exports.handleError = handleError;
exports.mapHandleError = mapHandleError;
exports.bitap = bitap;
exports.alt = alt;
exports.align = align;
exports.alignWith = alignWith;
exports.orElse = orElse;
exports.tries = tries;
exports.triesJS = triesJS;
exports.flip = flip;
exports.flipMap = flipMap;
exports.flipApply = flipApply;
exports.flipFlatMap = flipFlatMap;
exports.summonError = summonError;
exports.summonErrorMap = summonErrorMap;
exports.summonErrorApply = summonErrorApply;
exports.summonErrorFlatMap = summonErrorFlatMap;
exports.unsummonError = unsummonError;
exports.unsummonErrorMap = unsummonErrorMap;
exports.unsummonErrorApply = unsummonErrorApply;
exports.unsummonErrorFlatMap = unsummonErrorFlatMap;
exports.delay = delay;
exports.delayWithVoid = delayWithVoid;
exports.withDelayAfter = withDelayAfter;
exports.withDelay = withDelay;
exports.withDelayBefore = withDelayBefore;
exports.debounce = debounce;
exports.throttle = throttle;
exports.Bifunctor = Bifunctor;
exports.bimap = bimap;
exports.mapLeft = mapLeft;
exports.mapRight = mapRight;
exports.mapError = mapError$1;
exports.WithError = WithError;
/* include Not a pure module */
