// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Ord = require("../Relude_Ord.js");
var Relude__Relude_Extensions_Eq = require("./Relude_Extensions_Eq.js");

function OrdExtensions(O) {
  var compareWithConversion = function (bToA) {
    return function (param, param$1) {
      return Relude__Relude_Ord.by(bToA, O.compare, param, param$1);
    };
  };
  var compareReversed = function (param, param$1) {
    return Relude__Relude_Ord.reverse(O.compare, param, param$1);
  };
  var OrdReversed_eq = O.eq;
  var OrdReversed = {
    eq: OrdReversed_eq,
    compare: compareReversed
  };
  var compareAsInt = function (a, b) {
    return Relude__Relude_Ord.compareAsIntBy(O.compare, a, b);
  };
  var min = function (a, b) {
    return Relude__Relude_Ord.minBy(O.compare, a, b);
  };
  var max = function (a, b) {
    return Relude__Relude_Ord.maxBy(O.compare, a, b);
  };
  var lessThan = function (a, b) {
    return Relude__Relude_Ord.lessThanBy(O.compare, a, b);
  };
  var lessThanOrEq = function (a, b) {
    return Relude__Relude_Ord.lessThanOrEqBy(O.compare, a, b);
  };
  var greaterThan = function (a, b) {
    return Relude__Relude_Ord.greaterThanBy(O.compare, a, b);
  };
  var greaterThanOrEq = function (a, b) {
    return Relude__Relude_Ord.greaterThanOrEqBy(O.compare, a, b);
  };
  var clamp = function (min, max, v) {
    return Relude__Relude_Ord.clampBy(O.compare, min, max, v);
  };
  var between = function (min, max, v) {
    return Relude__Relude_Ord.betweenBy(O.compare, min, max, v);
  };
  var OrdRingExtensions = function (R) {
    var abs = function (v) {
      return Relude__Relude_Ord.abs(O, R, v);
    };
    var signum = function (v) {
      return Relude__Relude_Ord.signum(O, R, v);
    };
    return {
            abs: abs,
            signum: signum
          };
  };
  var lessThan$1 = function (compareTo, a) {
    return Relude__Relude_Ord.lessThanBy(O.compare, a, compareTo);
  };
  var lessThanOrEq$1 = function (compareTo, a) {
    return Relude__Relude_Ord.lessThanOrEqBy(O.compare, a, compareTo);
  };
  var greaterThan$1 = function (compareTo, a) {
    return Relude__Relude_Ord.greaterThanBy(O.compare, a, compareTo);
  };
  var greaterThanOrEq$1 = function (compareTo, a) {
    return Relude__Relude_Ord.greaterThanOrEqBy(O.compare, a, compareTo);
  };
  var OrdNamed = {
    lessThan: lessThan$1,
    lessThanOrEq: lessThanOrEq$1,
    greaterThan: greaterThan$1,
    greaterThanOrEq: greaterThanOrEq$1,
    lt: lessThan$1,
    lte: lessThanOrEq$1,
    gt: greaterThan$1,
    gte: greaterThanOrEq$1
  };
  var OrdBy = function (A) {
    var include = Relude__Relude_Extensions_Eq.EqExtensions(O);
    var include$1 = Curry._1(include.EqBy, A);
    var compare = function (b1, b2) {
      return Curry._2(O.compare, Curry._1(A.f, b1), Curry._1(A.f, b2));
    };
    return {
            eq: include$1.eq,
            compare: compare
          };
  };
  return {
          compareWithConversion: compareWithConversion,
          compareReversed: compareReversed,
          OrdReversed: OrdReversed,
          compareAsInt: compareAsInt,
          min: min,
          max: max,
          lessThan: lessThan,
          lt: lessThan,
          lessThanOrEq: lessThanOrEq,
          lte: lessThanOrEq,
          greaterThan: greaterThan,
          gt: greaterThan,
          greaterThanOrEq: greaterThanOrEq,
          gte: greaterThanOrEq,
          clamp: clamp,
          between: between,
          OrdRingExtensions: OrdRingExtensions,
          OrdNamed: OrdNamed,
          OrdBy: OrdBy
        };
}

function OrdInfix(O) {
  var compareWithConversion = function (bToA) {
    return function (param, param$1) {
      return Relude__Relude_Ord.by(bToA, O.compare, param, param$1);
    };
  };
  var compareReversed = function (param, param$1) {
    return Relude__Relude_Ord.reverse(O.compare, param, param$1);
  };
  var OrdReversed_eq = O.eq;
  var OrdReversed = {
    eq: OrdReversed_eq,
    compare: compareReversed
  };
  var compareAsInt = function (a, b) {
    return Relude__Relude_Ord.compareAsIntBy(O.compare, a, b);
  };
  var min = function (a, b) {
    return Relude__Relude_Ord.minBy(O.compare, a, b);
  };
  var max = function (a, b) {
    return Relude__Relude_Ord.maxBy(O.compare, a, b);
  };
  var lessThan = function (a, b) {
    return Relude__Relude_Ord.lessThanBy(O.compare, a, b);
  };
  var lessThanOrEq = function (a, b) {
    return Relude__Relude_Ord.lessThanOrEqBy(O.compare, a, b);
  };
  var greaterThan = function (a, b) {
    return Relude__Relude_Ord.greaterThanBy(O.compare, a, b);
  };
  var greaterThanOrEq = function (a, b) {
    return Relude__Relude_Ord.greaterThanOrEqBy(O.compare, a, b);
  };
  var clamp = function (min, max, v) {
    return Relude__Relude_Ord.clampBy(O.compare, min, max, v);
  };
  var between = function (min, max, v) {
    return Relude__Relude_Ord.betweenBy(O.compare, min, max, v);
  };
  var OrdRingExtensions = function (R) {
    var abs = function (v) {
      return Relude__Relude_Ord.abs(O, R, v);
    };
    var signum = function (v) {
      return Relude__Relude_Ord.signum(O, R, v);
    };
    return {
            abs: abs,
            signum: signum
          };
  };
  var lessThan$1 = function (compareTo, a) {
    return Relude__Relude_Ord.lessThanBy(O.compare, a, compareTo);
  };
  var lessThanOrEq$1 = function (compareTo, a) {
    return Relude__Relude_Ord.lessThanOrEqBy(O.compare, a, compareTo);
  };
  var greaterThan$1 = function (compareTo, a) {
    return Relude__Relude_Ord.greaterThanBy(O.compare, a, compareTo);
  };
  var greaterThanOrEq$1 = function (compareTo, a) {
    return Relude__Relude_Ord.greaterThanOrEqBy(O.compare, a, compareTo);
  };
  var OrdNamed = {
    lessThan: lessThan$1,
    lessThanOrEq: lessThanOrEq$1,
    greaterThan: greaterThan$1,
    greaterThanOrEq: greaterThanOrEq$1,
    lt: lessThan$1,
    lte: lessThanOrEq$1,
    gt: greaterThan$1,
    gte: greaterThanOrEq$1
  };
  var OrdBy = function (A) {
    var include = Relude__Relude_Extensions_Eq.EqExtensions(O);
    var include$1 = Curry._1(include.EqBy, A);
    var compare = function (b1, b2) {
      return Curry._2(O.compare, Curry._1(A.f, b1), Curry._1(A.f, b2));
    };
    return {
            eq: include$1.eq,
            compare: compare
          };
  };
  var OrdExtensions = {
    compareWithConversion: compareWithConversion,
    compareReversed: compareReversed,
    OrdReversed: OrdReversed,
    compareAsInt: compareAsInt,
    min: min,
    max: max,
    lessThan: lessThan,
    lt: lessThan,
    lessThanOrEq: lessThanOrEq,
    lte: lessThanOrEq,
    greaterThan: greaterThan,
    gt: greaterThan,
    greaterThanOrEq: greaterThanOrEq,
    gte: greaterThanOrEq,
    clamp: clamp,
    between: between,
    OrdRingExtensions: OrdRingExtensions,
    OrdNamed: OrdNamed,
    OrdBy: OrdBy
  };
  return {
          OrdExtensions: OrdExtensions,
          $pipe$less$pipe: lessThan,
          $pipe$less$eq$pipe: lessThanOrEq,
          $pipe$great$pipe: greaterThan,
          $pipe$great$eq$pipe: greaterThanOrEq
        };
}

exports.OrdExtensions = OrdExtensions;
exports.OrdInfix = OrdInfix;
/* Relude__Relude_Ord Not a pure module */
