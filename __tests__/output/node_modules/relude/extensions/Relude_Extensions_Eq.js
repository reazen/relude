// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Eq = require("../Relude_Eq.js");

function EqExtensions(Eq) {
  var eqWithConversion = function (bToA) {
    return function (param, param$1) {
      return Relude__Relude_Eq.by(bToA, Eq.eq, param, param$1);
    };
  };
  var notEq = function (param, param$1) {
    return Relude__Relude_Eq.invert(Eq.eq, param, param$1);
  };
  var EqInverted = {
    eq: notEq
  };
  var EqBy = function (A) {
    var eq = function (b1, b2) {
      return Curry._2(Eq.eq, Curry._1(A.f, b1), Curry._1(A.f, b2));
    };
    return {
            eq: eq
          };
  };
  return {
          eqWithConversion: eqWithConversion,
          notEq: notEq,
          eqInverted: notEq,
          EqInverted: EqInverted,
          EqBy: EqBy
        };
}

function EqInfix(Eq) {
  var eqWithConversion = function (bToA) {
    return function (param, param$1) {
      return Relude__Relude_Eq.by(bToA, Eq.eq, param, param$1);
    };
  };
  var notEq = function (param, param$1) {
    return Relude__Relude_Eq.invert(Eq.eq, param, param$1);
  };
  var EqInverted = {
    eq: notEq
  };
  var EqBy = function (A) {
    var eq = function (b1, b2) {
      return Curry._2(Eq.eq, Curry._1(A.f, b1), Curry._1(A.f, b2));
    };
    return {
            eq: eq
          };
  };
  var EqExtensions = {
    eqWithConversion: eqWithConversion,
    notEq: notEq,
    eqInverted: notEq,
    EqInverted: EqInverted,
    EqBy: EqBy
  };
  return {
          EqExtensions: EqExtensions,
          $pipe$eq$pipe: Eq.eq,
          $pipe$bang$eq$pipe: notEq
        };
}

exports.EqExtensions = EqExtensions;
exports.EqInfix = EqInfix;
/* No side effect */
