// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Bastet__Functions = require("bastet/./Functions.js");

function ApplyExtensions(A) {
  var BsApplyExtensions = Bastet__Functions.Apply(A);
  var map2 = BsApplyExtensions.lift2;
  var map3 = BsApplyExtensions.lift3;
  var map4 = BsApplyExtensions.lift4;
  var map5 = BsApplyExtensions.lift5;
  var tuple3 = function (fa, fb, fc) {
    return Curry._4(map3, (function (a, b, c) {
                  return [
                          a,
                          b,
                          c
                        ];
                }), fa, fb, fc);
  };
  var tuple4 = function (fa, fb, fc, fd) {
    return Curry._5(map4, (function (a, b, c, d) {
                  return [
                          a,
                          b,
                          c,
                          d
                        ];
                }), fa, fb, fc, fd);
  };
  var tuple5 = function (fa, fb, fc, fd, fe) {
    return Curry._6(map5, (function (a, b, c, d, e) {
                  return [
                          a,
                          b,
                          c,
                          d,
                          e
                        ];
                }), fa, fb, fc, fd, fe);
  };
  var mapTuple2 = function (f, param) {
    return Curry._3(map2, f, param[0], param[1]);
  };
  var mapTuple3 = function (f, param) {
    return Curry._4(map3, f, param[0], param[1], param[2]);
  };
  var mapTuple4 = function (f, param) {
    return Curry._5(map4, f, param[0], param[1], param[2], param[3]);
  };
  var mapTuple5 = function (f, param) {
    return Curry._6(map5, f, param[0], param[1], param[2], param[3], param[4]);
  };
  return {
          BsApplyExtensions: BsApplyExtensions,
          applyFirst: BsApplyExtensions.apply_first,
          applySecond: BsApplyExtensions.apply_second,
          map2: map2,
          map3: map3,
          map4: map4,
          map5: map5,
          tuple2: BsApplyExtensions.apply_both,
          tuple3: tuple3,
          tuple4: tuple4,
          tuple5: tuple5,
          mapTuple2: mapTuple2,
          mapTuple3: mapTuple3,
          mapTuple4: mapTuple4,
          mapTuple5: mapTuple5
        };
}

function ApplyInfix(A) {
  var BsApplyExtensions = Bastet__Functions.Apply(A);
  var applyFirst = BsApplyExtensions.apply_first;
  var applySecond = BsApplyExtensions.apply_second;
  var map2 = BsApplyExtensions.lift2;
  var map3 = BsApplyExtensions.lift3;
  var map4 = BsApplyExtensions.lift4;
  var map5 = BsApplyExtensions.lift5;
  var tuple3 = function (fa, fb, fc) {
    return Curry._4(map3, (function (a, b, c) {
                  return [
                          a,
                          b,
                          c
                        ];
                }), fa, fb, fc);
  };
  var tuple4 = function (fa, fb, fc, fd) {
    return Curry._5(map4, (function (a, b, c, d) {
                  return [
                          a,
                          b,
                          c,
                          d
                        ];
                }), fa, fb, fc, fd);
  };
  var tuple5 = function (fa, fb, fc, fd, fe) {
    return Curry._6(map5, (function (a, b, c, d, e) {
                  return [
                          a,
                          b,
                          c,
                          d,
                          e
                        ];
                }), fa, fb, fc, fd, fe);
  };
  var mapTuple2 = function (f, param) {
    return Curry._3(map2, f, param[0], param[1]);
  };
  var mapTuple3 = function (f, param) {
    return Curry._4(map3, f, param[0], param[1], param[2]);
  };
  var mapTuple4 = function (f, param) {
    return Curry._5(map4, f, param[0], param[1], param[2], param[3]);
  };
  var mapTuple5 = function (f, param) {
    return Curry._6(map5, f, param[0], param[1], param[2], param[3], param[4]);
  };
  var ApplyExtensions_tuple2 = BsApplyExtensions.apply_both;
  var ApplyExtensions = {
    BsApplyExtensions: BsApplyExtensions,
    applyFirst: applyFirst,
    applySecond: applySecond,
    map2: map2,
    map3: map3,
    map4: map4,
    map5: map5,
    tuple2: ApplyExtensions_tuple2,
    tuple3: tuple3,
    tuple4: tuple4,
    tuple5: tuple5,
    mapTuple2: mapTuple2,
    mapTuple3: mapTuple3,
    mapTuple4: mapTuple4,
    mapTuple5: mapTuple5
  };
  return {
          ApplyExtensions: ApplyExtensions,
          $less$star$great: A.apply,
          $less$star: applyFirst,
          $star$great: applySecond
        };
}

exports.ApplyExtensions = ApplyExtensions;
exports.ApplyInfix = ApplyInfix;
/* Bastet__Functions Not a pure module */
