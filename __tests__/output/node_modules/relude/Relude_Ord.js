// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Extensions_Contravariant = require("./extensions/Relude_Extensions_Contravariant.js");

function by(bToA, compareA, b1, b2) {
  return Curry._2(compareA, Curry._1(bToA, b1), Curry._1(bToA, b2));
}

var Contravariant = {
  cmap: by
};

Relude__Relude_Extensions_Contravariant.ContravariantExtensions(Contravariant);

function reverse(compare, a1, a2) {
  var match = Curry._2(compare, a1, a2);
  if (match === "greater_than") {
    return "less_than";
  } else if (match === "less_than") {
    return "greater_than";
  } else {
    return "equal_to";
  }
}

function compareAsIntBy(compare, a, b) {
  var match = Curry._2(compare, a, b);
  if (match === "greater_than") {
    return 1;
  } else if (match === "less_than") {
    return -1;
  } else {
    return 0;
  }
}

function compareAsInt(ord, a, b) {
  return compareAsIntBy(ord.compare, a, b);
}

function minBy(compare, a, b) {
  var match = Curry._2(compare, a, b);
  if (match === "greater_than") {
    return b;
  } else {
    return a;
  }
}

function min(ord, a, b) {
  return minBy(ord.compare, a, b);
}

function maxBy(compare, a, b) {
  var match = Curry._2(compare, a, b);
  if (match === "less_than") {
    return b;
  } else {
    return a;
  }
}

function max(ord, a, b) {
  return maxBy(ord.compare, a, b);
}

function lessThanBy(compare, a, b) {
  return Curry._2(compare, a, b) === "less_than";
}

function lessThan(ord, a, b) {
  return lessThanBy(ord.compare, a, b);
}

function lessThanOrEqBy(compare, a, b) {
  return Curry._2(compare, a, b) !== "greater_than";
}

function lessThanOrEq(ord, a, b) {
  return lessThanOrEqBy(ord.compare, a, b);
}

function greaterThanBy(compare, a, b) {
  return Curry._2(compare, a, b) === "greater_than";
}

function greaterThan(ord, a, b) {
  return greaterThanBy(ord.compare, a, b);
}

function greaterThanOrEqBy(compare, a, b) {
  return Curry._2(compare, a, b) !== "less_than";
}

function greaterThanOrEq(ord, a, b) {
  return greaterThanOrEqBy(ord.compare, a, b);
}

function clampBy(compare, min, max, v) {
  return minBy(compare, max, maxBy(compare, min, v));
}

function clamp(ord, min, max, x) {
  return clampBy(ord.compare, min, max, x);
}

function betweenBy(compare, min, max, v) {
  if (greaterThanOrEqBy(compare, v, min)) {
    return lessThanOrEqBy(compare, v, max);
  } else {
    return false;
  }
}

function between(ord, min, max, x) {
  return betweenBy(ord.compare, min, max, x);
}

function abs(ord, ring, x) {
  if (greaterThanOrEq(ord, x, ring.zero)) {
    return x;
  } else {
    return Curry._2(ring.subtract, ring.zero, x);
  }
}

function signum(ord, ring, x) {
  if (greaterThanOrEq(ord, x, ring.zero)) {
    return ring.one;
  } else {
    return Curry._2(ring.subtract, ring.zero, ring.one);
  }
}

var cmap = by;

var ltBy = lessThanBy;

var lt = lessThan;

var lteBy = lessThanOrEqBy;

var lte = lessThanOrEq;

var gtBy = greaterThanBy;

var gt = greaterThan;

var gteBy = greaterThanOrEqBy;

var gte = greaterThanOrEq;

exports.by = by;
exports.cmap = cmap;
exports.Contravariant = Contravariant;
exports.reverse = reverse;
exports.compareAsIntBy = compareAsIntBy;
exports.compareAsInt = compareAsInt;
exports.minBy = minBy;
exports.min = min;
exports.maxBy = maxBy;
exports.max = max;
exports.lessThanBy = lessThanBy;
exports.ltBy = ltBy;
exports.lessThan = lessThan;
exports.lt = lt;
exports.lessThanOrEqBy = lessThanOrEqBy;
exports.lteBy = lteBy;
exports.lessThanOrEq = lessThanOrEq;
exports.lte = lte;
exports.greaterThanBy = greaterThanBy;
exports.gtBy = gtBy;
exports.greaterThan = greaterThan;
exports.gt = gt;
exports.greaterThanOrEqBy = greaterThanOrEqBy;
exports.gteBy = gteBy;
exports.greaterThanOrEq = greaterThanOrEq;
exports.gte = gte;
exports.clampBy = clampBy;
exports.clamp = clamp;
exports.betweenBy = betweenBy;
exports.between = between;
exports.abs = abs;
exports.signum = signum;
/*  Not a pure module */
