// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_List = require("./Relude_List.js");
var Relude__Relude_Tree = require("./Relude_Tree.js");
var Relude__Relude_Tuple = require("./Relude_Tuple.js");
var Relude__Relude_Option = require("./Relude_Option.js");
var Relude__Relude_Extensions_Functor = require("./extensions/Relude_Extensions_Functor.js");

function pure(a) {
  return {
          ancestors: /* [] */0,
          leftSiblings: /* [] */0,
          focus: a,
          rightSiblings: /* [] */0,
          children: /* [] */0
        };
}

function make(ancestors, leftSiblings, focus, rightSiblings, children) {
  return {
          ancestors: ancestors,
          leftSiblings: leftSiblings,
          focus: focus,
          rightSiblings: rightSiblings,
          children: children
        };
}

function makeWithLabels(ancestors, leftSiblings, focus, rightSiblings, children) {
  return {
          ancestors: ancestors,
          leftSiblings: leftSiblings,
          focus: focus,
          rightSiblings: rightSiblings,
          children: children
        };
}

function fromTree(param) {
  return makeWithLabels(/* [] */0, /* [] */0, param.value, /* [] */0, param.children);
}

function getAncestors(param) {
  return param.ancestors;
}

function getFocusValue(param) {
  return param.focus;
}

function tapFocusValue(f, zipper) {
  Curry._1(f, getFocusValue(zipper));
  return zipper;
}

function setFocusValue(newFocus, param) {
  return {
          ancestors: param.ancestors,
          leftSiblings: param.leftSiblings,
          focus: newFocus,
          rightSiblings: param.rightSiblings,
          children: param.children
        };
}

function modifyFocusValue(f, param) {
  return {
          ancestors: param.ancestors,
          leftSiblings: param.leftSiblings,
          focus: Curry._1(f, param.focus),
          rightSiblings: param.rightSiblings,
          children: param.children
        };
}

function getFocusTree(param) {
  return {
          value: param.focus,
          children: param.children
        };
}

function getLeftSiblings(param) {
  return param.leftSiblings;
}

function getLeftSiblingsInOrder(tree) {
  return Relude__Relude_List.reverse(getLeftSiblings(tree));
}

function setLeftSiblings(newLeftSiblings, param) {
  var ancestors = param.ancestors;
  if (Relude__Relude_List.isNotEmpty(ancestors)) {
    return {
            ancestors: ancestors,
            leftSiblings: newLeftSiblings,
            focus: param.focus,
            rightSiblings: param.rightSiblings,
            children: param.children
          };
  }
  
}

function setLeftSiblingsFromInOrder(newLeftSiblingsInOrder, param) {
  var ancestors = param.ancestors;
  if (Relude__Relude_List.isNotEmpty(ancestors)) {
    return {
            ancestors: ancestors,
            leftSiblings: Relude__Relude_List.reverse(newLeftSiblingsInOrder),
            focus: param.focus,
            rightSiblings: param.rightSiblings,
            children: param.children
          };
  }
  
}

function getRightSiblings(param) {
  return param.rightSiblings;
}

function setRightSiblings(newRightSiblings, param) {
  var ancestors = param.ancestors;
  if (Relude__Relude_List.isNotEmpty(ancestors)) {
    return {
            ancestors: ancestors,
            leftSiblings: param.leftSiblings,
            focus: param.focus,
            rightSiblings: newRightSiblings,
            children: param.children
          };
  }
  
}

function getChildren(param) {
  return param.children;
}

function setChildren(newChildren, param) {
  return {
          ancestors: param.ancestors,
          leftSiblings: param.leftSiblings,
          focus: param.focus,
          rightSiblings: param.rightSiblings,
          children: newChildren
        };
}

function moveLeft(param) {
  var children = param.children;
  var rightSiblings = param.rightSiblings;
  var focus = param.focus;
  var ancestors = param.ancestors;
  return Relude__Relude_Option.map((function (param) {
                var leftHead = param[0];
                return {
                        ancestors: ancestors,
                        leftSiblings: param[1],
                        focus: Relude__Relude_Tree.getValue(leftHead),
                        rightSiblings: {
                          hd: Relude__Relude_Tree.make(focus, children),
                          tl: rightSiblings
                        },
                        children: Relude__Relude_Tree.getChildren(leftHead)
                      };
              }), Relude__Relude_List.uncons(param.leftSiblings));
}

function moveLeftWithClamp(zipper) {
  return Relude__Relude_Option.getOrElse(zipper, moveLeft(zipper));
}

function moveLeftToStart(zipper) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return zipper;
              }), moveLeftToStart, moveLeft(zipper));
}

function moveLeftTimes(times, zipper) {
  if (times < 0) {
    return ;
  }
  if (times === 0) {
    return zipper;
  }
  var partial_arg = times - 1 | 0;
  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                return moveLeftTimes(partial_arg, param);
              }), moveLeft(zipper));
}

function moveLeftTimesWithClamp(times, zipper) {
  return Relude__Relude_Option.getOrElseLazy((function (param) {
                return moveLeftToStart(zipper);
              }), moveLeftTimes(times, zipper));
}

function moveRight(param) {
  var children = param.children;
  var focus = param.focus;
  var leftSiblings = param.leftSiblings;
  var ancestors = param.ancestors;
  return Relude__Relude_Option.map((function (param) {
                var rightHead = param[0];
                return {
                        ancestors: ancestors,
                        leftSiblings: {
                          hd: Relude__Relude_Tree.make(focus, children),
                          tl: leftSiblings
                        },
                        focus: Relude__Relude_Tree.getValue(rightHead),
                        rightSiblings: param[1],
                        children: Relude__Relude_Tree.getChildren(rightHead)
                      };
              }), Relude__Relude_List.uncons(param.rightSiblings));
}

function moveRightWithClamp(zipper) {
  return Relude__Relude_Option.getOrElse(zipper, moveRight(zipper));
}

function moveRightToEnd(zipper) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return zipper;
              }), moveRightToEnd, moveRight(zipper));
}

function moveRightTimes(times, zipper) {
  if (times < 0) {
    return ;
  }
  if (times === 0) {
    return zipper;
  }
  var partial_arg = times - 1 | 0;
  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                return moveRightTimes(partial_arg, param);
              }), moveRight(zipper));
}

function moveRightTimesWithClamp(times, zipper) {
  return Relude__Relude_Option.getOrElseLazy((function (param) {
                return moveRightToEnd(zipper);
              }), moveRightTimes(times, zipper));
}

function moveUp(param) {
  var children = param.children;
  var rightSiblings = param.rightSiblings;
  var focus = param.focus;
  var leftSiblings = param.leftSiblings;
  return Relude__Relude_Option.map((function (param) {
                var match = param[0];
                return {
                        ancestors: param[1],
                        leftSiblings: match[0],
                        focus: match[1],
                        rightSiblings: match[2],
                        children: Curry._1(Relude__Relude_List.flatten, {
                              hd: Relude__Relude_List.reverse(leftSiblings),
                              tl: {
                                hd: {
                                  hd: Relude__Relude_Tree.make(focus, children),
                                  tl: /* [] */0
                                },
                                tl: {
                                  hd: rightSiblings,
                                  tl: /* [] */0
                                }
                              }
                            })
                      };
              }), Relude__Relude_List.uncons(param.ancestors));
}

function moveUpWithClamp(zipper) {
  return Relude__Relude_Option.getOrElse(zipper, moveUp(zipper));
}

function moveUpToTop(zipper) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return zipper;
              }), moveUpToTop, moveUp(zipper));
}

function moveUpTimes(times, zipper) {
  if (times < 0) {
    return ;
  }
  if (times === 0) {
    return zipper;
  }
  var partial_arg = times - 1 | 0;
  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                return moveUpTimes(partial_arg, param);
              }), moveUp(zipper));
}

function moveUpTimesWithClamp(times, zipper) {
  return Relude__Relude_Option.getOrElseLazy((function (param) {
                return moveUpToTop(zipper);
              }), moveUpTimes(times, zipper));
}

function moveDown(param) {
  var rightSiblings = param.rightSiblings;
  var focus = param.focus;
  var leftSiblings = param.leftSiblings;
  var ancestors = param.ancestors;
  return Relude__Relude_Option.map((function (param) {
                var childrenHead = param[0];
                return {
                        ancestors: {
                          hd: [
                            leftSiblings,
                            focus,
                            rightSiblings
                          ],
                          tl: ancestors
                        },
                        leftSiblings: /* [] */0,
                        focus: Relude__Relude_Tree.getValue(childrenHead),
                        rightSiblings: param[1],
                        children: Relude__Relude_Tree.getChildren(childrenHead)
                      };
              }), Relude__Relude_List.uncons(param.children));
}

function moveDownWithClamp(zipper) {
  return Relude__Relude_Option.getOrElse(zipper, moveDown(zipper));
}

function moveDownToBottom(zipper) {
  return Relude__Relude_Option.foldLazy((function (param) {
                return zipper;
              }), moveDownToBottom, moveDown(zipper));
}

function moveDownTimes(times, zipper) {
  if (times < 0) {
    return ;
  }
  if (times === 0) {
    return zipper;
  }
  var partial_arg = times - 1 | 0;
  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                return moveDownTimes(partial_arg, param);
              }), moveDown(zipper));
}

function moveDownTimesWithClamp(times, zipper) {
  return Relude__Relude_Option.getOrElseLazy((function (param) {
                return moveDownToBottom(zipper);
              }), moveDownTimes(times, zipper));
}

function moveOnceBy(move, zipper) {
  if (typeof move === "string") {
    if (move === "RightToEnd") {
      return moveRightToEnd(zipper);
    } else if (move === "LeftToStart") {
      return moveLeftToStart(zipper);
    } else if (move === "UpToTop") {
      return moveUpToTop(zipper);
    } else {
      return moveDownToBottom(zipper);
    }
  }
  var variant = move.NAME;
  if (variant === "UpWithClamp") {
    return moveUpTimesWithClamp(move.VAL, zipper);
  } else if (variant === "Right") {
    return moveRightTimes(move.VAL, zipper);
  } else if (variant === "DownWithClamp") {
    return moveDownTimesWithClamp(move.VAL, zipper);
  } else if (variant === "Up") {
    return moveUpTimes(move.VAL, zipper);
  } else if (variant === "LeftWithClamp") {
    return moveLeftTimesWithClamp(move.VAL, zipper);
  } else if (variant === "Down") {
    return moveDownTimes(move.VAL, zipper);
  } else if (variant === "Left") {
    return moveLeftTimes(move.VAL, zipper);
  } else {
    return moveRightTimesWithClamp(move.VAL, zipper);
  }
}

function moveBy(moves, zipper) {
  return Relude__Relude_List.foldLeft((function (zipperOpt, move) {
                  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                return moveOnceBy(move, param);
                              }), zipperOpt);
                }), zipper)(moves);
}

function foldBy(moves, f, init, zipper) {
  return Relude__Relude_List.foldLeft((function (zipperAccOpt, move) {
                  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                var acc = param[1];
                                return Relude__Relude_Option.map((function (nextZipper) {
                                              return [
                                                      nextZipper,
                                                      Curry._2(f, acc, getFocusValue(nextZipper))
                                                    ];
                                            }), moveOnceBy(move, param[0]));
                              }), zipperAccOpt);
                }), [
                zipper,
                init
              ])(moves);
}

function map(aToB, param) {
  return {
          ancestors: Relude__Relude_List.map(function (param) {
                  return [
                          Relude__Relude_List.map(function (param) {
                                  return Relude__Relude_Tree.map(aToB, param);
                                })(param[0]),
                          Curry._1(aToB, param[1]),
                          Relude__Relude_List.map(function (param) {
                                  return Relude__Relude_Tree.map(aToB, param);
                                })(param[2])
                        ];
                })(param.ancestors),
          leftSiblings: Relude__Relude_List.map(function (param) {
                  return Relude__Relude_Tree.map(aToB, param);
                })(param.leftSiblings),
          focus: Curry._1(aToB, param.focus),
          rightSiblings: Relude__Relude_List.map(function (param) {
                  return Relude__Relude_Tree.map(aToB, param);
                })(param.rightSiblings),
          children: Relude__Relude_List.map(function (param) {
                  return Relude__Relude_Tree.map(aToB, param);
                })(param.children)
        };
}

var Functor = {
  map: map
};

var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);

function findInFocus(pred, zipper) {
  if (Curry._1(pred, getFocusValue(zipper))) {
    return zipper;
  }
  
}

function findInFocusAndChildren(pred, zipper) {
  var dfs = function (zipper) {
    return Relude__Relude_Option.orElseLazy((function (param) {
                  return Curry._2(Relude__Relude_Option.flatMap, dfs, moveRight(zipper));
                }), Relude__Relude_Option.orElseLazy((function (param) {
                      return Curry._2(Relude__Relude_Option.flatMap, dfs, moveDown(zipper));
                    }), findInFocus(pred, zipper)));
  };
  return Relude__Relude_Option.orElseLazy((function (param) {
                return Curry._2(Relude__Relude_Option.flatMap, dfs, moveDown(zipper));
              }), findInFocus(pred, zipper));
}

function findLeft(checkFocusOpt, pred, zipper) {
  var checkFocus = checkFocusOpt !== undefined ? checkFocusOpt : true;
  if (checkFocus) {
    return Relude__Relude_Option.orElseLazy((function (param) {
                  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                return findLeft(undefined, pred, param);
                              }), moveLeft(zipper));
                }), findInFocusAndChildren(pred, zipper));
  } else {
    return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                  return findLeft(undefined, pred, param);
                }), moveLeft(zipper));
  }
}

function findRight(checkFocusOpt, pred, zipper) {
  var checkFocus = checkFocusOpt !== undefined ? checkFocusOpt : true;
  if (checkFocus) {
    return Relude__Relude_Option.orElseLazy((function (param) {
                  return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                return findRight(undefined, pred, param);
                              }), moveRight(zipper));
                }), findInFocusAndChildren(pred, zipper));
  } else {
    return Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                  return findRight(undefined, pred, param);
                }), moveRight(zipper));
  }
}

function findLeftOrRight(checkFocusOpt, pred, zipper) {
  var checkFocus = checkFocusOpt !== undefined ? checkFocusOpt : true;
  return Relude__Relude_Option.orElseLazy((function (param) {
                return findRight(false, pred, zipper);
              }), findLeft(checkFocus, pred, zipper));
}

function findUp(pred, zipper) {
  return Curry._2(Relude__Relude_Option.flatMap, (function (parentZipper) {
                return Relude__Relude_Option.orElseLazy((function (param) {
                              return findUp(pred, parentZipper);
                            }), findLeftOrRight(undefined, pred, parentZipper));
              }), moveUp(zipper));
}

function findDown(pred, zipper) {
  return Curry._2(Relude__Relude_Option.flatMap, (function (childZipper) {
                return Relude__Relude_Option.orElseLazy((function (param) {
                              return findDown(pred, childZipper);
                            }), findRight(undefined, pred, childZipper));
              }), moveDown(zipper));
}

function find(pred, zipper) {
  return Relude__Relude_Option.orElseLazy((function (param) {
                return findDown(pred, zipper);
              }), Relude__Relude_Option.orElseLazy((function (param) {
                    return findUp(pred, zipper);
                  }), findLeftOrRight(undefined, pred, zipper)));
}

function insertTreeWithPushLeft(newTree, param) {
  var ancestors = param.ancestors;
  if (Relude__Relude_List.isNotEmpty(ancestors)) {
    return {
            ancestors: ancestors,
            leftSiblings: {
              hd: {
                value: param.focus,
                children: param.children
              },
              tl: param.leftSiblings
            },
            focus: Relude__Relude_Tree.getValue(newTree),
            rightSiblings: param.rightSiblings,
            children: Relude__Relude_Tree.getChildren(newTree)
          };
  }
  
}

function insertWithPushLeft(newFocus, tree) {
  return insertTreeWithPushLeft(Relude__Relude_Tree.pure(newFocus), tree);
}

function insertTreeWithPushRight(newTree, param) {
  var ancestors = param.ancestors;
  if (Relude__Relude_List.isNotEmpty(ancestors)) {
    return {
            ancestors: ancestors,
            leftSiblings: param.leftSiblings,
            focus: Relude__Relude_Tree.getValue(newTree),
            rightSiblings: {
              hd: {
                value: param.focus,
                children: param.children
              },
              tl: param.rightSiblings
            },
            children: Relude__Relude_Tree.getChildren(newTree)
          };
  }
  
}

function insertWithPushRight(newFocus, tree) {
  return insertTreeWithPushRight(Relude__Relude_Tree.pure(newFocus), tree);
}

function deleteWithPullLeft(param) {
  var rightSiblings = param.rightSiblings;
  var ancestors = param.ancestors;
  if (Relude__Relude_List.isNotEmpty(ancestors)) {
    return Relude__Relude_Option.map((function (param) {
                  var leftHead = param[0];
                  return {
                          ancestors: ancestors,
                          leftSiblings: param[1],
                          focus: Relude__Relude_Tree.getValue(leftHead),
                          rightSiblings: rightSiblings,
                          children: Relude__Relude_Tree.getChildren(leftHead)
                        };
                }), Relude__Relude_List.uncons(param.leftSiblings));
  }
  
}

function deleteWithPullRight(param) {
  var leftSiblings = param.leftSiblings;
  var ancestors = param.ancestors;
  if (Relude__Relude_List.isNotEmpty(ancestors)) {
    return Relude__Relude_Option.map((function (param) {
                  var rightHead = param[0];
                  return {
                          ancestors: ancestors,
                          leftSiblings: leftSiblings,
                          focus: Relude__Relude_Tree.getValue(rightHead),
                          rightSiblings: param[1],
                          children: Relude__Relude_Tree.getChildren(rightHead)
                        };
                }), Relude__Relude_List.uncons(param.rightSiblings));
  }
  
}

function $$delete(zipper) {
  return Relude__Relude_Option.orElseLazy((function (param) {
                return Relude__Relude_Option.map((function (param) {
                              var match = param[0];
                              return {
                                      ancestors: param[1],
                                      leftSiblings: match[0],
                                      focus: match[1],
                                      rightSiblings: match[2],
                                      children: /* [] */0
                                    };
                            }), Relude__Relude_List.uncons(getAncestors(zipper)));
              }), Relude__Relude_Option.orElseLazy((function (param) {
                    return deleteWithPullRight(zipper);
                  }), deleteWithPullLeft(zipper)));
}

function showBy(showA, param) {
  var ancestorsStr = Relude__Relude_List.showBy((function (param) {
          return Relude__Relude_Tuple.showBy3((function (param) {
                        return Relude__Relude_List.showBy((function (param) {
                                      return Relude__Relude_Tree.showBy(showA, param);
                                    }), param);
                      }), showA, (function (param) {
                        return Relude__Relude_List.showBy((function (param) {
                                      return Relude__Relude_Tree.showBy(showA, param);
                                    }), param);
                      }), param);
        }), param.ancestors);
  var leftSiblingsStr = Relude__Relude_List.showBy((function (param) {
          return Relude__Relude_Tree.showBy(showA, param);
        }), param.leftSiblings);
  var focusStr = Curry._1(showA, param.focus);
  var rightSiblingsStr = Relude__Relude_List.showBy((function (param) {
          return Relude__Relude_Tree.showBy(showA, param);
        }), param.rightSiblings);
  var childrenStr = Relude__Relude_List.showBy((function (param) {
          return Relude__Relude_Tree.showBy(showA, param);
        }), param.children);
  return "TreeZipper\nancestors = " + (ancestorsStr + ("\nleftSiblings = " + (leftSiblingsStr + ("\nfocus = " + (focusStr + ("\nrightSiblings = " + (rightSiblingsStr + ("\nchildren = " + childrenStr))))))));
}

var singleton = pure;

var BsFunctorExtensions = include.BsFunctorExtensions;

var flipMap = include.flipMap;

var $$void = include.$$void;

var voidRight = include.voidRight;

var voidLeft = include.voidLeft;

var flap = include.flap;

exports.pure = pure;
exports.singleton = singleton;
exports.make = make;
exports.makeWithLabels = makeWithLabels;
exports.fromTree = fromTree;
exports.getAncestors = getAncestors;
exports.getFocusValue = getFocusValue;
exports.tapFocusValue = tapFocusValue;
exports.setFocusValue = setFocusValue;
exports.modifyFocusValue = modifyFocusValue;
exports.getFocusTree = getFocusTree;
exports.getLeftSiblings = getLeftSiblings;
exports.getLeftSiblingsInOrder = getLeftSiblingsInOrder;
exports.setLeftSiblings = setLeftSiblings;
exports.setLeftSiblingsFromInOrder = setLeftSiblingsFromInOrder;
exports.getRightSiblings = getRightSiblings;
exports.setRightSiblings = setRightSiblings;
exports.getChildren = getChildren;
exports.setChildren = setChildren;
exports.moveLeft = moveLeft;
exports.moveLeftWithClamp = moveLeftWithClamp;
exports.moveLeftToStart = moveLeftToStart;
exports.moveLeftTimes = moveLeftTimes;
exports.moveLeftTimesWithClamp = moveLeftTimesWithClamp;
exports.moveRight = moveRight;
exports.moveRightWithClamp = moveRightWithClamp;
exports.moveRightToEnd = moveRightToEnd;
exports.moveRightTimes = moveRightTimes;
exports.moveRightTimesWithClamp = moveRightTimesWithClamp;
exports.moveUp = moveUp;
exports.moveUpWithClamp = moveUpWithClamp;
exports.moveUpToTop = moveUpToTop;
exports.moveUpTimes = moveUpTimes;
exports.moveUpTimesWithClamp = moveUpTimesWithClamp;
exports.moveDown = moveDown;
exports.moveDownWithClamp = moveDownWithClamp;
exports.moveDownToBottom = moveDownToBottom;
exports.moveDownTimes = moveDownTimes;
exports.moveDownTimesWithClamp = moveDownTimesWithClamp;
exports.moveOnceBy = moveOnceBy;
exports.moveBy = moveBy;
exports.foldBy = foldBy;
exports.map = map;
exports.Functor = Functor;
exports.BsFunctorExtensions = BsFunctorExtensions;
exports.flipMap = flipMap;
exports.$$void = $$void;
exports.voidRight = voidRight;
exports.voidLeft = voidLeft;
exports.flap = flap;
exports.findInFocus = findInFocus;
exports.findInFocusAndChildren = findInFocusAndChildren;
exports.findLeft = findLeft;
exports.findRight = findRight;
exports.findLeftOrRight = findLeftOrRight;
exports.findUp = findUp;
exports.findDown = findDown;
exports.find = find;
exports.insertTreeWithPushLeft = insertTreeWithPushLeft;
exports.insertWithPushLeft = insertWithPushLeft;
exports.insertTreeWithPushRight = insertTreeWithPushRight;
exports.insertWithPushRight = insertWithPushRight;
exports.deleteWithPullLeft = deleteWithPullLeft;
exports.deleteWithPullRight = deleteWithPullRight;
exports.$$delete = $$delete;
exports.showBy = showBy;
/* include Not a pure module */
