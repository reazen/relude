// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Stdlib = require("melange/./stdlib.js");
var Caml_format = require("melange.runtime/caml_format.js");
var Bastet__Float = require("bastet/./Float.js");
var Relude__Relude_Extensions_Ord = require("./extensions/Relude_Extensions_Ord.js");
var Relude__Relude_Extensions_Ring = require("./extensions/Relude_Extensions_Ring.js");
var Relude__Relude_Extensions_Semiring = require("./extensions/Relude_Extensions_Semiring.js");

function eq(a, b) {
  return a === b;
}

var Eq = {
  eq: eq
};

var nan = Number.NaN;

function add(prim0, prim1) {
  return prim0 + prim1;
}

function subtract(prim0, prim1) {
  return prim0 - prim1;
}

function multiply(prim0, prim1) {
  return prim0 * prim1;
}

function divide(prim0, prim1) {
  return prim0 / prim1;
}

function pow(a, b) {
  return Math.pow(a, b);
}

function sqrt(prim) {
  return Math.sqrt(prim);
}

function $$isNaN(x) {
  return x !== x;
}

var compare = Bastet__Float.Ord.compare;

var Ord = {
  eq: eq,
  compare: compare
};

var include = Relude__Relude_Extensions_Ord.OrdExtensions(Ord);

var OrdRingExtensions = include.OrdRingExtensions;

var Semiring = {
  add: add,
  zero: 0.0,
  multiply: multiply,
  one: 1.0
};

Relude__Relude_Extensions_Semiring.SemiringExtensions(Semiring);

function subtract$1(a, b) {
  return a - b;
}

var Ring = {
  add: add,
  zero: 0.0,
  multiply: multiply,
  one: 1.0,
  subtract: subtract$1
};

var include$1 = Relude__Relude_Extensions_Ring.RingExtensions(Ring);

var include$2 = Curry._1(OrdRingExtensions, Ring);

var abs = include$2.abs;

function modulo(param, param$1) {
  return 0.0;
}

function degree(param) {
  return 1;
}

var EuclideanRing = {
  add: add,
  zero: 0.0,
  multiply: multiply,
  one: 1.0,
  subtract: subtract$1,
  degree: degree,
  divide: divide,
  modulo: modulo
};

function approximatelyEqual(tolerance, x, y) {
  return Math.abs(x - y) <= tolerance;
}

function toInt(prim) {
  return prim | 0;
}

function fromInt(prim) {
  return prim;
}

function fractionalPart(v) {
  var whole = v | 0;
  return Curry._1(abs, v >= 0.0 ? v - whole : v + Curry._1(abs, whole));
}

function floor(prim) {
  return Math.floor(prim);
}

function floorAsInt(v) {
  return Math.floor(v) | 0;
}

function ceil(prim) {
  return Math.ceil(prim);
}

function ceilAsInt(v) {
  return Math.ceil(v) | 0;
}

function round(v) {
  if (fractionalPart(v) >= 0.5) {
    return Math.ceil(v);
  } else {
    return Math.floor(v);
  }
}

function roundAsInt(v) {
  return round(v) | 0;
}

function toPrecision(decimals, num) {
  var pow = Math.pow(10.0, decimals);
  var multiplied = num >= 0.0 ? Math.floor(pow * num) : Math.ceil(pow * num);
  return multiplied / pow;
}

function show(prim) {
  return prim.toString();
}

var Show = {
  show: show
};

function fromString(v) {
  try {
    return Caml_format.caml_float_of_string(v);
  }
  catch (exn){
    return ;
  }
}

var Additive_Magma = Bastet__Float.Additive.Magma;

var Additive_Medial_Magma = Bastet__Float.Additive.Medial_Magma;

var Additive_Semigroup = Bastet__Float.Additive.Semigroup;

var Additive_Monoid = Bastet__Float.Additive.Monoid;

var Additive_Quasigroup = Bastet__Float.Additive.Quasigroup;

var Additive_Medial_Quasigroup = Bastet__Float.Additive.Medial_Quasigroup;

var Additive_Loop = Bastet__Float.Additive.Loop;

var Additive_Group = Bastet__Float.Additive.Group;

var Additive_Abelian_Group = Bastet__Float.Additive.Abelian_Group;

var Additive = {
  Magma: Additive_Magma,
  Medial_Magma: Additive_Medial_Magma,
  Semigroup: Additive_Semigroup,
  Monoid: Additive_Monoid,
  Quasigroup: Additive_Quasigroup,
  Medial_Quasigroup: Additive_Medial_Quasigroup,
  Loop: Additive_Loop,
  Group: Additive_Group,
  Abelian_Group: Additive_Abelian_Group
};

var Multiplicative_Magma = Bastet__Float.Multiplicative.Magma;

var Multiplicative_Medial_Magma = Bastet__Float.Multiplicative.Medial_Magma;

var Multiplicative_Semigroup = Bastet__Float.Multiplicative.Semigroup;

var Multiplicative_Monoid = Bastet__Float.Multiplicative.Monoid;

var Multiplicative_Quasigroup = Bastet__Float.Multiplicative.Quasigroup;

var Multiplicative_Medial_Quasigroup = Bastet__Float.Multiplicative.Medial_Quasigroup;

var Multiplicative_Loop = Bastet__Float.Multiplicative.Loop;

var Multiplicative = {
  Magma: Multiplicative_Magma,
  Medial_Magma: Multiplicative_Medial_Magma,
  Semigroup: Multiplicative_Semigroup,
  Monoid: Multiplicative_Monoid,
  Quasigroup: Multiplicative_Quasigroup,
  Medial_Quasigroup: Multiplicative_Medial_Quasigroup,
  Loop: Multiplicative_Loop
};

var Subtractive_Magma = Bastet__Float.Subtractive.Magma;

var Subtractive_Medial_Magma = Bastet__Float.Subtractive.Medial_Magma;

var Subtractive_Quasigroup = Bastet__Float.Subtractive.Quasigroup;

var Subtractive_Medial_Quasigroup = Bastet__Float.Subtractive.Medial_Quasigroup;

var Subtractive = {
  Magma: Subtractive_Magma,
  Medial_Magma: Subtractive_Medial_Magma,
  Quasigroup: Subtractive_Quasigroup,
  Medial_Quasigroup: Subtractive_Medial_Quasigroup
};

var Divisive_Magma = Bastet__Float.Divisive.Magma;

var Divisive_Medial_Magma = Bastet__Float.Divisive.Medial_Magma;

var Divisive_Quasigroup = Bastet__Float.Divisive.Quasigroup;

var Divisive_Medial_Quasigroup = Bastet__Float.Divisive.Medial_Quasigroup;

var Divisive = {
  Magma: Divisive_Magma,
  Medial_Magma: Divisive_Medial_Magma,
  Quasigroup: Divisive_Quasigroup,
  Medial_Quasigroup: Divisive_Medial_Quasigroup
};

var Infix_Additive = Bastet__Float.Infix.Additive;

var Infix_Multiplicative = Bastet__Float.Infix.Multiplicative;

var Infix_$eq$pipe$eq = Bastet__Float.Infix.$eq$pipe$eq;

var Infix_$less$pipe$pipe = Bastet__Float.Infix.$less$pipe$pipe;

var Infix_$pipe$pipe$great = Bastet__Float.Infix.$pipe$pipe$great;

var Infix_$less$pipe$eq = Bastet__Float.Infix.$less$pipe$eq;

var Infix_$great$pipe$eq = Bastet__Float.Infix.$great$pipe$eq;

var Infix_$pipe$plus$pipe = Bastet__Float.Infix.$pipe$plus$pipe;

var Infix_$pipe$star$pipe = Bastet__Float.Infix.$pipe$star$pipe;

var Infix_$pipe$$pipe = Bastet__Float.Infix.$pipe$neg$pipe;

var Infix_$pipe$slash$pipe = Bastet__Float.Infix.$pipe$slash$pipe;

var Infix_$pipe$percent$pipe = Bastet__Float.Infix.$pipe$percent$pipe;

var Infix = {
  Additive: Infix_Additive,
  Multiplicative: Infix_Multiplicative,
  $eq$pipe$eq: Infix_$eq$pipe$eq,
  $less$pipe$pipe: Infix_$less$pipe$pipe,
  $pipe$pipe$great: Infix_$pipe$pipe$great,
  $less$pipe$eq: Infix_$less$pipe$eq,
  $great$pipe$eq: Infix_$great$pipe$eq,
  $pipe$plus$pipe: Infix_$pipe$plus$pipe,
  $pipe$star$pipe: Infix_$pipe$star$pipe,
  $pipe$neg$pipe: Infix_$pipe$$pipe,
  $pipe$slash$pipe: Infix_$pipe$slash$pipe,
  $pipe$percent$pipe: Infix_$pipe$percent$pipe
};

var zero = 0.0;

var one = 1.0;

var infinity = Stdlib.infinity;

var negativeInfinity = Stdlib.neg_infinity;

var top = Stdlib.max_float;

var bottom = Stdlib.min_float;

var compareWithConversion = include.compareWithConversion;

var compareReversed = include.compareReversed;

var OrdReversed = include.OrdReversed;

var compareAsInt = include.compareAsInt;

var min = include.min;

var max = include.max;

var lessThan = include.lessThan;

var lt = include.lt;

var lessThanOrEq = include.lessThanOrEq;

var lte = include.lte;

var greaterThan = include.greaterThan;

var gt = include.gt;

var greaterThanOrEq = include.greaterThanOrEq;

var gte = include.gte;

var clamp = include.clamp;

var between = include.between;

var OrdNamed = include.OrdNamed;

var OrdBy = include.OrdBy;

var $neg = include$1.$neg;

var negate = include$1.negate;

var signum = include$2.signum;

var toString = show;

exports.eq = eq;
exports.Eq = Eq;
exports.zero = zero;
exports.one = one;
exports.nan = nan;
exports.infinity = infinity;
exports.negativeInfinity = negativeInfinity;
exports.add = add;
exports.subtract = subtract;
exports.multiply = multiply;
exports.divide = divide;
exports.pow = pow;
exports.sqrt = sqrt;
exports.top = top;
exports.bottom = bottom;
exports.$$isNaN = $$isNaN;
exports.compare = compare;
exports.Ord = Ord;
exports.compareWithConversion = compareWithConversion;
exports.compareReversed = compareReversed;
exports.OrdReversed = OrdReversed;
exports.compareAsInt = compareAsInt;
exports.min = min;
exports.max = max;
exports.lessThan = lessThan;
exports.lt = lt;
exports.lessThanOrEq = lessThanOrEq;
exports.lte = lte;
exports.greaterThan = greaterThan;
exports.gt = gt;
exports.greaterThanOrEq = greaterThanOrEq;
exports.gte = gte;
exports.clamp = clamp;
exports.between = between;
exports.OrdRingExtensions = OrdRingExtensions;
exports.OrdNamed = OrdNamed;
exports.OrdBy = OrdBy;
exports.Semiring = Semiring;
exports.Ring = Ring;
exports.$neg = $neg;
exports.negate = negate;
exports.abs = abs;
exports.signum = signum;
exports.EuclideanRing = EuclideanRing;
exports.approximatelyEqual = approximatelyEqual;
exports.toInt = toInt;
exports.fromInt = fromInt;
exports.fractionalPart = fractionalPart;
exports.floor = floor;
exports.floorAsInt = floorAsInt;
exports.ceil = ceil;
exports.ceilAsInt = ceilAsInt;
exports.round = round;
exports.roundAsInt = roundAsInt;
exports.toPrecision = toPrecision;
exports.show = show;
exports.toString = toString;
exports.Show = Show;
exports.fromString = fromString;
exports.Additive = Additive;
exports.Multiplicative = Multiplicative;
exports.Subtractive = Subtractive;
exports.Divisive = Divisive;
exports.Infix = Infix;
/* nan Not a pure module */
