// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Identity = require("./Relude_Identity.js");
var Relude__Relude_Extensions_Apply = require("./extensions/Relude_Extensions_Apply.js");
var Relude__Relude_Extensions_Monad = require("./extensions/Relude_Extensions_Monad.js");
var Relude__Relude_Extensions_Functor = require("./extensions/Relude_Extensions_Functor.js");
var Relude__Relude_Extensions_Applicative = require("./extensions/Relude_Extensions_Applicative.js");

function WithMonad(M) {
  var make = function (onDone) {
    return /* ContT */{
            _0: onDone
          };
  };
  var runContT = function (k, f) {
    return Curry._1(f._0, k);
  };
  var mapContT = function (f, m) {
    var m$1 = m._0;
    return /* ContT */{
            _0: (function (k) {
                return Curry._1(f, Curry._1(m$1, k));
              })
          };
  };
  var withContT = function (f, m) {
    var m$1 = m._0;
    return /* ContT */{
            _0: (function (k) {
                return Curry._1(m$1, Curry._1(f, k));
              })
          };
  };
  var map = function (aToB, aToMRToMR) {
    var aToMRToMR$1 = aToMRToMR._0;
    return /* ContT */{
            _0: (function (bToMR) {
                return Curry._1(aToMRToMR$1, (function (a) {
                              return Curry._1(bToMR, Curry._1(aToB, a));
                            }));
              })
          };
  };
  var apply = function (aToBToMRToMR, aToMRToMR) {
    var aToMRToMR$1 = aToMRToMR._0;
    var aToBToMRToMR$1 = aToBToMRToMR._0;
    return /* ContT */{
            _0: (function (bToMR) {
                return Curry._1(aToBToMRToMR$1, (function (aToB) {
                              return Curry._1(aToMRToMR$1, (function (a) {
                                            return Curry._1(bToMR, Curry._1(aToB, a));
                                          }));
                            }));
              })
          };
  };
  var pure = function (a) {
    return /* ContT */{
            _0: (function (aToMR) {
                return Curry._1(aToMR, a);
              })
          };
  };
  var bind = function (aToMRToMR, aToContTB) {
    var aToMRToMR$1 = aToMRToMR._0;
    return /* ContT */{
            _0: (function (bToMR) {
                return Curry._1(aToMRToMR$1, (function (a) {
                              var bToMRToMR = Curry._1(aToContTB, a);
                              return Curry._1(bToMRToMR._0, bToMR);
                            }));
              })
          };
  };
  var WithResult = function (R) {
    var Functor = {
      map: map
    };
    var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);
    var Apply = {
      map: map,
      apply: apply
    };
    var include$1 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);
    var Applicative = {
      map: map,
      apply: apply,
      pure: pure
    };
    var include$2 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);
    var Monad = {
      map: map,
      apply: apply,
      pure: pure,
      flat_map: bind
    };
    var include$3 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);
    var include$4 = Relude__Relude_Extensions_Functor.FunctorInfix(Functor);
    var include$5 = Relude__Relude_Extensions_Apply.ApplyInfix(Apply);
    var include$6 = Relude__Relude_Extensions_Monad.MonadInfix(Monad);
    var Infix_FunctorExtensions = include$4.FunctorExtensions;
    var Infix_$less$$great = include$4.$less$$great;
    var Infix_$less$$$great = include$4.$less$$$great;
    var Infix_$less$ = include$4.$less$;
    var Infix_$$great = include$4.$$great;
    var Infix_$less$at$great = include$4.$less$at$great;
    var Infix_ApplyExtensions = include$5.ApplyExtensions;
    var Infix_$less$star$great = include$5.$less$star$great;
    var Infix_$less$star = include$5.$less$star;
    var Infix_$star$great = include$5.$star$great;
    var Infix_MonadExtensions = include$6.MonadExtensions;
    var Infix_$great$great$eq = include$6.$great$great$eq;
    var Infix_$eq$less$less = include$6.$eq$less$less;
    var Infix_$great$eq$great = include$6.$great$eq$great;
    var Infix_$less$eq$less = include$6.$less$eq$less;
    var Infix = {
      FunctorExtensions: Infix_FunctorExtensions,
      $less$$great: Infix_$less$$great,
      $less$$$great: Infix_$less$$$great,
      $less$: Infix_$less$,
      $$great: Infix_$$great,
      $less$at$great: Infix_$less$at$great,
      ApplyExtensions: Infix_ApplyExtensions,
      $less$star$great: Infix_$less$star$great,
      $less$star: Infix_$less$star,
      $star$great: Infix_$star$great,
      MonadExtensions: Infix_MonadExtensions,
      $great$great$eq: Infix_$great$great$eq,
      $eq$less$less: Infix_$eq$less$less,
      $great$eq$great: Infix_$great$eq$great,
      $less$eq$less: Infix_$less$eq$less
    };
    return {
            make: make,
            runContT: runContT,
            mapContT: mapContT,
            withContT: withContT,
            map: map,
            apply: apply,
            pure: pure,
            bind: bind,
            Functor: Functor,
            BsFunctorExtensions: include.BsFunctorExtensions,
            flipMap: include.flipMap,
            $$void: include.$$void,
            voidRight: include.voidRight,
            voidLeft: include.voidLeft,
            flap: include.flap,
            Apply: Apply,
            BsApplyExtensions: include$1.BsApplyExtensions,
            applyFirst: include$1.applyFirst,
            applySecond: include$1.applySecond,
            map2: include$1.map2,
            map3: include$1.map3,
            map4: include$1.map4,
            map5: include$1.map5,
            tuple2: include$1.tuple2,
            tuple3: include$1.tuple3,
            tuple4: include$1.tuple4,
            tuple5: include$1.tuple5,
            mapTuple2: include$1.mapTuple2,
            mapTuple3: include$1.mapTuple3,
            mapTuple4: include$1.mapTuple4,
            mapTuple5: include$1.mapTuple5,
            Applicative: Applicative,
            BsApplicativeExtensions: include$2.BsApplicativeExtensions,
            liftA1: include$2.liftA1,
            all: include$2.all,
            Monad: Monad,
            BsMonadExtensions: include$3.BsMonadExtensions,
            flatMap: include$3.flatMap,
            flatten: include$3.flatten,
            composeKleisli: include$3.composeKleisli,
            flipComposeKleisli: include$3.flipComposeKleisli,
            liftM1: include$3.liftM1,
            when_: include$3.when_,
            unless: include$3.unless,
            Infix: Infix
          };
  };
  return {
          make: make,
          runContT: runContT,
          mapContT: mapContT,
          withContT: withContT,
          map: map,
          apply: apply,
          pure: pure,
          bind: bind,
          WithResult: WithResult
        };
}

function WithMonadAndResult(M, R) {
  var make = function (onDone) {
    return /* ContT */{
            _0: onDone
          };
  };
  var runContT = function (k, f) {
    return Curry._1(f._0, k);
  };
  var mapContT = function (f, m) {
    var m$1 = m._0;
    return /* ContT */{
            _0: (function (k) {
                return Curry._1(f, Curry._1(m$1, k));
              })
          };
  };
  var withContT = function (f, m) {
    var m$1 = m._0;
    return /* ContT */{
            _0: (function (k) {
                return Curry._1(m$1, Curry._1(f, k));
              })
          };
  };
  var map = function (aToB, aToMRToMR) {
    var aToMRToMR$1 = aToMRToMR._0;
    return /* ContT */{
            _0: (function (bToMR) {
                return Curry._1(aToMRToMR$1, (function (a) {
                              return Curry._1(bToMR, Curry._1(aToB, a));
                            }));
              })
          };
  };
  var apply = function (aToBToMRToMR, aToMRToMR) {
    var aToMRToMR$1 = aToMRToMR._0;
    var aToBToMRToMR$1 = aToBToMRToMR._0;
    return /* ContT */{
            _0: (function (bToMR) {
                return Curry._1(aToBToMRToMR$1, (function (aToB) {
                              return Curry._1(aToMRToMR$1, (function (a) {
                                            return Curry._1(bToMR, Curry._1(aToB, a));
                                          }));
                            }));
              })
          };
  };
  var pure = function (a) {
    return /* ContT */{
            _0: (function (aToMR) {
                return Curry._1(aToMR, a);
              })
          };
  };
  var bind = function (aToMRToMR, aToContTB) {
    var aToMRToMR$1 = aToMRToMR._0;
    return /* ContT */{
            _0: (function (bToMR) {
                return Curry._1(aToMRToMR$1, (function (a) {
                              var bToMRToMR = Curry._1(aToContTB, a);
                              return Curry._1(bToMRToMR._0, bToMR);
                            }));
              })
          };
  };
  var WithResult = function (R) {
    var Functor = {
      map: map
    };
    var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);
    var Apply = {
      map: map,
      apply: apply
    };
    var include$1 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);
    var Applicative = {
      map: map,
      apply: apply,
      pure: pure
    };
    var include$2 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);
    var Monad = {
      map: map,
      apply: apply,
      pure: pure,
      flat_map: bind
    };
    var include$3 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);
    var include$4 = Relude__Relude_Extensions_Functor.FunctorInfix(Functor);
    var include$5 = Relude__Relude_Extensions_Apply.ApplyInfix(Apply);
    var include$6 = Relude__Relude_Extensions_Monad.MonadInfix(Monad);
    var Infix_FunctorExtensions = include$4.FunctorExtensions;
    var Infix_$less$$great = include$4.$less$$great;
    var Infix_$less$$$great = include$4.$less$$$great;
    var Infix_$less$ = include$4.$less$;
    var Infix_$$great = include$4.$$great;
    var Infix_$less$at$great = include$4.$less$at$great;
    var Infix_ApplyExtensions = include$5.ApplyExtensions;
    var Infix_$less$star$great = include$5.$less$star$great;
    var Infix_$less$star = include$5.$less$star;
    var Infix_$star$great = include$5.$star$great;
    var Infix_MonadExtensions = include$6.MonadExtensions;
    var Infix_$great$great$eq = include$6.$great$great$eq;
    var Infix_$eq$less$less = include$6.$eq$less$less;
    var Infix_$great$eq$great = include$6.$great$eq$great;
    var Infix_$less$eq$less = include$6.$less$eq$less;
    var Infix = {
      FunctorExtensions: Infix_FunctorExtensions,
      $less$$great: Infix_$less$$great,
      $less$$$great: Infix_$less$$$great,
      $less$: Infix_$less$,
      $$great: Infix_$$great,
      $less$at$great: Infix_$less$at$great,
      ApplyExtensions: Infix_ApplyExtensions,
      $less$star$great: Infix_$less$star$great,
      $less$star: Infix_$less$star,
      $star$great: Infix_$star$great,
      MonadExtensions: Infix_MonadExtensions,
      $great$great$eq: Infix_$great$great$eq,
      $eq$less$less: Infix_$eq$less$less,
      $great$eq$great: Infix_$great$eq$great,
      $less$eq$less: Infix_$less$eq$less
    };
    return {
            make: make,
            runContT: runContT,
            mapContT: mapContT,
            withContT: withContT,
            map: map,
            apply: apply,
            pure: pure,
            bind: bind,
            Functor: Functor,
            BsFunctorExtensions: include.BsFunctorExtensions,
            flipMap: include.flipMap,
            $$void: include.$$void,
            voidRight: include.voidRight,
            voidLeft: include.voidLeft,
            flap: include.flap,
            Apply: Apply,
            BsApplyExtensions: include$1.BsApplyExtensions,
            applyFirst: include$1.applyFirst,
            applySecond: include$1.applySecond,
            map2: include$1.map2,
            map3: include$1.map3,
            map4: include$1.map4,
            map5: include$1.map5,
            tuple2: include$1.tuple2,
            tuple3: include$1.tuple3,
            tuple4: include$1.tuple4,
            tuple5: include$1.tuple5,
            mapTuple2: include$1.mapTuple2,
            mapTuple3: include$1.mapTuple3,
            mapTuple4: include$1.mapTuple4,
            mapTuple5: include$1.mapTuple5,
            Applicative: Applicative,
            BsApplicativeExtensions: include$2.BsApplicativeExtensions,
            liftA1: include$2.liftA1,
            all: include$2.all,
            Monad: Monad,
            BsMonadExtensions: include$3.BsMonadExtensions,
            flatMap: include$3.flatMap,
            flatten: include$3.flatten,
            composeKleisli: include$3.composeKleisli,
            flipComposeKleisli: include$3.flipComposeKleisli,
            liftM1: include$3.liftM1,
            when_: include$3.when_,
            unless: include$3.unless,
            Infix: Infix
          };
  };
  var WithMonad = {
    make: make,
    runContT: runContT,
    mapContT: mapContT,
    withContT: withContT,
    map: map,
    apply: apply,
    pure: pure,
    bind: bind,
    WithResult: WithResult
  };
  var Functor = {
    map: map
  };
  var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);
  var Apply = {
    map: map,
    apply: apply
  };
  var include$1 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);
  var Applicative = {
    map: map,
    apply: apply,
    pure: pure
  };
  var include$2 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);
  var Monad = {
    map: map,
    apply: apply,
    pure: pure,
    flat_map: bind
  };
  var include$3 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);
  var include$4 = Relude__Relude_Extensions_Functor.FunctorInfix(Functor);
  var include$5 = Relude__Relude_Extensions_Apply.ApplyInfix(Apply);
  var include$6 = Relude__Relude_Extensions_Monad.MonadInfix(Monad);
  var Infix_FunctorExtensions = include$4.FunctorExtensions;
  var Infix_$less$$great = include$4.$less$$great;
  var Infix_$less$$$great = include$4.$less$$$great;
  var Infix_$less$ = include$4.$less$;
  var Infix_$$great = include$4.$$great;
  var Infix_$less$at$great = include$4.$less$at$great;
  var Infix_ApplyExtensions = include$5.ApplyExtensions;
  var Infix_$less$star$great = include$5.$less$star$great;
  var Infix_$less$star = include$5.$less$star;
  var Infix_$star$great = include$5.$star$great;
  var Infix_MonadExtensions = include$6.MonadExtensions;
  var Infix_$great$great$eq = include$6.$great$great$eq;
  var Infix_$eq$less$less = include$6.$eq$less$less;
  var Infix_$great$eq$great = include$6.$great$eq$great;
  var Infix_$less$eq$less = include$6.$less$eq$less;
  var Infix = {
    FunctorExtensions: Infix_FunctorExtensions,
    $less$$great: Infix_$less$$great,
    $less$$$great: Infix_$less$$$great,
    $less$: Infix_$less$,
    $$great: Infix_$$great,
    $less$at$great: Infix_$less$at$great,
    ApplyExtensions: Infix_ApplyExtensions,
    $less$star$great: Infix_$less$star$great,
    $less$star: Infix_$less$star,
    $star$great: Infix_$star$great,
    MonadExtensions: Infix_MonadExtensions,
    $great$great$eq: Infix_$great$great$eq,
    $eq$less$less: Infix_$eq$less$less,
    $great$eq$great: Infix_$great$eq$great,
    $less$eq$less: Infix_$less$eq$less
  };
  var include_BsFunctorExtensions = include.BsFunctorExtensions;
  var include_flipMap = include.flipMap;
  var include_void = include.$$void;
  var include_voidRight = include.voidRight;
  var include_voidLeft = include.voidLeft;
  var include_flap = include.flap;
  var include_BsApplyExtensions = include$1.BsApplyExtensions;
  var include_applyFirst = include$1.applyFirst;
  var include_applySecond = include$1.applySecond;
  var include_map2 = include$1.map2;
  var include_map3 = include$1.map3;
  var include_map4 = include$1.map4;
  var include_map5 = include$1.map5;
  var include_tuple2 = include$1.tuple2;
  var include_tuple3 = include$1.tuple3;
  var include_tuple4 = include$1.tuple4;
  var include_tuple5 = include$1.tuple5;
  var include_mapTuple2 = include$1.mapTuple2;
  var include_mapTuple3 = include$1.mapTuple3;
  var include_mapTuple4 = include$1.mapTuple4;
  var include_mapTuple5 = include$1.mapTuple5;
  var include_BsApplicativeExtensions = include$2.BsApplicativeExtensions;
  var include_liftA1 = include$2.liftA1;
  var include_all = include$2.all;
  var include_BsMonadExtensions = include$3.BsMonadExtensions;
  var include_flatMap = include$3.flatMap;
  var include_flatten = include$3.flatten;
  var include_composeKleisli = include$3.composeKleisli;
  var include_flipComposeKleisli = include$3.flipComposeKleisli;
  var include_liftM1 = include$3.liftM1;
  var include_when_ = include$3.when_;
  var include_unless = include$3.unless;
  return {
          WithMonad: WithMonad,
          make: make,
          runContT: runContT,
          mapContT: mapContT,
          withContT: withContT,
          map: map,
          apply: apply,
          pure: pure,
          bind: bind,
          Functor: Functor,
          BsFunctorExtensions: include_BsFunctorExtensions,
          flipMap: include_flipMap,
          $$void: include_void,
          voidRight: include_voidRight,
          voidLeft: include_voidLeft,
          flap: include_flap,
          Apply: Apply,
          BsApplyExtensions: include_BsApplyExtensions,
          applyFirst: include_applyFirst,
          applySecond: include_applySecond,
          map2: include_map2,
          map3: include_map3,
          map4: include_map4,
          map5: include_map5,
          tuple2: include_tuple2,
          tuple3: include_tuple3,
          tuple4: include_tuple4,
          tuple5: include_tuple5,
          mapTuple2: include_mapTuple2,
          mapTuple3: include_mapTuple3,
          mapTuple4: include_mapTuple4,
          mapTuple5: include_mapTuple5,
          Applicative: Applicative,
          BsApplicativeExtensions: include_BsApplicativeExtensions,
          liftA1: include_liftA1,
          all: include_all,
          Monad: Monad,
          BsMonadExtensions: include_BsMonadExtensions,
          flatMap: include_flatMap,
          flatten: include_flatten,
          composeKleisli: include_composeKleisli,
          flipComposeKleisli: include_flipComposeKleisli,
          liftM1: include_liftM1,
          when_: include_when_,
          unless: include_unless,
          Infix: Infix
        };
}

function make(onDone) {
  return /* ContT */{
          _0: onDone
        };
}

function runContT(k, f) {
  return Curry._1(f._0, k);
}

function mapContT(f, m) {
  var m$1 = m._0;
  return /* ContT */{
          _0: (function (k) {
              return Curry._1(f, Curry._1(m$1, k));
            })
        };
}

function withContT(f, m) {
  var m$1 = m._0;
  return /* ContT */{
          _0: (function (k) {
              return Curry._1(m$1, Curry._1(f, k));
            })
        };
}

function map(aToB, aToMRToMR) {
  var aToMRToMR$1 = aToMRToMR._0;
  return /* ContT */{
          _0: (function (bToMR) {
              return Curry._1(aToMRToMR$1, (function (a) {
                            return Curry._1(bToMR, Curry._1(aToB, a));
                          }));
            })
        };
}

function apply(aToBToMRToMR, aToMRToMR) {
  var aToMRToMR$1 = aToMRToMR._0;
  var aToBToMRToMR$1 = aToBToMRToMR._0;
  return /* ContT */{
          _0: (function (bToMR) {
              return Curry._1(aToBToMRToMR$1, (function (aToB) {
                            return Curry._1(aToMRToMR$1, (function (a) {
                                          return Curry._1(bToMR, Curry._1(aToB, a));
                                        }));
                          }));
            })
        };
}

function pure(a) {
  return /* ContT */{
          _0: (function (aToMR) {
              return Curry._1(aToMR, a);
            })
        };
}

function bind(aToMRToMR, aToContTB) {
  var aToMRToMR$1 = aToMRToMR._0;
  return /* ContT */{
          _0: (function (bToMR) {
              return Curry._1(aToMRToMR$1, (function (a) {
                            var bToMRToMR = Curry._1(aToContTB, a);
                            return Curry._1(bToMRToMR._0, bToMR);
                          }));
            })
        };
}

function WithResult(R) {
  var Functor = {
    map: map
  };
  var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);
  var Apply = {
    map: map,
    apply: apply
  };
  var include$1 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);
  var Applicative = {
    map: map,
    apply: apply,
    pure: pure
  };
  var include$2 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);
  var Monad = {
    map: map,
    apply: apply,
    pure: pure,
    flat_map: bind
  };
  var include$3 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);
  var include$4 = Relude__Relude_Extensions_Functor.FunctorInfix(Functor);
  var include$5 = Relude__Relude_Extensions_Apply.ApplyInfix(Apply);
  var include$6 = Relude__Relude_Extensions_Monad.MonadInfix(Monad);
  var Infix_FunctorExtensions = include$4.FunctorExtensions;
  var Infix_$less$$great = include$4.$less$$great;
  var Infix_$less$$$great = include$4.$less$$$great;
  var Infix_$less$ = include$4.$less$;
  var Infix_$$great = include$4.$$great;
  var Infix_$less$at$great = include$4.$less$at$great;
  var Infix_ApplyExtensions = include$5.ApplyExtensions;
  var Infix_$less$star$great = include$5.$less$star$great;
  var Infix_$less$star = include$5.$less$star;
  var Infix_$star$great = include$5.$star$great;
  var Infix_MonadExtensions = include$6.MonadExtensions;
  var Infix_$great$great$eq = include$6.$great$great$eq;
  var Infix_$eq$less$less = include$6.$eq$less$less;
  var Infix_$great$eq$great = include$6.$great$eq$great;
  var Infix_$less$eq$less = include$6.$less$eq$less;
  var Infix = {
    FunctorExtensions: Infix_FunctorExtensions,
    $less$$great: Infix_$less$$great,
    $less$$$great: Infix_$less$$$great,
    $less$: Infix_$less$,
    $$great: Infix_$$great,
    $less$at$great: Infix_$less$at$great,
    ApplyExtensions: Infix_ApplyExtensions,
    $less$star$great: Infix_$less$star$great,
    $less$star: Infix_$less$star,
    $star$great: Infix_$star$great,
    MonadExtensions: Infix_MonadExtensions,
    $great$great$eq: Infix_$great$great$eq,
    $eq$less$less: Infix_$eq$less$less,
    $great$eq$great: Infix_$great$eq$great,
    $less$eq$less: Infix_$less$eq$less
  };
  return {
          make: make,
          runContT: runContT,
          mapContT: mapContT,
          withContT: withContT,
          map: map,
          apply: apply,
          pure: pure,
          bind: bind,
          Functor: Functor,
          BsFunctorExtensions: include.BsFunctorExtensions,
          flipMap: include.flipMap,
          $$void: include.$$void,
          voidRight: include.voidRight,
          voidLeft: include.voidLeft,
          flap: include.flap,
          Apply: Apply,
          BsApplyExtensions: include$1.BsApplyExtensions,
          applyFirst: include$1.applyFirst,
          applySecond: include$1.applySecond,
          map2: include$1.map2,
          map3: include$1.map3,
          map4: include$1.map4,
          map5: include$1.map5,
          tuple2: include$1.tuple2,
          tuple3: include$1.tuple3,
          tuple4: include$1.tuple4,
          tuple5: include$1.tuple5,
          mapTuple2: include$1.mapTuple2,
          mapTuple3: include$1.mapTuple3,
          mapTuple4: include$1.mapTuple4,
          mapTuple5: include$1.mapTuple5,
          Applicative: Applicative,
          BsApplicativeExtensions: include$2.BsApplicativeExtensions,
          liftA1: include$2.liftA1,
          all: include$2.all,
          Monad: Monad,
          BsMonadExtensions: include$3.BsMonadExtensions,
          flatMap: include$3.flatMap,
          flatten: include$3.flatten,
          composeKleisli: include$3.composeKleisli,
          flipComposeKleisli: include$3.flipComposeKleisli,
          liftM1: include$3.liftM1,
          when_: include$3.when_,
          unless: include$3.unless,
          Infix: Infix
        };
}

var Cont = {
  make: make,
  runContT: runContT,
  mapContT: mapContT,
  withContT: withContT,
  map: map,
  apply: apply,
  pure: pure,
  bind: bind,
  WithResult: WithResult
};

exports.WithMonad = WithMonad;
exports.WithMonadAndResult = WithMonadAndResult;
exports.Cont = Cont;
/* Relude__Relude_Identity Not a pure module */
