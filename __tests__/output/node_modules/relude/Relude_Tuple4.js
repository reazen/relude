// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_List = require("./Relude_List.js");
var Relude__Relude_Array = require("./Relude_Array.js");
var Relude__Relude_Extensions_Eq = require("./extensions/Relude_Extensions_Eq.js");
var Relude__Relude_Extensions_Ord = require("./extensions/Relude_Extensions_Ord.js");

function make(a, b, c, d) {
  return [
          a,
          b,
          c,
          d
        ];
}

function fromArray(param) {
  if (param.length !== 4) {
    return ;
  }
  var a = param[0];
  var b = param[1];
  var c = param[2];
  var d = param[3];
  return [
          a,
          b,
          c,
          d
        ];
}

function fromArrayAtLeast(xs) {
  return fromArray(Relude__Relude_Array.take(4, xs));
}

function fromList(xs) {
  return fromArray(Relude__Relude_List.toArray(Relude__Relude_List.take(5, xs)));
}

function fromListAtLeast(xs) {
  return fromList(Relude__Relude_List.take(4, xs));
}

function first(param) {
  return param[0];
}

function second(param) {
  return param[1];
}

function third(param) {
  return param[2];
}

function fourth(param) {
  return param[3];
}

function showBy(showA, showB, showC, showD, param) {
  return "(" + (Curry._1(showA, param[0]) + (", " + (Curry._1(showB, param[1]) + (", " + (Curry._1(showC, param[2]) + (", " + (Curry._1(showD, param[3]) + ")")))))));
}

function eqBy(eqA, eqB, eqC, eqD, param, param$1) {
  if (Curry._2(eqA, param[0], param$1[0]) && Curry._2(eqB, param[1], param$1[1]) && Curry._2(eqC, param[2], param$1[2])) {
    return Curry._2(eqD, param[3], param$1[3]);
  } else {
    return false;
  }
}

function WithEqs(EqA, EqB, EqC, EqD) {
  var eq = function (param, param$1) {
    return eqBy(EqA.eq, EqB.eq, EqC.eq, EqD.eq, param, param$1);
  };
  var Eq = {
    eq: eq
  };
  var include = Relude__Relude_Extensions_Eq.EqExtensions(Eq);
  return {
          eq: eq,
          Eq: Eq,
          eqWithConversion: include.eqWithConversion,
          notEq: include.notEq,
          eqInverted: include.eqInverted,
          EqInverted: include.EqInverted,
          EqBy: include.EqBy
        };
}

function EqBy(EqA, EqB, EqC, EqD, A) {
  var eq = function (t1, t2) {
    return eqBy(EqA.eq, EqB.eq, EqC.eq, EqD.eq, Curry._1(A.f, t1), Curry._1(A.f, t2));
  };
  return {
          eq: eq
        };
}

function compareBy(compareA, compareB, compareC, compareD, param, param$1) {
  var match = Curry._2(compareA, param[0], param$1[0]);
  if (match === "greater_than") {
    return "greater_than";
  }
  if (match === "less_than") {
    return "less_than";
  }
  var match$1 = Curry._2(compareB, param[1], param$1[1]);
  if (match$1 === "greater_than") {
    return "greater_than";
  }
  if (match$1 === "less_than") {
    return "less_than";
  }
  var match$2 = Curry._2(compareC, param[2], param$1[2]);
  if (match$2 === "greater_than") {
    return "greater_than";
  } else if (match$2 === "less_than") {
    return "less_than";
  } else {
    return Curry._2(compareD, param[3], param$1[3]);
  }
}

function WithOrds(OrdA, OrdB, OrdC, OrdD) {
  var eq = function (param, param$1) {
    return eqBy(OrdA.eq, OrdB.eq, OrdC.eq, OrdD.eq, param, param$1);
  };
  var Eq = {
    eq: eq
  };
  var include = Relude__Relude_Extensions_Eq.EqExtensions(Eq);
  var compare = function (param, param$1) {
    return compareBy(OrdA.compare, OrdB.compare, OrdC.compare, OrdD.compare, param, param$1);
  };
  var Ord = {
    eq: eq,
    compare: compare
  };
  var include$1 = Relude__Relude_Extensions_Ord.OrdExtensions(Ord);
  return {
          eq: eq,
          Eq: Eq,
          eqWithConversion: include.eqWithConversion,
          notEq: include.notEq,
          eqInverted: include.eqInverted,
          EqInverted: include.EqInverted,
          EqBy: include.EqBy,
          compare: compare,
          Ord: Ord,
          compareWithConversion: include$1.compareWithConversion,
          compareReversed: include$1.compareReversed,
          OrdReversed: include$1.OrdReversed,
          compareAsInt: include$1.compareAsInt,
          min: include$1.min,
          max: include$1.max,
          lessThan: include$1.lessThan,
          lt: include$1.lt,
          lessThanOrEq: include$1.lessThanOrEq,
          lte: include$1.lte,
          greaterThan: include$1.greaterThan,
          gt: include$1.gt,
          greaterThanOrEq: include$1.greaterThanOrEq,
          gte: include$1.gte,
          clamp: include$1.clamp,
          between: include$1.between,
          OrdRingExtensions: include$1.OrdRingExtensions,
          OrdNamed: include$1.OrdNamed,
          OrdBy: include$1.OrdBy
        };
}

function OrdBy(OrdA, OrdB, OrdC, OrdD, A) {
  var eq = function (t1, t2) {
    return eqBy(OrdA.eq, OrdB.eq, OrdC.eq, OrdD.eq, Curry._1(A.f, t1), Curry._1(A.f, t2));
  };
  var compare = function (t1, t2) {
    return compareBy(OrdA.compare, OrdB.compare, OrdC.compare, OrdD.compare, Curry._1(A.f, t1), Curry._1(A.f, t2));
  };
  return {
          eq: eq,
          compare: compare
        };
}

exports.make = make;
exports.fromArray = fromArray;
exports.fromArrayAtLeast = fromArrayAtLeast;
exports.fromList = fromList;
exports.fromListAtLeast = fromListAtLeast;
exports.first = first;
exports.second = second;
exports.third = third;
exports.fourth = fourth;
exports.showBy = showBy;
exports.eqBy = eqBy;
exports.WithEqs = WithEqs;
exports.EqBy = EqBy;
exports.compareBy = compareBy;
exports.WithOrds = WithOrds;
exports.OrdBy = OrdBy;
/* Relude__Relude_List Not a pure module */
