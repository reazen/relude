// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Extensions_Apply = require("./extensions/Relude_Extensions_Apply.js");
var Relude__Relude_Extensions_Monad = require("./extensions/Relude_Extensions_Monad.js");
var Relude__Relude_Extensions_Functor = require("./extensions/Relude_Extensions_Functor.js");
var Relude__Relude_Extensions_Applicative = require("./extensions/Relude_Extensions_Applicative.js");

function wrap(a) {
  return a;
}

function unwrap(a) {
  return a;
}

function map(f, fa) {
  return Curry._1(f, fa);
}

var Functor = {
  map: map
};

var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);

function apply(ff, fa) {
  return Curry._1(ff, fa);
}

var Apply = {
  map: map,
  apply: apply
};

var include$1 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);

var Applicative = {
  map: map,
  apply: apply,
  pure: wrap
};

var include$2 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);

function bind(fa, f) {
  return Curry._1(f, fa);
}

var Monad = {
  map: map,
  apply: apply,
  pure: wrap,
  flat_map: bind
};

var include$3 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);

function eq(eq$1, fa, fb) {
  return Curry._2(eq$1.eq, fa, fb);
}

function eqBy(f, fa, fb) {
  return Curry._2(f, fa, fb);
}

function Eq(EQ) {
  var eq = function (fa, fb) {
    return Curry._2(EQ.eq, fa, fb);
  };
  return {
          eq: eq
        };
}

function show(show$1, fa) {
  return Curry._1(show$1.show, fa);
}

function showBy(f, fa) {
  return Curry._1(f, fa);
}

function Show(S) {
  var show = function (fa) {
    return Curry._1(S.show, fa);
  };
  return {
          show: show
        };
}

var BsFunctorExtensions = include.BsFunctorExtensions;

var flipMap = include.flipMap;

var $$void = include.$$void;

var voidRight = include.voidRight;

var voidLeft = include.voidLeft;

var flap = include.flap;

var BsApplyExtensions = include$1.BsApplyExtensions;

var applyFirst = include$1.applyFirst;

var applySecond = include$1.applySecond;

var map2 = include$1.map2;

var map3 = include$1.map3;

var map4 = include$1.map4;

var map5 = include$1.map5;

var tuple2 = include$1.tuple2;

var tuple3 = include$1.tuple3;

var tuple4 = include$1.tuple4;

var tuple5 = include$1.tuple5;

var mapTuple2 = include$1.mapTuple2;

var mapTuple3 = include$1.mapTuple3;

var mapTuple4 = include$1.mapTuple4;

var mapTuple5 = include$1.mapTuple5;

var pure = wrap;

var BsApplicativeExtensions = include$2.BsApplicativeExtensions;

var liftA1 = include$2.liftA1;

var all = include$2.all;

var BsMonadExtensions = include$3.BsMonadExtensions;

var flatMap = include$3.flatMap;

var flatten = include$3.flatten;

var composeKleisli = include$3.composeKleisli;

var flipComposeKleisli = include$3.flipComposeKleisli;

var liftM1 = include$3.liftM1;

var when_ = include$3.when_;

var unless = include$3.unless;

exports.wrap = wrap;
exports.unwrap = unwrap;
exports.map = map;
exports.Functor = Functor;
exports.BsFunctorExtensions = BsFunctorExtensions;
exports.flipMap = flipMap;
exports.$$void = $$void;
exports.voidRight = voidRight;
exports.voidLeft = voidLeft;
exports.flap = flap;
exports.apply = apply;
exports.Apply = Apply;
exports.BsApplyExtensions = BsApplyExtensions;
exports.applyFirst = applyFirst;
exports.applySecond = applySecond;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.tuple2 = tuple2;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.tuple5 = tuple5;
exports.mapTuple2 = mapTuple2;
exports.mapTuple3 = mapTuple3;
exports.mapTuple4 = mapTuple4;
exports.mapTuple5 = mapTuple5;
exports.pure = pure;
exports.Applicative = Applicative;
exports.BsApplicativeExtensions = BsApplicativeExtensions;
exports.liftA1 = liftA1;
exports.all = all;
exports.bind = bind;
exports.Monad = Monad;
exports.BsMonadExtensions = BsMonadExtensions;
exports.flatMap = flatMap;
exports.flatten = flatten;
exports.composeKleisli = composeKleisli;
exports.flipComposeKleisli = flipComposeKleisli;
exports.liftM1 = liftM1;
exports.when_ = when_;
exports.unless = unless;
exports.eq = eq;
exports.eqBy = eqBy;
exports.Eq = Eq;
exports.show = show;
exports.showBy = showBy;
exports.Show = Show;
/* include Not a pure module */
