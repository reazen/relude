// Generated by Melange
'use strict';

var Caml_option = require("melange.runtime/caml_option.js");
var Relude__Relude_Extensions_Eq = require("./extensions/Relude_Extensions_Eq.js");
var Relude__Relude_Extensions_Ord = require("./extensions/Relude_Extensions_Ord.js");
var Relude__Relude_Extensions_Enum = require("./extensions/Relude_Extensions_Enum.js");
var Relude__Relude_Extensions_Show = require("./extensions/Relude_Extensions_Show.js");
var Relude__Relude_Extensions_Bounded = require("./extensions/Relude_Extensions_Bounded.js");
var Relude__Relude_Extensions_BoundedEnum = require("./extensions/Relude_Extensions_BoundedEnum.js");

function show(param) {
  return "()";
}

var Show = {
  show: show
};

var include = Relude__Relude_Extensions_Show.ShowExtensions(Show);

function eq(param, param$1) {
  return true;
}

var Eq = {
  eq: eq
};

var include$1 = Relude__Relude_Extensions_Eq.EqExtensions(Eq);

function compare(param, param$1) {
  return "equal_to";
}

var Ord = {
  eq: eq,
  compare: compare
};

var include$2 = Relude__Relude_Extensions_Ord.OrdExtensions(Ord);

var Bounded = {
  eq: eq,
  compare: compare,
  top: undefined,
  bottom: undefined
};

Relude__Relude_Extensions_Bounded.BoundedExtensions(Bounded);

function succ(param) {
  
}

function pred(param) {
  
}

var Enum = {
  eq: eq,
  compare: compare,
  succ: succ,
  pred: pred
};

Relude__Relude_Extensions_Enum.EnumExtensions(Enum);

function toEnum(param) {
  if (param !== 0) {
    return ;
  } else {
    return Caml_option.some(undefined);
  }
}

function fromEnum(param) {
  return 0;
}

var BoundedEnum = {
  top: undefined,
  bottom: undefined,
  eq: eq,
  compare: compare,
  succ: succ,
  pred: pred,
  cardinality: 1,
  fromEnum: fromEnum,
  toEnum: toEnum
};

var include$3 = Relude__Relude_Extensions_BoundedEnum.BoundedEnumExtensions(BoundedEnum);

var logShow = include.logShow;

var infoShow = include.infoShow;

var warnShow = include.warnShow;

var errorShow = include.errorShow;

var eqWithConversion = include$1.eqWithConversion;

var notEq = include$1.notEq;

var eqInverted = include$1.eqInverted;

var EqInverted = include$1.EqInverted;

var EqBy = include$1.EqBy;

var compareWithConversion = include$2.compareWithConversion;

var compareReversed = include$2.compareReversed;

var OrdReversed = include$2.OrdReversed;

var compareAsInt = include$2.compareAsInt;

var min = include$2.min;

var max = include$2.max;

var lessThan = include$2.lessThan;

var lt = include$2.lt;

var lessThanOrEq = include$2.lessThanOrEq;

var lte = include$2.lte;

var greaterThan = include$2.greaterThan;

var gt = include$2.gt;

var greaterThanOrEq = include$2.greaterThanOrEq;

var gte = include$2.gte;

var clamp = include$2.clamp;

var between = include$2.between;

var OrdRingExtensions = include$2.OrdRingExtensions;

var OrdNamed = include$2.OrdNamed;

var OrdBy = include$2.OrdBy;

var fromToAsList = include$3.fromToAsList;

var upFromAsList = include$3.upFromAsList;

var upFromIncludingAsList = include$3.upFromIncludingAsList;

var downFromAsList = include$3.downFromAsList;

var downFromIncludingAsList = include$3.downFromIncludingAsList;

var fromThenToAsList = include$3.fromThenToAsList;

var inverseMapEqBy = include$3.inverseMapEqBy;

var inverseMapEq = include$3.inverseMapEq;

var inverseMapOrdBy = include$3.inverseMapOrdBy;

var inverseMapOrd = include$3.inverseMapOrd;

var inverseMapString = include$3.inverseMapString;

exports.show = show;
exports.Show = Show;
exports.logShow = logShow;
exports.infoShow = infoShow;
exports.warnShow = warnShow;
exports.errorShow = errorShow;
exports.eq = eq;
exports.Eq = Eq;
exports.eqWithConversion = eqWithConversion;
exports.notEq = notEq;
exports.eqInverted = eqInverted;
exports.EqInverted = EqInverted;
exports.EqBy = EqBy;
exports.compare = compare;
exports.Ord = Ord;
exports.compareWithConversion = compareWithConversion;
exports.compareReversed = compareReversed;
exports.OrdReversed = OrdReversed;
exports.compareAsInt = compareAsInt;
exports.min = min;
exports.max = max;
exports.lessThan = lessThan;
exports.lt = lt;
exports.lessThanOrEq = lessThanOrEq;
exports.lte = lte;
exports.greaterThan = greaterThan;
exports.gt = gt;
exports.greaterThanOrEq = greaterThanOrEq;
exports.gte = gte;
exports.clamp = clamp;
exports.between = between;
exports.OrdRingExtensions = OrdRingExtensions;
exports.OrdNamed = OrdNamed;
exports.OrdBy = OrdBy;
exports.Bounded = Bounded;
exports.Enum = Enum;
exports.BoundedEnum = BoundedEnum;
exports.fromToAsList = fromToAsList;
exports.upFromAsList = upFromAsList;
exports.upFromIncludingAsList = upFromIncludingAsList;
exports.downFromAsList = downFromAsList;
exports.downFromIncludingAsList = downFromIncludingAsList;
exports.fromThenToAsList = fromThenToAsList;
exports.inverseMapEqBy = inverseMapEqBy;
exports.inverseMapEq = inverseMapEq;
exports.inverseMapOrdBy = inverseMapOrdBy;
exports.inverseMapOrd = inverseMapOrd;
exports.inverseMapString = inverseMapString;
/* include Not a pure module */
