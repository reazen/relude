// Generated by Melange
'use strict';

var Bastet__Option = require("bastet/./Option.js");
var Relude__Relude_Option_Base = require("./option/Relude_Option_Base.js");
var Relude__Relude_Extensions_Alt = require("./extensions/Relude_Extensions_Alt.js");
var Relude__Relude_Extensions_Apply = require("./extensions/Relude_Extensions_Apply.js");
var Relude__Relude_Extensions_Monad = require("./extensions/Relude_Extensions_Monad.js");
var Relude__Relude_Option_Instances = require("./option/Relude_Option_Instances.js");
var Relude__Relude_Extensions_Functor = require("./extensions/Relude_Extensions_Functor.js");
var Relude__Relude_Option_Specializations = require("./option/Relude_Option_Specializations.js");
var Relude__Relude_Extensions_Semigroupoid = require("./extensions/Relude_Extensions_Semigroupoid.js");

var include = Relude__Relude_Extensions_Semigroupoid.SemigroupoidInfix(Relude__Relude_Option_Instances.Semigroupoid);

var include$1 = Relude__Relude_Extensions_Functor.FunctorInfix(Relude__Relude_Option_Instances.Functor);

var include$2 = Relude__Relude_Extensions_Alt.AltInfix(Bastet__Option.Alt);

var include$3 = Relude__Relude_Extensions_Apply.ApplyInfix(Relude__Relude_Option_Instances.Apply);

var include$4 = Relude__Relude_Extensions_Monad.MonadInfix(Relude__Relude_Option_Instances.Monad);

function $pipe$question(opt, $$default) {
  return Relude__Relude_Option_Base.getOrElse($$default, opt);
}

var Infix_SE = include.SE;

var Infix_$less$less$less = include.$less$less$less;

var Infix_$great$great$great = include.$great$great$great;

var Infix_FunctorExtensions = include$1.FunctorExtensions;

var Infix_$less$$great = include$1.$less$$great;

var Infix_$less$$$great = include$1.$less$$$great;

var Infix_$less$ = include$1.$less$;

var Infix_$$great = include$1.$$great;

var Infix_$less$at$great = include$1.$less$at$great;

var Infix_$less$pipe$great = include$2.$less$pipe$great;

var Infix_ApplyExtensions = include$3.ApplyExtensions;

var Infix_$less$star$great = include$3.$less$star$great;

var Infix_$less$star = include$3.$less$star;

var Infix_$star$great = include$3.$star$great;

var Infix_MonadExtensions = include$4.MonadExtensions;

var Infix_$great$great$eq = include$4.$great$great$eq;

var Infix_$eq$less$less = include$4.$eq$less$less;

var Infix_$great$eq$great = include$4.$great$eq$great;

var Infix_$less$eq$less = include$4.$less$eq$less;

var Infix = {
  SE: Infix_SE,
  $less$less$less: Infix_$less$less$less,
  $great$great$great: Infix_$great$great$great,
  FunctorExtensions: Infix_FunctorExtensions,
  $less$$great: Infix_$less$$great,
  $less$$$great: Infix_$less$$$great,
  $less$: Infix_$less$,
  $$great: Infix_$$great,
  $less$at$great: Infix_$less$at$great,
  $less$pipe$great: Infix_$less$pipe$great,
  ApplyExtensions: Infix_ApplyExtensions,
  $less$star$great: Infix_$less$star$great,
  $less$star: Infix_$less$star,
  $star$great: Infix_$star$great,
  MonadExtensions: Infix_MonadExtensions,
  $great$great$eq: Infix_$great$great$eq,
  $eq$less$less: Infix_$eq$less$less,
  $great$eq$great: Infix_$great$eq$great,
  $less$eq$less: Infix_$less$eq$less,
  $pipe$question: $pipe$question
};

var compose = Relude__Relude_Option_Instances.compose;

var Semigroupoid = Relude__Relude_Option_Instances.Semigroupoid;

var andThen = Relude__Relude_Option_Instances.andThen;

var map = Relude__Relude_Option_Instances.map;

var Functor = Relude__Relude_Option_Instances.Functor;

var BsFunctorExtensions = Relude__Relude_Option_Instances.BsFunctorExtensions;

var flipMap = Relude__Relude_Option_Instances.flipMap;

var $$void = Relude__Relude_Option_Instances.$$void;

var voidRight = Relude__Relude_Option_Instances.voidRight;

var voidLeft = Relude__Relude_Option_Instances.voidLeft;

var flap = Relude__Relude_Option_Instances.flap;

var apply = Relude__Relude_Option_Instances.apply;

var Apply = Relude__Relude_Option_Instances.Apply;

var BsApplyExtensions = Relude__Relude_Option_Instances.BsApplyExtensions;

var applyFirst = Relude__Relude_Option_Instances.applyFirst;

var applySecond = Relude__Relude_Option_Instances.applySecond;

var map2 = Relude__Relude_Option_Instances.map2;

var map3 = Relude__Relude_Option_Instances.map3;

var map4 = Relude__Relude_Option_Instances.map4;

var map5 = Relude__Relude_Option_Instances.map5;

var tuple2 = Relude__Relude_Option_Instances.tuple2;

var tuple3 = Relude__Relude_Option_Instances.tuple3;

var tuple4 = Relude__Relude_Option_Instances.tuple4;

var tuple5 = Relude__Relude_Option_Instances.tuple5;

var mapTuple2 = Relude__Relude_Option_Instances.mapTuple2;

var mapTuple3 = Relude__Relude_Option_Instances.mapTuple3;

var mapTuple4 = Relude__Relude_Option_Instances.mapTuple4;

var mapTuple5 = Relude__Relude_Option_Instances.mapTuple5;

var pure = Relude__Relude_Option_Instances.pure;

var Applicative = Relude__Relude_Option_Instances.Applicative;

var BsApplicativeExtensions = Relude__Relude_Option_Instances.BsApplicativeExtensions;

var liftA1 = Relude__Relude_Option_Instances.liftA1;

var bind = Relude__Relude_Option_Instances.bind;

var Monad = Relude__Relude_Option_Instances.Monad;

var BsMonadExtensions = Relude__Relude_Option_Instances.BsMonadExtensions;

var flatMap = Relude__Relude_Option_Instances.flatMap;

var flatten = Relude__Relude_Option_Instances.flatten;

var composeKleisli = Relude__Relude_Option_Instances.composeKleisli;

var flipComposeKleisli = Relude__Relude_Option_Instances.flipComposeKleisli;

var liftM1 = Relude__Relude_Option_Instances.liftM1;

var when_ = Relude__Relude_Option_Instances.when_;

var unless = Relude__Relude_Option_Instances.unless;

var align = Relude__Relude_Option_Instances.align;

var alignWith = Relude__Relude_Option_Instances.alignWith;

var Semialign = Relude__Relude_Option_Instances.Semialign;

var Align = Relude__Relude_Option_Instances.Align;

var foldLeft = Relude__Relude_Option_Instances.foldLeft;

var foldRight = Relude__Relude_Option_Instances.foldRight;

var BsFoldableExtensions = Relude__Relude_Option_Instances.BsFoldableExtensions;

var any = Relude__Relude_Option_Instances.any;

var all = Relude__Relude_Option_Instances.all;

var containsBy = Relude__Relude_Option_Instances.containsBy;

var contains = Relude__Relude_Option_Instances.contains;

var indexOfBy = Relude__Relude_Option_Instances.indexOfBy;

var indexOf = Relude__Relude_Option_Instances.indexOf;

var minBy = Relude__Relude_Option_Instances.minBy;

var min = Relude__Relude_Option_Instances.min;

var maxBy = Relude__Relude_Option_Instances.maxBy;

var max = Relude__Relude_Option_Instances.max;

var countBy = Relude__Relude_Option_Instances.countBy;

var length = Relude__Relude_Option_Instances.length;

var size = Relude__Relude_Option_Instances.size;

var count = Relude__Relude_Option_Instances.count;

var forEach = Relude__Relude_Option_Instances.forEach;

var forEachWithIndex = Relude__Relude_Option_Instances.forEachWithIndex;

var find = Relude__Relude_Option_Instances.find;

var findWithIndex = Relude__Relude_Option_Instances.findWithIndex;

var toList = Relude__Relude_Option_Instances.toList;

var toArray = Relude__Relude_Option_Instances.toArray;

var FoldableSemigroupExtensions = Relude__Relude_Option_Instances.FoldableSemigroupExtensions;

var FoldableMonoidExtensions = Relude__Relude_Option_Instances.FoldableMonoidExtensions;

var foldMap = Relude__Relude_Option_Instances.foldMap;

var foldWithMonoid = Relude__Relude_Option_Instances.foldWithMonoid;

var intercalate = Relude__Relude_Option_Instances.intercalate;

var FoldableApplicativeExtensions = Relude__Relude_Option_Instances.FoldableApplicativeExtensions;

var FoldableMonadExtensions = Relude__Relude_Option_Instances.FoldableMonadExtensions;

var FoldableEqExtensions = Relude__Relude_Option_Instances.FoldableEqExtensions;

var FoldableOrdExtensions = Relude__Relude_Option_Instances.FoldableOrdExtensions;

var alt = Relude__Relude_Option_Instances.alt;

var altLazy = Relude__Relude_Option_Instances.altLazy;

var Semigroup_Any = Relude__Relude_Option_Instances.Semigroup_Any;

var Monoid_Any = Relude__Relude_Option_Instances.Monoid_Any;

var Traversable = Relude__Relude_Option_Instances.Traversable;

var eqBy = Relude__Relude_Option_Instances.eqBy;

var eq = Relude__Relude_Option_Instances.eq;

var Eq = Relude__Relude_Option_Instances.Eq;

var Ord = Relude__Relude_Option_Instances.Ord;

var showBy = Relude__Relude_Option_Instances.showBy;

var show = Relude__Relude_Option_Instances.show;

var WithSemigroup = Relude__Relude_Option_Instances.WithSemigroup;

var WithApplicative = Relude__Relude_Option_Instances.WithApplicative;

var some = Relude__Relude_Option_Base.some;

var none;

var empty;

var isSome = Relude__Relude_Option_Base.isSome;

var isNone = Relude__Relude_Option_Base.isNone;

var fold = Relude__Relude_Option_Base.fold;

var foldLazy = Relude__Relude_Option_Base.foldLazy;

var getOrElse = Relude__Relude_Option_Base.getOrElse;

var getOrElseLazy = Relude__Relude_Option_Base.getOrElseLazy;

var getOrThrow = Relude__Relude_Option_Base.getOrThrow;

var orElse = Relude__Relude_Option_Base.orElse;

var orElseLazy = Relude__Relude_Option_Base.orElseLazy;

var tap = Relude__Relude_Option_Base.tap;

var tapSome = Relude__Relude_Option_Base.tapSome;

var tapNone = Relude__Relude_Option_Base.tapNone;

var bitap = Relude__Relude_Option_Base.bitap;

var filter = Relude__Relude_Option_Base.filter;

var keep = Relude__Relude_Option_Base.keep;

var filterNot = Relude__Relude_Option_Base.filterNot;

var reject = Relude__Relude_Option_Base.reject;

var OptionEqExtensions = Relude__Relude_Option_Specializations.OptionEqExtensions;

var OptionOrdExtensions = Relude__Relude_Option_Specializations.OptionOrdExtensions;

var $$String = Relude__Relude_Option_Specializations.$$String;

var Int = Relude__Relude_Option_Specializations.Int;

var Float = Relude__Relude_Option_Specializations.Float;

var IO = Relude__Relude_Option_Specializations.IO;

exports.compose = compose;
exports.Semigroupoid = Semigroupoid;
exports.andThen = andThen;
exports.map = map;
exports.Functor = Functor;
exports.BsFunctorExtensions = BsFunctorExtensions;
exports.flipMap = flipMap;
exports.$$void = $$void;
exports.voidRight = voidRight;
exports.voidLeft = voidLeft;
exports.flap = flap;
exports.apply = apply;
exports.Apply = Apply;
exports.BsApplyExtensions = BsApplyExtensions;
exports.applyFirst = applyFirst;
exports.applySecond = applySecond;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.tuple2 = tuple2;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.tuple5 = tuple5;
exports.mapTuple2 = mapTuple2;
exports.mapTuple3 = mapTuple3;
exports.mapTuple4 = mapTuple4;
exports.mapTuple5 = mapTuple5;
exports.pure = pure;
exports.Applicative = Applicative;
exports.BsApplicativeExtensions = BsApplicativeExtensions;
exports.liftA1 = liftA1;
exports.bind = bind;
exports.Monad = Monad;
exports.BsMonadExtensions = BsMonadExtensions;
exports.flatMap = flatMap;
exports.flatten = flatten;
exports.composeKleisli = composeKleisli;
exports.flipComposeKleisli = flipComposeKleisli;
exports.liftM1 = liftM1;
exports.when_ = when_;
exports.unless = unless;
exports.align = align;
exports.alignWith = alignWith;
exports.Semialign = Semialign;
exports.Align = Align;
exports.foldLeft = foldLeft;
exports.foldRight = foldRight;
exports.BsFoldableExtensions = BsFoldableExtensions;
exports.any = any;
exports.all = all;
exports.containsBy = containsBy;
exports.contains = contains;
exports.indexOfBy = indexOfBy;
exports.indexOf = indexOf;
exports.minBy = minBy;
exports.min = min;
exports.maxBy = maxBy;
exports.max = max;
exports.countBy = countBy;
exports.length = length;
exports.size = size;
exports.count = count;
exports.forEach = forEach;
exports.forEachWithIndex = forEachWithIndex;
exports.find = find;
exports.findWithIndex = findWithIndex;
exports.toList = toList;
exports.toArray = toArray;
exports.FoldableSemigroupExtensions = FoldableSemigroupExtensions;
exports.FoldableMonoidExtensions = FoldableMonoidExtensions;
exports.foldMap = foldMap;
exports.foldWithMonoid = foldWithMonoid;
exports.intercalate = intercalate;
exports.FoldableApplicativeExtensions = FoldableApplicativeExtensions;
exports.FoldableMonadExtensions = FoldableMonadExtensions;
exports.FoldableEqExtensions = FoldableEqExtensions;
exports.FoldableOrdExtensions = FoldableOrdExtensions;
exports.alt = alt;
exports.altLazy = altLazy;
exports.Semigroup_Any = Semigroup_Any;
exports.Monoid_Any = Monoid_Any;
exports.Traversable = Traversable;
exports.eqBy = eqBy;
exports.eq = eq;
exports.Eq = Eq;
exports.Ord = Ord;
exports.showBy = showBy;
exports.show = show;
exports.WithSemigroup = WithSemigroup;
exports.WithApplicative = WithApplicative;
exports.some = some;
exports.none = none;
exports.empty = empty;
exports.isSome = isSome;
exports.isNone = isNone;
exports.fold = fold;
exports.foldLazy = foldLazy;
exports.getOrElse = getOrElse;
exports.getOrElseLazy = getOrElseLazy;
exports.getOrThrow = getOrThrow;
exports.orElse = orElse;
exports.orElseLazy = orElseLazy;
exports.tap = tap;
exports.tapSome = tapSome;
exports.tapNone = tapNone;
exports.bitap = bitap;
exports.filter = filter;
exports.keep = keep;
exports.filterNot = filterNot;
exports.reject = reject;
exports.OptionEqExtensions = OptionEqExtensions;
exports.OptionOrdExtensions = OptionOrdExtensions;
exports.$$String = $$String;
exports.Int = Int;
exports.Float = Float;
exports.IO = IO;
exports.Infix = Infix;
/* include Not a pure module */
