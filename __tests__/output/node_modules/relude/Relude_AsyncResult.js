// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Caml_option = require("melange.runtime/caml_option.js");
var Relude__Relude_Result = require("./Relude_Result.js");
var Relude__Relude_AsyncData = require("./Relude_AsyncData.js");
var Relude__Relude_Extensions_Alt = require("./extensions/Relude_Extensions_Alt.js");
var Relude__Relude_Extensions_Apply = require("./extensions/Relude_Extensions_Apply.js");
var Relude__Relude_Extensions_Monad = require("./extensions/Relude_Extensions_Monad.js");
var Relude__Relude_Extensions_Functor = require("./extensions/Relude_Extensions_Functor.js");
var Relude__Relude_Extensions_Applicative = require("./extensions/Relude_Extensions_Applicative.js");

function reloadingOk(a) {
  return Relude__Relude_AsyncData.reloading({
              TAG: /* Ok */0,
              _0: a
            });
}

function reloadingError(e) {
  return Relude__Relude_AsyncData.reloading({
              TAG: /* Error */1,
              _0: e
            });
}

function completeOk(a) {
  return Relude__Relude_AsyncData.complete({
              TAG: /* Ok */0,
              _0: a
            });
}

function completeError(e) {
  return Relude__Relude_AsyncData.complete({
              TAG: /* Error */1,
              _0: e
            });
}

function isOk(param) {
  if (typeof param === "number") {
    return false;
  } else if (param.TAG === /* Reloading */0) {
    if (param._0.TAG === /* Ok */0) {
      return true;
    } else {
      return false;
    }
  } else if (param._0.TAG === /* Ok */0) {
    return true;
  } else {
    return false;
  }
}

function isError(param) {
  if (typeof param === "number") {
    return false;
  } else if (param.TAG === /* Reloading */0) {
    if (param._0.TAG === /* Ok */0) {
      return false;
    } else {
      return true;
    }
  } else if (param._0.TAG === /* Ok */0) {
    return false;
  } else {
    return true;
  }
}

function isReloadingOk(param) {
  if (typeof param === "number" || !(param.TAG === /* Reloading */0 && param._0.TAG === /* Ok */0)) {
    return false;
  } else {
    return true;
  }
}

function isReloadingError(param) {
  if (typeof param === "number" || !(param.TAG === /* Reloading */0 && param._0.TAG !== /* Ok */0)) {
    return false;
  } else {
    return true;
  }
}

function isCompleteOk(param) {
  if (typeof param === "number" || !(param.TAG === /* Complete */1 && param._0.TAG === /* Ok */0)) {
    return false;
  } else {
    return true;
  }
}

function isCompleteError(param) {
  if (typeof param === "number" || !(param.TAG === /* Complete */1 && param._0.TAG !== /* Ok */0)) {
    return false;
  } else {
    return true;
  }
}

function getOk(param) {
  if (typeof param === "number") {
    return ;
  }
  if (param.TAG === /* Reloading */0) {
    var v = param._0;
    if (v.TAG === /* Ok */0) {
      return Caml_option.some(v._0);
    } else {
      return ;
    }
  }
  var v$1 = param._0;
  if (v$1.TAG === /* Ok */0) {
    return Caml_option.some(v$1._0);
  }
  
}

function getError(param) {
  if (typeof param === "number") {
    return ;
  }
  if (param.TAG === /* Reloading */0) {
    var x = param._0;
    if (x.TAG === /* Ok */0) {
      return ;
    } else {
      return Caml_option.some(x._0);
    }
  }
  var x$1 = param._0;
  if (x$1.TAG === /* Ok */0) {
    return ;
  } else {
    return Caml_option.some(x$1._0);
  }
}

function getReloadingOk(param) {
  if (typeof param === "number") {
    return ;
  }
  if (param.TAG !== /* Reloading */0) {
    return ;
  }
  var v = param._0;
  if (v.TAG === /* Ok */0) {
    return Caml_option.some(v._0);
  }
  
}

function getReloadingError(param) {
  if (typeof param === "number") {
    return ;
  }
  if (param.TAG !== /* Reloading */0) {
    return ;
  }
  var x = param._0;
  if (x.TAG === /* Ok */0) {
    return ;
  } else {
    return Caml_option.some(x._0);
  }
}

function getCompleteOk(param) {
  if (typeof param === "number") {
    return ;
  }
  if (param.TAG !== /* Complete */1) {
    return ;
  }
  var v = param._0;
  if (v.TAG === /* Ok */0) {
    return Caml_option.some(v._0);
  }
  
}

function getCompleteError(param) {
  if (typeof param === "number") {
    return ;
  }
  if (param.TAG !== /* Complete */1) {
    return ;
  }
  var x = param._0;
  if (x.TAG === /* Ok */0) {
    return ;
  } else {
    return Caml_option.some(x._0);
  }
}

function map(f, fa) {
  if (typeof fa === "number") {
    if (fa === /* Init */0) {
      return /* Init */0;
    } else {
      return /* Loading */1;
    }
  }
  if (fa.TAG === /* Reloading */0) {
    var a = fa._0;
    if (a.TAG !== /* Ok */0) {
      return fa;
    }
    var a$1 = Curry._1(f, a._0);
    return Relude__Relude_AsyncData.reloading({
                TAG: /* Ok */0,
                _0: a$1
              });
  }
  var a$2 = fa._0;
  if (a$2.TAG !== /* Ok */0) {
    return fa;
  }
  var a$3 = Curry._1(f, a$2._0);
  return Relude__Relude_AsyncData.complete({
              TAG: /* Ok */0,
              _0: a$3
            });
}

function mapError(f, fa) {
  if (typeof fa === "number") {
    if (fa === /* Init */0) {
      return /* Init */0;
    } else {
      return /* Loading */1;
    }
  }
  if (fa.TAG === /* Reloading */0) {
    var e = fa._0;
    if (e.TAG === /* Ok */0) {
      return fa;
    }
    var e$1 = Curry._1(f, e._0);
    return Relude__Relude_AsyncData.reloading({
                TAG: /* Error */1,
                _0: e$1
              });
  }
  var e$2 = fa._0;
  if (e$2.TAG === /* Ok */0) {
    return fa;
  }
  var e$3 = Curry._1(f, e$2._0);
  return Relude__Relude_AsyncData.complete({
              TAG: /* Error */1,
              _0: e$3
            });
}

function tapByValue(ifEmpty, ifNotEmpty, fa) {
  if (typeof fa === "number") {
    Curry._1(ifEmpty, undefined);
    return fa;
  } else {
    Curry._1(ifNotEmpty, fa._0);
    return fa;
  }
}

function tapOk(ifOk, fa) {
  if (typeof fa === "number") {
    return fa;
  }
  if (fa.TAG === /* Reloading */0) {
    var a = fa._0;
    if (a.TAG !== /* Ok */0) {
      return fa;
    }
    Curry._1(ifOk, a._0);
    return fa;
  }
  var a$1 = fa._0;
  if (a$1.TAG !== /* Ok */0) {
    return fa;
  }
  Curry._1(ifOk, a$1._0);
  return fa;
}

function tapError(ifError, fa) {
  if (typeof fa === "number") {
    return fa;
  }
  if (fa.TAG === /* Reloading */0) {
    var e = fa._0;
    if (e.TAG === /* Ok */0) {
      return fa;
    }
    Curry._1(ifError, e._0);
    return fa;
  }
  var e$1 = fa._0;
  if (e$1.TAG === /* Ok */0) {
    return fa;
  }
  Curry._1(ifError, e$1._0);
  return fa;
}

function apply(ff, fa) {
  if (typeof ff === "number") {
    if (ff === /* Init */0) {
      if (typeof fa === "number") {
        if (fa === /* Init */0) {
          return /* Init */0;
        } else {
          return /* Loading */1;
        }
      } else if (fa.TAG === /* Reloading */0) {
        if (fa._0.TAG === /* Ok */0) {
          return /* Init */0;
        } else {
          return fa;
        }
      } else if (fa._0.TAG === /* Ok */0) {
        return /* Init */0;
      } else {
        return fa;
      }
    } else if (typeof fa === "number") {
      return /* Loading */1;
    } else if (fa.TAG === /* Reloading */0) {
      if (fa._0.TAG === /* Ok */0) {
        return /* Init */0;
      } else {
        return fa;
      }
    } else if (fa._0.TAG === /* Ok */0) {
      return /* Init */0;
    } else {
      return fa;
    }
  }
  if (ff.TAG === /* Reloading */0) {
    var f = ff._0;
    if (f.TAG !== /* Ok */0) {
      return ff;
    }
    var f$1 = f._0;
    if (typeof fa === "number") {
      if (fa === /* Init */0) {
        return /* Init */0;
      } else {
        return /* Loading */1;
      }
    }
    if (fa.TAG === /* Reloading */0) {
      var a = fa._0;
      if (a.TAG !== /* Ok */0) {
        return fa;
      }
      var a$1 = Curry._1(f$1, a._0);
      return Relude__Relude_AsyncData.reloading({
                  TAG: /* Ok */0,
                  _0: a$1
                });
    }
    var a$2 = fa._0;
    if (a$2.TAG !== /* Ok */0) {
      return fa;
    }
    var a$3 = Curry._1(f$1, a$2._0);
    return Relude__Relude_AsyncData.reloading({
                TAG: /* Ok */0,
                _0: a$3
              });
  } else {
    var f$2 = ff._0;
    if (f$2.TAG !== /* Ok */0) {
      return ff;
    }
    var f$3 = f$2._0;
    if (typeof fa === "number") {
      if (fa === /* Init */0) {
        return /* Init */0;
      } else {
        return /* Loading */1;
      }
    }
    if (fa.TAG === /* Reloading */0) {
      var a$4 = fa._0;
      if (a$4.TAG !== /* Ok */0) {
        return fa;
      }
      var a$5 = Curry._1(f$3, a$4._0);
      return Relude__Relude_AsyncData.reloading({
                  TAG: /* Ok */0,
                  _0: a$5
                });
    }
    var a$6 = fa._0;
    if (a$6.TAG !== /* Ok */0) {
      return fa;
    }
    var a$7 = Curry._1(f$3, a$6._0);
    return Relude__Relude_AsyncData.complete({
                TAG: /* Ok */0,
                _0: a$7
              });
  }
}

function bind(fa, f) {
  if (typeof fa === "number") {
    if (fa === /* Init */0) {
      return /* Init */0;
    } else {
      return /* Loading */1;
    }
  }
  if (fa.TAG === /* Reloading */0) {
    var a = fa._0;
    if (a.TAG === /* Ok */0) {
      return Curry._1(f, a._0);
    } else {
      return fa;
    }
  }
  var a$1 = fa._0;
  if (a$1.TAG === /* Ok */0) {
    return Curry._1(f, a$1._0);
  } else {
    return fa;
  }
}

function flatMap(f, fa) {
  return bind(fa, f);
}

function flatten(mma) {
  return bind(mma, (function (a) {
                return a;
              }));
}

function fold(initValue, loadingValue, onReloading, onComplete, fa) {
  if (typeof fa === "number") {
    if (fa === /* Init */0) {
      return initValue;
    } else {
      return loadingValue;
    }
  } else if (fa.TAG === /* Reloading */0) {
    return Curry._1(onReloading, fa._0);
  } else {
    return Curry._1(onComplete, fa._0);
  }
}

function foldLazy(onInit, onLoading, onReloading, onComplete, fa) {
  if (typeof fa === "number") {
    if (fa === /* Init */0) {
      return Curry._1(onInit, undefined);
    } else {
      return Curry._1(onLoading, undefined);
    }
  } else if (fa.TAG === /* Reloading */0) {
    return Curry._1(onReloading, fa._0);
  } else {
    return Curry._1(onComplete, fa._0);
  }
}

function foldByValue(defaultValue, onOk, onError, fa) {
  if (typeof fa === "number") {
    return defaultValue;
  }
  if (fa.TAG === /* Reloading */0) {
    var a = fa._0;
    if (a.TAG === /* Ok */0) {
      return Curry._1(onOk, a._0);
    } else {
      return Curry._1(onError, a._0);
    }
  }
  var a$1 = fa._0;
  if (a$1.TAG === /* Ok */0) {
    return Curry._1(onOk, a$1._0);
  } else {
    return Curry._1(onError, a$1._0);
  }
}

function foldByValueLazy(onNoValue, onOk, onError, fa) {
  if (typeof fa === "number") {
    return Curry._1(onNoValue, undefined);
  }
  if (fa.TAG === /* Reloading */0) {
    var a = fa._0;
    if (a.TAG === /* Ok */0) {
      return Curry._1(onOk, a._0);
    } else {
      return Curry._1(onError, a._0);
    }
  }
  var a$1 = fa._0;
  if (a$1.TAG === /* Ok */0) {
    return Curry._1(onOk, a$1._0);
  } else {
    return Curry._1(onError, a$1._0);
  }
}

function fromAsyncData(a) {
  if (typeof a === "number") {
    if (a === /* Init */0) {
      return /* Init */0;
    } else {
      return /* Loading */1;
    }
  } else if (a.TAG === /* Reloading */0) {
    return {
            TAG: /* Reloading */0,
            _0: {
              TAG: /* Ok */0,
              _0: a._0
            }
          };
  } else {
    return {
            TAG: /* Complete */1,
            _0: {
              TAG: /* Ok */0,
              _0: a._0
            }
          };
  }
}

function toAsyncData(param) {
  if (typeof param === "number") {
    if (param === /* Init */0) {
      return /* Init */0;
    } else {
      return /* Loading */1;
    }
  } else if (param.TAG === /* Reloading */0) {
    return {
            TAG: /* Reloading */0,
            _0: param._0._0
          };
  } else {
    return {
            TAG: /* Complete */1,
            _0: param._0._0
          };
  }
}

function alt(fa, fb) {
  if (typeof fa === "number") {
    fa === /* Init */0;
  } else if (fa.TAG === /* Reloading */0) {
    if (fa._0.TAG !== /* Ok */0) {
      if (typeof fb === "number" || !(fb.TAG === /* Reloading */0 && fb._0.TAG !== /* Ok */0)) {
        return fb;
      } else {
        return fa;
      }
    }
    
  } else if (fa._0.TAG !== /* Ok */0) {
    if (typeof fb === "number") {
      return fb;
    } else if (fb.TAG === /* Reloading */0) {
      if (fb._0.TAG === /* Ok */0) {
        return fb;
      } else {
        return fa;
      }
    } else if (fb._0.TAG === /* Ok */0) {
      return fb;
    } else {
      return fa;
    }
  }
  if (typeof fb === "number") {
    return Relude__Relude_AsyncData.alt(fa, fb);
  } else if (fb.TAG === /* Reloading */0) {
    if (fb._0.TAG === /* Ok */0) {
      return Relude__Relude_AsyncData.alt(fa, fb);
    } else {
      return fa;
    }
  } else if (fb._0.TAG === /* Ok */0) {
    return Relude__Relude_AsyncData.alt(fa, fb);
  } else {
    return fa;
  }
}

function eqBy(errEq, okEq) {
  return function (param, param$1) {
    return Relude__Relude_AsyncData.eqBy((function (param, param$1) {
                  return Relude__Relude_Result.eqBy(errEq, okEq, param, param$1);
                }), param, param$1);
  };
}

function WithError(E) {
  var Functor = {
    map: map
  };
  var include = Relude__Relude_Extensions_Functor.FunctorExtensions(Functor);
  var Apply = {
    map: map,
    apply: apply
  };
  var include$1 = Relude__Relude_Extensions_Apply.ApplyExtensions(Apply);
  var Applicative = {
    map: map,
    apply: apply,
    pure: completeOk
  };
  var include$2 = Relude__Relude_Extensions_Applicative.ApplicativeExtensions(Applicative);
  var Monad = {
    map: map,
    apply: apply,
    pure: completeOk,
    flat_map: bind
  };
  var include$3 = Relude__Relude_Extensions_Monad.MonadExtensions(Monad);
  var Alt = {
    map: map,
    alt: alt
  };
  var include$4 = Relude__Relude_Extensions_Alt.AltExtensions(Alt);
  var include$5 = Relude__Relude_Extensions_Functor.FunctorInfix(Functor);
  var include$6 = Relude__Relude_Extensions_Alt.AltInfix(Alt);
  var include$7 = Relude__Relude_Extensions_Apply.ApplyInfix(Apply);
  var include$8 = Relude__Relude_Extensions_Monad.MonadInfix(Monad);
  var Infix_FunctorExtensions = include$5.FunctorExtensions;
  var Infix_$less$$great = include$5.$less$$great;
  var Infix_$less$$$great = include$5.$less$$$great;
  var Infix_$less$ = include$5.$less$;
  var Infix_$$great = include$5.$$great;
  var Infix_$less$at$great = include$5.$less$at$great;
  var Infix_$less$pipe$great = include$6.$less$pipe$great;
  var Infix_ApplyExtensions = include$7.ApplyExtensions;
  var Infix_$less$star$great = include$7.$less$star$great;
  var Infix_$less$star = include$7.$less$star;
  var Infix_$star$great = include$7.$star$great;
  var Infix_MonadExtensions = include$8.MonadExtensions;
  var Infix_$great$great$eq = include$8.$great$great$eq;
  var Infix_$eq$less$less = include$8.$eq$less$less;
  var Infix_$great$eq$great = include$8.$great$eq$great;
  var Infix_$less$eq$less = include$8.$less$eq$less;
  var Infix = {
    FunctorExtensions: Infix_FunctorExtensions,
    $less$$great: Infix_$less$$great,
    $less$$$great: Infix_$less$$$great,
    $less$: Infix_$less$,
    $$great: Infix_$$great,
    $less$at$great: Infix_$less$at$great,
    $less$pipe$great: Infix_$less$pipe$great,
    ApplyExtensions: Infix_ApplyExtensions,
    $less$star$great: Infix_$less$star$great,
    $less$star: Infix_$less$star,
    $star$great: Infix_$star$great,
    MonadExtensions: Infix_MonadExtensions,
    $great$great$eq: Infix_$great$great$eq,
    $eq$less$less: Infix_$eq$less$less,
    $great$eq$great: Infix_$great$eq$great,
    $less$eq$less: Infix_$less$eq$less
  };
  return {
          Functor: Functor,
          map: map,
          BsFunctorExtensions: include.BsFunctorExtensions,
          flipMap: include.flipMap,
          $$void: include.$$void,
          voidRight: include.voidRight,
          voidLeft: include.voidLeft,
          flap: include.flap,
          Apply: Apply,
          apply: apply,
          BsApplyExtensions: include$1.BsApplyExtensions,
          applyFirst: include$1.applyFirst,
          applySecond: include$1.applySecond,
          map2: include$1.map2,
          map3: include$1.map3,
          map4: include$1.map4,
          map5: include$1.map5,
          tuple2: include$1.tuple2,
          tuple3: include$1.tuple3,
          tuple4: include$1.tuple4,
          tuple5: include$1.tuple5,
          mapTuple2: include$1.mapTuple2,
          mapTuple3: include$1.mapTuple3,
          mapTuple4: include$1.mapTuple4,
          mapTuple5: include$1.mapTuple5,
          Applicative: Applicative,
          pure: completeOk,
          BsApplicativeExtensions: include$2.BsApplicativeExtensions,
          liftA1: include$2.liftA1,
          all: include$2.all,
          Monad: Monad,
          bind: bind,
          BsMonadExtensions: include$3.BsMonadExtensions,
          flatMap: include$3.flatMap,
          flatten: include$3.flatten,
          composeKleisli: include$3.composeKleisli,
          flipComposeKleisli: include$3.flipComposeKleisli,
          liftM1: include$3.liftM1,
          when_: include$3.when_,
          unless: include$3.unless,
          Alt: Alt,
          orElse: include$4.orElse,
          Infix: Infix
        };
}

var init = Relude__Relude_AsyncData.init;

var loading = Relude__Relude_AsyncData.loading;

var ok = completeOk;

var error = completeError;

var isInit = Relude__Relude_AsyncData.isInit;

var isLoading = Relude__Relude_AsyncData.isLoading;

var isReloading = Relude__Relude_AsyncData.isReloading;

var isComplete = Relude__Relude_AsyncData.isComplete;

var isBusy = Relude__Relude_AsyncData.isBusy;

var isIdle = Relude__Relude_AsyncData.isIdle;

var isEmpty = Relude__Relude_AsyncData.isEmpty;

var isNotEmpty = Relude__Relude_AsyncData.isNotEmpty;

var toBusy = Relude__Relude_AsyncData.toBusy;

var toIdle = Relude__Relude_AsyncData.toIdle;

var tap = Relude__Relude_AsyncData.tap;

var tapInit = Relude__Relude_AsyncData.tapInit;

var tapLoading = Relude__Relude_AsyncData.tapLoading;

var tapReloading = Relude__Relude_AsyncData.tapReloading;

var tapComplete = Relude__Relude_AsyncData.tapComplete;

var tapEmpty = Relude__Relude_AsyncData.tapEmpty;

var tapNotEmpty = Relude__Relude_AsyncData.tapNotEmpty;

var pure = completeOk;

exports.init = init;
exports.loading = loading;
exports.reloadingOk = reloadingOk;
exports.reloadingError = reloadingError;
exports.completeOk = completeOk;
exports.completeError = completeError;
exports.ok = ok;
exports.error = error;
exports.isInit = isInit;
exports.isLoading = isLoading;
exports.isReloading = isReloading;
exports.isComplete = isComplete;
exports.isBusy = isBusy;
exports.isIdle = isIdle;
exports.isEmpty = isEmpty;
exports.isNotEmpty = isNotEmpty;
exports.isOk = isOk;
exports.isError = isError;
exports.isReloadingOk = isReloadingOk;
exports.isReloadingError = isReloadingError;
exports.isCompleteOk = isCompleteOk;
exports.isCompleteError = isCompleteError;
exports.getOk = getOk;
exports.getError = getError;
exports.getReloadingOk = getReloadingOk;
exports.getReloadingError = getReloadingError;
exports.getCompleteOk = getCompleteOk;
exports.getCompleteError = getCompleteError;
exports.toBusy = toBusy;
exports.toIdle = toIdle;
exports.map = map;
exports.mapError = mapError;
exports.tap = tap;
exports.tapInit = tapInit;
exports.tapLoading = tapLoading;
exports.tapReloading = tapReloading;
exports.tapComplete = tapComplete;
exports.tapEmpty = tapEmpty;
exports.tapNotEmpty = tapNotEmpty;
exports.tapByValue = tapByValue;
exports.tapOk = tapOk;
exports.tapError = tapError;
exports.apply = apply;
exports.pure = pure;
exports.bind = bind;
exports.flatMap = flatMap;
exports.flatten = flatten;
exports.fold = fold;
exports.foldLazy = foldLazy;
exports.foldByValue = foldByValue;
exports.foldByValueLazy = foldByValueLazy;
exports.fromAsyncData = fromAsyncData;
exports.toAsyncData = toAsyncData;
exports.alt = alt;
exports.eqBy = eqBy;
exports.WithError = WithError;
/* Relude__Relude_Result Not a pure module */
