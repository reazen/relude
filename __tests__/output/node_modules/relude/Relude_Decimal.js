// Generated by Melange
'use strict';

var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("./Relude_Int.js");
var Relude__Relude_Array = require("./Relude_Array.js");
var Relude__Relude_String = require("./Relude_String.js");

function make(mantissa, exponent) {
  return /* Decimal */{
          _0: mantissa,
          _1: exponent
        };
}

function fromInt(intValue) {
  return /* Decimal */{
          _0: intValue,
          _1: 0
        };
}

function show(param) {
  var exponent = param._1;
  var mantissa = param._0;
  if (exponent === 0) {
    return String(mantissa);
  }
  if (exponent > 0) {
    if (mantissa === 0) {
      return "0";
    }
    var zeroes = Relude__Relude_String.repeat(exponent, "0");
    return String(mantissa) + zeroes;
  }
  var match = Relude__Relude_String.splitAt(exponent, String(mantissa));
  return match[0] + ("." + match[1]);
}

function tenToThePowerOfPositive(exponent) {
  return Curry._3(Relude__Relude_Array.foldLeft, (function (acc, param) {
                return Math.imul(10, acc);
              }), 1, Relude__Relude_Int.rangeAsArray(1, exponent + 1 | 0));
}

function normalize(param, param$1) {
  var exponentB = param$1._1;
  var exponentA = param._1;
  var exponentMin = Curry._2(Relude__Relude_Int.min, exponentA, exponentB);
  var newMantissaA = Math.imul(param._0, tenToThePowerOfPositive(exponentA - exponentMin | 0));
  var newMantissaB = Math.imul(param$1._0, tenToThePowerOfPositive(exponentB - exponentMin | 0));
  return [
          /* Decimal */{
            _0: newMantissaA,
            _1: exponentMin
          },
          /* Decimal */{
            _0: newMantissaB,
            _1: exponentMin
          },
          exponentMin
        ];
}

function add(lhs, rhs) {
  var match = normalize(lhs, rhs);
  return /* Decimal */{
          _0: match[0]._0 + match[1]._0 | 0,
          _1: match[2]
        };
}

function subtract(lhs, rhs) {
  var match = normalize(lhs, rhs);
  return /* Decimal */{
          _0: match[0]._0 - match[1]._0 | 0,
          _1: match[2]
        };
}

var $plus$dot$dot = add;

var $neg$dot$dot = subtract;

exports.make = make;
exports.fromInt = fromInt;
exports.show = show;
exports.tenToThePowerOfPositive = tenToThePowerOfPositive;
exports.normalize = normalize;
exports.add = add;
exports.$plus$dot$dot = $plus$dot$dot;
exports.subtract = subtract;
exports.$neg$dot$dot = $neg$dot$dot;
/* Relude__Relude_Int Not a pure module */
