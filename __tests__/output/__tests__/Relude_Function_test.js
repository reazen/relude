// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Caml_format = require("melange.runtime/caml_format.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_Function = require("relude/./Relude_Function.js");

var Type = {};

var StringArgument = {
  Type: Type
};

var FunctionWithStringArgument = Relude__Relude_Function.WithArgument({});

var $less$less = Relude__Relude_Function.Infix.$less$less;

var $great$great = Relude__Relude_Function.Infix.$great$great;

function f2(a, b) {
  return a + b | 0;
}

function f3(a, b, c) {
  return (a + b | 0) + c | 0;
}

function f4(a, b, c, d) {
  return ((a + b | 0) + c | 0) + d | 0;
}

function f5(a, b, c, d, e) {
  return (((a + b | 0) + c | 0) + d | 0) + e | 0;
}

function ft2(param) {
  return param[0] + param[1] | 0;
}

function ft3(param) {
  return (param[0] + param[1] | 0) + param[2] | 0;
}

function ft4(param) {
  return ((param[0] + param[1] | 0) + param[2] | 0) + param[3] | 0;
}

function ft5(param) {
  return (((param[0] + param[1] | 0) + param[2] | 0) + param[3] | 0) + param[4] | 0;
}

Jest.describe("Function", (function (param) {
        Jest.test("identity returns the input", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Relude__Relude_Function.identity(1)));
              }));
        Jest.test("const returns the first arg", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Relude__Relude_Function.$$const(1, 2)));
              }));
        Jest.test("flip", (function (param) {
                var formula = function (x, y) {
                  return x + (y << 1) | 0;
                };
                Jest.Expect.toBe(13, Jest.Expect.expect(13));
                return Jest.Expect.toBe(13, Jest.Expect.expect(Relude__Relude_Function.flip(formula, 5, 3)));
              }));
        Jest.test("compose combines functions from right to left", (function (param) {
                var plus5 = function (a) {
                  return a + 5 | 0;
                };
                var times3 = function (a) {
                  return Math.imul(a, 3);
                };
                return Jest.Expect.toBe(35, Jest.Expect.expect($less$less(plus5, times3, 10)));
              }));
        Jest.test("flipCompose combines functions from left to right", (function (param) {
                var plus5 = function (a) {
                  return a + 5 | 0;
                };
                var times3 = function (a) {
                  return Math.imul(a, 3);
                };
                return Jest.Expect.toBe(45, Jest.Expect.expect($great$great(plus5, times3, 10)));
              }));
        Jest.test("curry2", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Function.curry2(ft2, 1, 2)));
              }));
        Jest.test("curry3", (function (param) {
                return Jest.Expect.toEqual(6, Jest.Expect.expect(Relude__Relude_Function.curry3(ft3, 1, 2, 3)));
              }));
        Jest.test("curry4", (function (param) {
                return Jest.Expect.toEqual(10, Jest.Expect.expect(Relude__Relude_Function.curry4(ft4, 1, 2, 3, 4)));
              }));
        Jest.test("curry5", (function (param) {
                return Jest.Expect.toEqual(15, Jest.Expect.expect(Relude__Relude_Function.curry5(ft5, 1, 2, 3, 4, 5)));
              }));
        Jest.test("uncurry2", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Function.uncurry2(f2, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("uncurry3", (function (param) {
                return Jest.Expect.toEqual(6, Jest.Expect.expect(Relude__Relude_Function.uncurry3(f3, [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("uncurry4", (function (param) {
                return Jest.Expect.toEqual(10, Jest.Expect.expect(Relude__Relude_Function.uncurry4(f4, [
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("uncurry5", (function (param) {
                return Jest.Expect.toEqual(15, Jest.Expect.expect(Relude__Relude_Function.uncurry5(f5, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("map", (function (param) {
                var plus5 = function (a) {
                  return a + 5 | 0;
                };
                var times3 = function (a) {
                  return Math.imul(a, 3);
                };
                return Jest.Expect.toBe(35, Jest.Expect.expect(Relude__Relude_Function.map(plus5, times3, 10)));
              }));
        Jest.test("apply", (function (param) {
                var showResult = function (n, x) {
                  return "input " + (String(n) + (" yields " + x.toString()));
                };
                var cube = function (x) {
                  return Math.imul(Math.imul(x, x), x);
                };
                return Jest.Expect.toBe("input 5 yields 125", Jest.Expect.expect(Relude__Relude_Function.apply(showResult, cube, 5)));
              }));
        Jest.test("pure returns the first arg", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Relude__Relude_Function.pure(1, 2)));
              }));
        Jest.test("bind", (function (param) {
                var showResult = function (x, n) {
                  return "input " + (String(n) + (" yields " + x.toString()));
                };
                var cube = function (x) {
                  return Math.imul(Math.imul(x, x), x);
                };
                return Jest.Expect.toBe("input 5 yields 125", Jest.Expect.expect(Relude__Relude_Function.bind(cube, showResult, 5)));
              }));
        Jest.test("flatMap", (function (param) {
                var showResult = function (x, n) {
                  return "input " + (String(n) + (" yields " + x.toString()));
                };
                var cube = function (x) {
                  return Math.imul(Math.imul(x, x), x);
                };
                return Jest.Expect.toBe("input 5 yields 125", Jest.Expect.expect(Relude__Relude_Function.flatMap(showResult, cube)(5)));
              }));
        Jest.test("memoize0", (function (param) {
                var calls = {
                  contents: 0
                };
                var f = function (param) {
                  calls.contents = calls.contents + 1 | 0;
                  return String(calls.contents);
                };
                var memoized = Relude__Relude_Function.memoize0(f);
                var result1 = Curry._1(memoized, undefined);
                var result2 = Curry._1(memoized, undefined);
                var result3 = Curry._1(memoized, undefined);
                return Jest.Expect.toEqual([
                            1,
                            "1",
                            "1",
                            "1"
                          ], Jest.Expect.expect([
                                calls.contents,
                                result1,
                                result2,
                                result3
                              ]));
              }));
        Jest.test("memoize1", (function (param) {
                var calls = {
                  contents: /* [] */0
                };
                var f = function (i) {
                  calls.contents = {
                    hd: i,
                    tl: calls.contents
                  };
                  return String(i);
                };
                var memoized = Relude__Relude_Function.memoize1((function (prim) {
                        return String(prim);
                      }), f);
                var result1 = Curry._1(memoized, 11);
                var result2 = Curry._1(memoized, 11);
                var result3 = Curry._1(memoized, 22);
                var result4 = Curry._1(memoized, 22);
                var result5 = Curry._1(memoized, 33);
                var result6 = Curry._1(memoized, 33);
                return Jest.Expect.toEqual([
                            {
                              hd: 33,
                              tl: {
                                hd: 22,
                                tl: {
                                  hd: 11,
                                  tl: /* [] */0
                                }
                              }
                            },
                            "11",
                            "11",
                            "22",
                            "22",
                            "33",
                            "33"
                          ], Jest.Expect.expect([
                                calls.contents,
                                result1,
                                result2,
                                result3,
                                result4,
                                result5,
                                result6
                              ]));
              }));
        Jest.test("before", (function (param) {
                var calls = {
                  contents: 0
                };
                var f = function (param) {
                  calls.contents = calls.contents + 1 | 0;
                  return calls.contents;
                };
                var before = Relude__Relude_Function.before(3, f);
                var result1 = Curry._1(before, undefined);
                var result2 = Curry._1(before, undefined);
                var result3 = Curry._1(before, undefined);
                var result4 = Curry._1(before, undefined);
                var result5 = Curry._1(before, undefined);
                return Jest.Expect.toEqual([
                            3,
                            1,
                            2,
                            3,
                            3,
                            3
                          ], Jest.Expect.expect([
                                calls.contents,
                                result1,
                                result2,
                                result3,
                                result4,
                                result5
                              ]));
              }));
        Jest.test("after", (function (param) {
                var calls = {
                  contents: 0
                };
                var f = function (param) {
                  calls.contents = calls.contents + 1 | 0;
                  return calls.contents;
                };
                var after = Relude__Relude_Function.after(3, f);
                var result1 = Curry._1(after, undefined);
                var result2 = Curry._1(after, undefined);
                var result3 = Curry._1(after, undefined);
                var result4 = Curry._1(after, undefined);
                var result5 = Curry._1(after, undefined);
                return Jest.Expect.toEqual([
                            2,
                            undefined,
                            undefined,
                            undefined,
                            1,
                            2
                          ], Jest.Expect.expect([
                                calls.contents,
                                result1,
                                result2,
                                result3,
                                result4,
                                result5
                              ]));
              }));
        Jest.test("once", (function (param) {
                var calls = {
                  contents: 0
                };
                var f = function (param) {
                  calls.contents = calls.contents + 1 | 0;
                  return calls.contents;
                };
                var once = Relude__Relude_Function.once(f);
                var result1 = Curry._1(once, undefined);
                var result2 = Curry._1(once, undefined);
                var result3 = Curry._1(once, undefined);
                return Jest.Expect.toEqual([
                            1,
                            1,
                            1,
                            1
                          ], Jest.Expect.expect([
                                calls.contents,
                                result1,
                                result2,
                                result3
                              ]));
              }));
        Jest.test("wrap", (function (param) {
                var f = function (a) {
                  return String(Math.imul(a, 10));
                };
                var before = function (a) {
                  return a + 4 | 0;
                };
                var after = function (str) {
                  return str + "!";
                };
                var f$1 = function (param) {
                  return Relude__Relude_Function.wrap(before, after, f, param);
                };
                var result = f$1(22);
                return Jest.Expect.toEqual("260!", Jest.Expect.expect(result));
              }));
        Jest.test("negate", (function (param) {
                var f = function (str) {
                  return Relude__Relude_String.length(str) === 0;
                };
                var resultF = Relude__Relude_String.length("") === 0;
                var resultG = Relude__Relude_Function.negate(f, "");
                return Jest.Expect.toEqual([
                            true,
                            false
                          ], Jest.Expect.expect([
                                resultF,
                                resultG
                              ]));
              }));
        Jest.test("WithArgument", (function (param) {
                var plus5 = function (a) {
                  return a + 5 | 0;
                };
                var times3 = function (a) {
                  return Math.imul(Caml_format.caml_int_of_string(a), 3);
                };
                var actual = Curry._3(FunctionWithStringArgument.Infix.$less$$great, plus5, times3, "10");
                return Jest.Expect.toBe(35, Jest.Expect.expect(actual));
              }));
      }));

exports.StringArgument = StringArgument;
exports.FunctionWithStringArgument = FunctionWithStringArgument;
exports.$less$less = $less$less;
exports.$great$great = $great$great;
exports.f2 = f2;
exports.f3 = f3;
exports.f4 = f4;
exports.f5 = f5;
exports.ft2 = ft2;
exports.ft3 = ft3;
exports.ft4 = ft4;
exports.ft5 = ft5;
/* FunctionWithStringArgument Not a pure module */
