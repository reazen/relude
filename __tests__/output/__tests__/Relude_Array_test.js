// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Array = require("relude/./Relude_Array.js");
var Relude__Relude_Array_Instances = require("relude/array/Relude_Array_Instances.js");
var Relude__Relude_Array_Specializations = require("relude/array/Relude_Array_Specializations.js");

Jest.describe("Array", (function (param) {
        Jest.test("length empty array", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Array.length([])));
              }));
        Jest.test("length non-empty array", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Array.length([
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("isEmpty is true for empty array", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_Array.isEmpty([])));
              }));
        Jest.test("isEmpty is false for non-empty array", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_Array.isEmpty([1])));
              }));
        Jest.test("isNotEmpty is false for empty array", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_Array.isNotEmpty([])));
              }));
        Jest.test("isNotEmpty is true for non-empty array", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_Array.isNotEmpty([1])));
              }));
        Jest.test("pure creates a one-item array", (function (param) {
                return Jest.Expect.toEqual([123], Jest.Expect.expect(Relude__Relude_Array.pure(123)));
              }));
        Jest.test("repeat creates a array of n items", (function (param) {
                return Jest.Expect.toEqual([
                            "a",
                            "a",
                            "a"
                          ], Jest.Expect.expect(Relude__Relude_Array.repeat(3, "a")));
              }));
        Jest.test("makeWithIndex creates a array of n items using f", (function (param) {
                return Jest.Expect.toEqual([
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.makeWithIndex(4, (function (i) {
                                      return i + 2 | 0;
                                    }))));
              }));
        Jest.test("makeWithIndex with pattern matching fn", (function (param) {
                return Jest.Expect.toEqual([
                            "a",
                            "b",
                            "b"
                          ], Jest.Expect.expect(Relude__Relude_Array.makeWithIndex(3, (function (param) {
                                      if (param !== 0) {
                                        return "b";
                                      } else {
                                        return "a";
                                      }
                                    }))));
              }));
        Jest.test("makeWithIndex creates an empty array if given a negative count", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.makeWithIndex(-1, (function (i) {
                                      return i + 2 | 0;
                                    }))));
              }));
        Jest.test("concat", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4
                          ], Jest.Expect.expect(Relude__Relude_Array.concat([
                                    1,
                                    2
                                  ], [
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("cons", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.cons(1, [
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("uncons empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.uncons([])));
              }));
        Jest.test("uncons single item array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            []
                          ], Jest.Expect.expect(Relude__Relude_Array.uncons([1])));
              }));
        Jest.test("uncons multi item array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            [
                              2,
                              3
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.uncons([
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("prepend", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.prepend(1, [
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("append", (function (param) {
                return Jest.Expect.toEqual([
                            2,
                            3,
                            1
                          ], Jest.Expect.expect(Relude__Relude_Array.append(1, [
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("foldLeft", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Curry._3(Relude__Relude_Array.foldLeft, (function (acc, curr) {
                                      return Relude__Relude_Array.append(curr, acc);
                                    }), [], [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("foldLeft2", (function (param) {
                return Jest.Expect.toEqual(-6, Jest.Expect.expect(Curry._3(Relude__Relude_Array.foldLeft, (function (acc, item) {
                                      return acc - item | 0;
                                    }), 0, [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("foldRight", (function (param) {
                return Jest.Expect.toEqual([
                            5,
                            4,
                            3,
                            2,
                            1
                          ], Jest.Expect.expect(Curry._3(Relude__Relude_Array.foldRight, Relude__Relude_Array.append, [], [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("scanLeft", (function (param) {
                return Jest.Expect.toEqual([
                            [1],
                            [
                              1,
                              2
                            ],
                            [
                              1,
                              2,
                              3
                            ],
                            [
                              1,
                              2,
                              3,
                              4
                            ],
                            [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.scanLeft((function (acc, curr) {
                                      return Relude__Relude_Array.append(curr, acc);
                                    }), [], [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("scanRight", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              5,
                              4,
                              3,
                              2,
                              1
                            ],
                            [
                              5,
                              4,
                              3,
                              2
                            ],
                            [
                              5,
                              4,
                              3
                            ],
                            [
                              5,
                              4
                            ],
                            [5]
                          ], Jest.Expect.expect(Relude__Relude_Array.scanRight(Relude__Relude_Array.append, [], [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("at empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.at(0, [])));
              }));
        Jest.test("at Some", (function (param) {
                return Jest.Expect.toEqual(20, Jest.Expect.expect(Relude__Relude_Array.at(2, [
                                    0,
                                    10,
                                    20,
                                    30
                                  ])));
              }));
        Jest.test("at None", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.at(10, [
                                    0,
                                    10,
                                    20,
                                    30
                                  ])));
              }));
        Jest.test("setAt empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.setAt(0, "a", [])));
              }));
        Jest.test("setAt valid index in non-empty array", (function (param) {
                return Jest.Expect.toEqual([
                            "0",
                            "a",
                            "2"
                          ], Jest.Expect.expect(Relude__Relude_Array.setAt(1, "a", [
                                    "0",
                                    "1",
                                    "2"
                                  ])));
              }));
        Jest.test("setAt invalid index in non-empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.setAt(5, "a", [
                                    "0",
                                    "1",
                                    "2"
                                  ])));
              }));
        Jest.test("head empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.head([])));
              }));
        Jest.test("head single item array", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Array.head([1])));
              }));
        Jest.test("head multi-item array", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Array.head([
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("tail empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.tail([])));
              }));
        Jest.test("tail single item array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.tail([1])));
              }));
        Jest.test("tail multi-item array", (function (param) {
                return Jest.Expect.toEqual([
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.tail([
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("tailOrEmpty empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.tailOrEmpty([])));
              }));
        Jest.test("tailOrEmpty single item array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.tailOrEmpty([1])));
              }));
        Jest.test("tailOrEmpty multi-item array", (function (param) {
                return Jest.Expect.toEqual([
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.tailOrEmpty([
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("init empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.init([])));
              }));
        Jest.test("init single item array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.init([1])));
              }));
        Jest.test("init multi item array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.init([
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("initOrEmpty empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.initOrEmpty([])));
              }));
        Jest.test("initOrEmpty single item array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.initOrEmpty([1])));
              }));
        Jest.test("initOrEmpty multi item array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.initOrEmpty([
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("last empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.last([])));
              }));
        Jest.test("last single item array", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Array.last([1])));
              }));
        Jest.test("last multi item array", (function (param) {
                return Jest.Expect.toEqual(4, Jest.Expect.expect(Relude__Relude_Array.last([
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("take zero from empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.take(0, [])));
              }));
        Jest.test("take non-zero from empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.take(2, [])));
              }));
        Jest.test("take non-zero from short array", (function (param) {
                return Jest.Expect.toEqual([1], Jest.Expect.expect(Relude__Relude_Array.take(2, [1])));
              }));
        Jest.test("take non-zero from equal array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Array.take(2, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("take non-zero from long array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Array.take(2, [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("takeExactly zero from empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.takeExactly(0, [])));
              }));
        Jest.test("takeExactly non-zero from empty array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.takeExactly(2, [])));
              }));
        Jest.test("takeExactly non-zero from short array", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.takeExactly(2, [1])));
              }));
        Jest.test("takeExactly non-zero from equal array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Array.takeExactly(2, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("takeExactly non-zero from long array", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Array.takeExactly(2, [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("takeWhile empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.takeWhile((function (a) {
                                      return a < 2;
                                    }), [])));
              }));
        Jest.test("takeWhile array", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1
                          ], Jest.Expect.expect(Relude__Relude_Array.takeWhile((function (a) {
                                      return a < 2;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("takeWhile array condition never true", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.takeWhile((function (a) {
                                      return a < 0;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("takeWhile array condition never false", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.takeWhile((function (a) {
                                      return a < 10;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("drop zero from empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.drop(0, [])));
              }));
        Jest.test("drop some from short array ", (function (param) {
                return Jest.Expect.toEqual([2], Jest.Expect.expect(Relude__Relude_Array.drop(1, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("drop negative from short array ", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Array.drop(-1, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("drop some from equal array ", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.drop(2, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("drop some from long array ", (function (param) {
                return Jest.Expect.toEqual([
                            3,
                            4
                          ], Jest.Expect.expect(Relude__Relude_Array.drop(2, [
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("drop more from long array ", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.drop(5, [
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("dropExactly zero from empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.dropExactly(0, [])));
              }));
        Jest.test("dropExactly some from short array ", (function (param) {
                return Jest.Expect.toEqual([2], Jest.Expect.expect(Relude__Relude_Array.dropExactly(1, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("dropExactly some from equal array ", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.dropExactly(2, [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("dropExactly some from long array ", (function (param) {
                return Jest.Expect.toEqual([
                            3,
                            4
                          ], Jest.Expect.expect(Relude__Relude_Array.dropExactly(2, [
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("dropExactly more from long array ", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.dropExactly(5, [
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("dropWhile empty array", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.dropWhile((function (a) {
                                      return a < 2;
                                    }), [])));
              }));
        Jest.test("dropWhile array", (function (param) {
                return Jest.Expect.toEqual([
                            2,
                            1,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.dropWhile((function (a) {
                                      return a < 2;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    1,
                                    3
                                  ])));
              }));
        Jest.test("dropWhile array condition never true", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.dropWhile((function (a) {
                                      return a < 0;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("dropWhile array condition never false", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.dropWhile((function (a) {
                                      return a < 10;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("filter", (function (param) {
                return Jest.Expect.toEqual([
                            2,
                            4,
                            6,
                            8,
                            10,
                            10
                          ], Jest.Expect.expect(Relude__Relude_Array.filter((function (i) {
                                      return i % 2 === 0;
                                    }), [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9,
                                    10,
                                    9,
                                    10
                                  ])));
              }));
        Jest.test("filterWithIndex", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            3,
                            3,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.filterWithIndex((function (v, i) {
                                      if (i % 2 === 0) {
                                        return true;
                                      } else {
                                        return v === 3;
                                      }
                                    }), [
                                    1,
                                    3,
                                    3,
                                    4,
                                    5,
                                    6
                                  ])));
              }));
        Jest.test("filterNot", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.filterNot(function (x) {
                                      return x % 2 === 0;
                                    })([
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("filterNotWithIndex", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.filterNotWithIndex(function (param, i) {
                                      return i > 2;
                                    })([
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("mapOption (keep some)", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4
                          ], Jest.Expect.expect(Relude__Relude_Array.mapOption(Relude__Relude_Int.fromString, [
                                    "1",
                                    "a",
                                    "2",
                                    "3",
                                    "b",
                                    "c",
                                    "4",
                                    "d"
                                  ])));
              }));
        Jest.test("mapOption (keep none)", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.mapOption(Relude__Relude_Int.fromString, [
                                    "a",
                                    "b"
                                  ])));
              }));
        Jest.test("catOption", (function (param) {
                return Jest.Expect.toEqual(["a"], Jest.Expect.expect(Relude__Relude_Array.catOption([
                                    "a",
                                    undefined,
                                    undefined
                                  ])));
              }));
        Jest.test("find not found", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_Array.find, (function (a) {
                                      return a === 3;
                                    }), [
                                    0,
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("find found", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._2(Relude__Relude_Array.find, (function (a) {
                                      return a === 2;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("findWithIndex", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._2(Relude__Relude_Array.findWithIndex, (function (a, i) {
                                      if (a === 3) {
                                        return true;
                                      } else {
                                        return i === 2;
                                      }
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("partition", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              0,
                              2,
                              4
                            ],
                            [
                              1,
                              3,
                              5
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.partition((function (a) {
                                      return a % 2 === 0;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("splitAt", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              0,
                              1,
                              2
                            ],
                            [
                              3,
                              4,
                              5
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.splitAt(3, [
                                    0,
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("splitAt (end of array)", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              0,
                              1,
                              2
                            ],
                            []
                          ], Jest.Expect.expect(Relude__Relude_Array.splitAt(3, [
                                    0,
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("splitAt (negative index)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.splitAt(-1, [])));
              }));
        Jest.test("splitAt (index too high)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Array.splitAt(2, [1])));
              }));
        Jest.test("prependToAll", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            0,
                            0,
                            1,
                            0,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Array.prependToAll(0, [
                                    0,
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("prependToAll (empty array)", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.prependToAll(0, [])));
              }));
        Jest.test("intersperse", (function (param) {
                return Jest.Expect.toEqual([
                            "a",
                            ",",
                            "b",
                            ",",
                            "c"
                          ], Jest.Expect.expect(Relude__Relude_Array.intersperse(",", [
                                    "a",
                                    "b",
                                    "c"
                                  ])));
              }));
        Jest.test("intersperse (empty array)", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.intersperse(",", [])));
              }));
        Jest.test("replicate", (function (param) {
                return Jest.Expect.toEqual([
                            "a",
                            "b",
                            "c",
                            "a",
                            "b",
                            "c",
                            "a",
                            "b",
                            "c"
                          ], Jest.Expect.expect(Relude__Relude_Array.replicate(3, [
                                    "a",
                                    "b",
                                    "c"
                                  ])));
              }));
        Jest.test("replicate zero", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.replicate(0, [
                                    "a",
                                    "b",
                                    "c"
                                  ])));
              }));
        Jest.test("replicate negative", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Array.replicate(-3, [
                                    "a",
                                    "b",
                                    "c"
                                  ])));
              }));
        Jest.test("zip same length array", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              1,
                              "4"
                            ],
                            [
                              2,
                              "5"
                            ],
                            [
                              3,
                              "6"
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.zip([
                                    1,
                                    2,
                                    3
                                  ], [
                                    "4",
                                    "5",
                                    "6"
                                  ])));
              }));
        Jest.test("zip different length array", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              1,
                              "4"
                            ],
                            [
                              2,
                              "5"
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.zip([
                                    1,
                                    2,
                                    3
                                  ], [
                                    "4",
                                    "5"
                                  ])));
              }));
        Jest.test("zipWith", (function (param) {
                return Jest.Expect.toEqual([
                            5,
                            7,
                            9
                          ], Jest.Expect.expect(Relude__Relude_Array.zipWith((function (a, b) {
                                      return a + b | 0;
                                    }), [
                                    1,
                                    2,
                                    3
                                  ], [
                                    4,
                                    5,
                                    6
                                  ])));
              }));
        Jest.test("zipWithIndex", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              "a",
                              0
                            ],
                            [
                              "b",
                              1
                            ],
                            [
                              "c",
                              2
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.zipWithIndex([
                                    "a",
                                    "b",
                                    "c"
                                  ])));
              }));
        Jest.test("unzip", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              1,
                              3,
                              5
                            ],
                            [
                              2,
                              4,
                              6
                            ]
                          ], Jest.Expect.expect(Relude__Relude_Array.unzip([
                                    [
                                      1,
                                      2
                                    ],
                                    [
                                      3,
                                      4
                                    ],
                                    [
                                      5,
                                      6
                                    ]
                                  ])));
              }));
        Jest.test("sortWithInt", (function (param) {
                return Jest.Expect.toEqual([
                            -1,
                            0,
                            1,
                            2,
                            3,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.sortWithInt(Relude__Relude_Int.compareAsInt, [
                                    2,
                                    0,
                                    1,
                                    3,
                                    5,
                                    -1
                                  ])));
              }));
        Jest.test("sortBy", (function (param) {
                return Jest.Expect.toEqual([
                            -1,
                            0,
                            1,
                            2,
                            3,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.sortBy(Relude__Relude_Int.compare, [
                                    2,
                                    0,
                                    1,
                                    3,
                                    5,
                                    -1
                                  ])));
              }));
        Jest.test("sort", (function (param) {
                return Jest.Expect.toEqual([
                            -1,
                            0,
                            1,
                            2,
                            3,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.sort(Relude__Relude_Int.Ord, [
                                    2,
                                    0,
                                    1,
                                    3,
                                    5,
                                    -1
                                  ])));
              }));
        Jest.test("reverse", (function (param) {
                return Jest.Expect.toEqual([
                            5,
                            4,
                            3,
                            2,
                            1
                          ], Jest.Expect.expect(Relude__Relude_Array.reverse([
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("containsBy false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._3(Relude__Relude_Array.containsBy, Relude__Relude_Int.eq, 10, [
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("indexOfBy success", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._3(Relude__Relude_Array.indexOfBy, Relude__Relude_Int.eq, 30, [
                                    0,
                                    10,
                                    20,
                                    30,
                                    40
                                  ])));
              }));
        Jest.test("indexOfBy failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._3(Relude__Relude_Array.indexOfBy, Relude__Relude_Int.eq, 500, [
                                    0,
                                    10,
                                    20,
                                    30,
                                    40
                                  ])));
              }));
        Jest.test("containsBy true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_Array.containsBy, Relude__Relude_Int.eq, 3, [
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("any empty", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Array.any, (function (a) {
                                      return a > 2;
                                    }), [])));
              }));
        Jest.test("any true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Array.any, (function (a) {
                                      return a > 2;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("any false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Array.any, (function (a) {
                                      return a > 10;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("all empty", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Array.all, (function (a) {
                                      return a > 2;
                                    }), [])));
              }));
        Jest.test("all true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Array.all, (function (a) {
                                      return a > -1;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("all false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Array.all, (function (a) {
                                      return a < 3;
                                    }), [
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("distinctBy", (function (param) {
                return Jest.Expect.toEqual([
                            6,
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.distinctBy(Relude__Relude_Int.eq, [
                                    6,
                                    1,
                                    1,
                                    2,
                                    1,
                                    3,
                                    2,
                                    3,
                                    2,
                                    4,
                                    5,
                                    5
                                  ])));
              }));
        Jest.test("replaceAt", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            100,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.replaceAt(2, 100, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("insertAt first", (function (param) {
                return Jest.Expect.toEqual([
                            100,
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.insertAt(0, 100, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("insertAt within range", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            100,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.insertAt(2, 100, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("insertAt last", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5,
                            100
                          ], Jest.Expect.expect(Relude__Relude_Array.insertAt(5, 100, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("insertAt out of range", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.insertAt(6, 100, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("updateAt within range", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            4,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.updateAt(2, (function (x) {
                                      return x + 1 | 0;
                                    }), [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("updateAt out of range", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.updateAt(6, (function (x) {
                                      return x + 1 | 0;
                                    }), [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("swapAt within range", (function (param) {
                return Jest.Expect.toEqual([
                            5,
                            2,
                            3,
                            4,
                            1
                          ], Jest.Expect.expect(Relude__Relude_Array.swapAt(0, 4, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("swapAt out of range", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.swapAt(0, 5, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("removeAt within range", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.removeAt(1, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("removeAt out of range", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Relude__Relude_Array.removeAt(5, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("map", (function (param) {
                return Jest.Expect.toEqual([
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_Array.map, (function (a) {
                                      return a + 2 | 0;
                                    }), [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("mapWithIndex", (function (param) {
                return Jest.Expect.toEqual([
                            "a0",
                            "b1",
                            "c2"
                          ], Jest.Expect.expect(Relude__Relude_Array.mapWithIndex((function (v, i) {
                                      return v + String(i);
                                    }), [
                                    "a",
                                    "b",
                                    "c"
                                  ])));
              }));
        Jest.test("apply", (function (param) {
                return Jest.Expect.toEqual([
                            3,
                            4,
                            5,
                            3,
                            6,
                            9
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_Array.apply, [
                                    (function (a) {
                                        return a + 2 | 0;
                                      }),
                                    (function (a) {
                                        return Math.imul(a, 3);
                                      })
                                  ], [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("bind", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            1,
                            2,
                            2,
                            3,
                            3
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_Array.bind, [
                                    1,
                                    2,
                                    3
                                  ], (function (a) {
                                      return [
                                              a,
                                              a
                                            ];
                                    }))));
              }));
        Jest.test("flatten", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Curry._1(Relude__Relude_Array.flatten, [
                                    [
                                      1,
                                      2,
                                      3
                                    ],
                                    [
                                      4,
                                      5
                                    ]
                                  ])));
              }));
        Jest.test("fromList", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Array.fromList({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("toList", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_Array.toList([
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("eqBy returns true if array items are equal", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_Array.eqBy(Relude__Relude_Int.eq, [
                                    1,
                                    2,
                                    3
                                  ], [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("eqBy returns false if array items are not equal", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_Array.eqBy(Relude__Relude_Int.eq, [
                                    1,
                                    2,
                                    3
                                  ], [
                                    1,
                                    2,
                                    4
                                  ])));
              }));
        Jest.test("eqBy returns false if array are of different sizes", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_Array.eqBy(Relude__Relude_Int.eq, [1], [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("eq returns true if array items are equal", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_Array.eq(Relude__Relude_Int.Eq, [
                                    1,
                                    2,
                                    3
                                  ], [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("eq returns false if array items are not equal", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_Array.eq(Relude__Relude_Int.Eq, [
                                    1,
                                    2,
                                    3
                                  ], [
                                    1,
                                    2,
                                    4
                                  ])));
              }));
        Jest.test("Array.String.joinWith", (function (param) {
                return Jest.Expect.toEqual("a, b, c", Jest.Expect.expect(Curry._2(Relude__Relude_Array_Specializations.$$String.joinWith, ", ", [
                                    "a",
                                    "b",
                                    "c"
                                  ])));
              }));
        Jest.test("showBy", (function (param) {
                return Jest.Expect.toEqual("[1, 2, 3]", Jest.Expect.expect(Relude__Relude_Array.showBy((function (prim) {
                                      return String(prim);
                                    }), [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("alt", (function (param) {
                return Jest.Expect.toEqual([
                            "a",
                            "b",
                            "c"
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_Array_Instances.Alt.alt, [
                                    "a",
                                    "b"
                                  ], ["c"])));
              }));
        Jest.test("<|> is associative", (function (param) {
                var $less$pipe$great = Relude__Relude_Array.Infix.$less$pipe$great;
                return Jest.Expect.toEqual(Curry._2($less$pipe$great, [
                                0,
                                1
                              ], Curry._2($less$pipe$great, [
                                    2,
                                    3
                                  ], [
                                    4,
                                    5
                                  ])), Jest.Expect.expect(Curry._2($less$pipe$great, Curry._2($less$pipe$great, [
                                        0,
                                        1
                                      ], [
                                        2,
                                        3
                                      ]), [
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("void", (function (param) {
                return Jest.Expect.toEqual([
                            undefined,
                            undefined,
                            undefined
                          ], Jest.Expect.expect(Curry._1(Relude__Relude_Array.$$void, [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("flap", (function (param) {
                return Jest.Expect.toEqual([
                            6,
                            7,
                            8
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_Array.flap, [
                                    (function (a) {
                                        return a + 1 | 0;
                                      }),
                                    (function (a) {
                                        return a + 2 | 0;
                                      }),
                                    (function (a) {
                                        return a + 3 | 0;
                                      })
                                  ], 5)));
              }));
        Jest.test("map2", (function (param) {
                return Jest.Expect.toEqual([
                            4,
                            5,
                            5,
                            6
                          ], Jest.Expect.expect(Curry._3(Relude__Relude_Array.map2, (function (a, b) {
                                      return a + b | 0;
                                    }), [
                                    1,
                                    2
                                  ], [
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("map3", (function (param) {
                return Jest.Expect.toEqual([
                            14,
                            24,
                            15,
                            25,
                            15,
                            25,
                            16,
                            26
                          ], Jest.Expect.expect(Curry._4(Relude__Relude_Array.map3, (function (a, b, c) {
                                      return (a + b | 0) + c | 0;
                                    }), [
                                    1,
                                    2
                                  ], [
                                    3,
                                    4
                                  ], [
                                    10,
                                    20
                                  ])));
              }));
        Jest.test("map4", (function (param) {
                return Jest.Expect.toEqual([
                            114,
                            214,
                            124,
                            224,
                            115,
                            215,
                            125,
                            225,
                            115,
                            215,
                            125,
                            225,
                            116,
                            216,
                            126,
                            226
                          ], Jest.Expect.expect(Curry._5(Relude__Relude_Array.map4, (function (a, b, c, d) {
                                      return ((a + b | 0) + c | 0) + d | 0;
                                    }), [
                                    1,
                                    2
                                  ], [
                                    3,
                                    4
                                  ], [
                                    10,
                                    20
                                  ], [
                                    100,
                                    200
                                  ])));
              }));
        Jest.test("chunk", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              1,
                              2,
                              3
                            ],
                            [
                              4,
                              5,
                              6
                            ],
                            [
                              7,
                              8,
                              9
                            ],
                            [
                              10,
                              11,
                              12
                            ],
                            [13]
                          ], Jest.Expect.expect(Relude__Relude_Array.chunk(3, [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9,
                                    10,
                                    11,
                                    12,
                                    13
                                  ])));
              }));
        Jest.test("chunk (empty array)", (function (param) {
                return Jest.Expect.toEqual([[]], Jest.Expect.expect(Relude__Relude_Array.chunk(3, [])));
              }));
        Jest.test("chunk (size = 0)", (function (param) {
                return Jest.Expect.toEqual([[
                              1,
                              2,
                              3
                            ]], Jest.Expect.expect(Relude__Relude_Array.chunk(0, [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
      }));

/*  Not a pure module */
