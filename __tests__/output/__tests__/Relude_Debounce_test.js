// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Debounce = require("relude/./Relude_Debounce.js");

Jest.describe("Debounce", (function (param) {
        Jest.test("debounce (leading=false)", (function (param) {
                jest.useFakeTimers();
                var runCount = {
                  contents: 0
                };
                var f = function (param) {
                  runCount.contents = runCount.contents + 1 | 0;
                };
                var debounced = Relude__Relude_Debounce.debounce(200, false, f);
                var isScheduled1 = Curry._1(debounced.isScheduled, undefined);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                var isScheduled2 = Curry._1(debounced.isScheduled, undefined);
                jest.advanceTimersByTime(100);
                var runCount1 = runCount.contents;
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                var isScheduled3 = Curry._1(debounced.isScheduled, undefined);
                jest.advanceTimersByTime(199);
                var runCount2 = runCount.contents;
                jest.advanceTimersByTime(1);
                var runCount3 = runCount.contents;
                var isScheduled4 = Curry._1(debounced.isScheduled, undefined);
                return Jest.Expect.toEqual([
                            0,
                            0,
                            1,
                            false,
                            true,
                            true,
                            false
                          ], Jest.Expect.expect([
                                runCount1,
                                runCount2,
                                runCount3,
                                isScheduled1,
                                isScheduled2,
                                isScheduled3,
                                isScheduled4
                              ]));
              }));
        Jest.test("debounce (leading=true)", (function (param) {
                jest.useFakeTimers();
                var runCount = {
                  contents: 0
                };
                var f = function (param) {
                  runCount.contents = runCount.contents + 1 | 0;
                };
                var debounced = Relude__Relude_Debounce.debounce(200, true, f);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                jest.advanceTimersByTime(100);
                var runCount1 = runCount.contents;
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                jest.advanceTimersByTime(199);
                var runCount2 = runCount.contents;
                jest.advanceTimersByTime(1);
                var runCount3 = runCount.contents;
                return Jest.Expect.toEqual([
                            1,
                            1,
                            2
                          ], Jest.Expect.expect([
                                runCount1,
                                runCount2,
                                runCount3
                              ]));
              }));
        Jest.test("cancel", (function (param) {
                jest.useFakeTimers();
                var runCount = {
                  contents: 0
                };
                var f = function (param) {
                  runCount.contents = runCount.contents + 1 | 0;
                };
                var debounced = Relude__Relude_Debounce.debounce(200, false, f);
                var runCount1 = runCount.contents;
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                jest.advanceTimersByTime(100);
                var runCount2 = runCount.contents;
                Curry._1(debounced.cancel, undefined);
                jest.advanceTimersByTime(300);
                var runCount3 = runCount.contents;
                return Jest.Expect.toEqual([
                            0,
                            0,
                            0
                          ], Jest.Expect.expect([
                                runCount1,
                                runCount2,
                                runCount3
                              ]));
              }));
        Jest.test("flush", (function (param) {
                jest.useFakeTimers();
                var runCount = {
                  contents: 0
                };
                var f = function (param) {
                  runCount.contents = runCount.contents + 1 | 0;
                };
                var debounced = Relude__Relude_Debounce.debounce(200, false, f);
                var runCount1 = runCount.contents;
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                Curry._1(debounced.f, undefined);
                jest.advanceTimersByTime(100);
                var runCount2 = runCount.contents;
                Curry._1(debounced.flush, undefined);
                var runCount3 = runCount.contents;
                jest.advanceTimersByTime(300);
                var runCount4 = runCount.contents;
                return Jest.Expect.toEqual([
                            0,
                            0,
                            1,
                            1
                          ], Jest.Expect.expect([
                                runCount1,
                                runCount2,
                                runCount3,
                                runCount4
                              ]));
              }));
      }));

/*  Not a pure module */
