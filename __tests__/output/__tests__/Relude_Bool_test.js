// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Bool = require("relude/./Relude_Bool.js");

Jest.describe("Bool", (function (param) {
        Jest.testAll("ifElse", {
              hd: [
                true,
                "yes"
              ],
              tl: {
                hd: [
                  false,
                  "no"
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Bool.ifElse((function (param) {
                                      return "yes";
                                    }), (function (param) {
                                      return "no";
                                    }), param[0])));
              }));
        Jest.testAll("inverse", {
              hd: [
                true,
                false
              ],
              tl: {
                hd: [
                  false,
                  true
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Bool.inverse(param[0])));
              }));
        Jest.testAll("and_", {
              hd: [
                true,
                true,
                true
              ],
              tl: {
                hd: [
                  true,
                  false,
                  false
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    false
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      false
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.and_(param[0], param[1])));
              }));
        Jest.testAll("or_", {
              hd: [
                true,
                true,
                true
              ],
              tl: {
                hd: [
                  true,
                  false,
                  true
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    true
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      false
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.or_(param[0], param[1])));
              }));
        Jest.testAll("nand", {
              hd: [
                true,
                true,
                false
              ],
              tl: {
                hd: [
                  true,
                  false,
                  true
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    true
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      true
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.nand(param[0], param[1])));
              }));
        Jest.testAll("nor_", {
              hd: [
                true,
                true,
                false
              ],
              tl: {
                hd: [
                  true,
                  false,
                  false
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    false
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      true
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.nor(param[0], param[1])));
              }));
        Jest.testAll("xor", {
              hd: [
                true,
                true,
                false
              ],
              tl: {
                hd: [
                  true,
                  false,
                  true
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    true
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      false
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.xor(param[0], param[1])));
              }));
        Jest.testAll("xnor", {
              hd: [
                true,
                true,
                true
              ],
              tl: {
                hd: [
                  true,
                  false,
                  false
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    false
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      true
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.xnor(param[0], param[1])));
              }));
        Jest.testAll("implies", {
              hd: [
                true,
                true,
                true
              ],
              tl: {
                hd: [
                  true,
                  false,
                  false
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    true
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      true
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.implies(param[0], param[1])));
              }));
        Jest.testAll("eq", {
              hd: [
                true,
                true,
                true
              ],
              tl: {
                hd: [
                  true,
                  false,
                  false
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    false
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      true
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.eq(param[0], param[1])));
              }));
        Jest.testAll("compare", {
              hd: [
                true,
                true,
                "equal_to"
              ],
              tl: {
                hd: [
                  true,
                  false,
                  "greater_than"
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    "less_than"
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      "equal_to"
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Bool.compare(param[0], param[1])));
              }));
        Jest.testAll("show", {
              hd: [
                true,
                "true"
              ],
              tl: {
                hd: [
                  false,
                  "false"
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Bool.show(param[0])));
              }));
      }));

Jest.describe("Bool Conjuntive", (function (param) {
        Jest.testAll("append", {
              hd: [
                true,
                true,
                true
              ],
              tl: {
                hd: [
                  true,
                  false,
                  false
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    false
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      false
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Curry._2(Relude__Relude_Bool.Conjunctive.Magma.append, param[0], param[1])));
              }));
      }));

Jest.describe("Bool Disjunctive", (function (param) {
        Jest.testAll("append", {
              hd: [
                true,
                true,
                true
              ],
              tl: {
                hd: [
                  true,
                  false,
                  true
                ],
                tl: {
                  hd: [
                    false,
                    true,
                    true
                  ],
                  tl: {
                    hd: [
                      false,
                      false,
                      false
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Curry._2(Relude__Relude_Bool.Disjunctive.Magma.append, param[0], param[1])));
              }));
      }));

Jest.describe("Bool Bounded", (function (param) {
        Jest.test("top", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Bool.Bounded.top));
              }));
        Jest.test("bottom", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Bool.Bounded.bottom));
              }));
      }));

Jest.describe("Bool Enum", (function (param) {
        Jest.testAll("pred", {
              hd: [
                true,
                false
              ],
              tl: {
                hd: [
                  false,
                  undefined
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Bool.Enum.pred(param[0])));
              }));
        Jest.testAll("succ", {
              hd: [
                true,
                undefined
              ],
              tl: {
                hd: [
                  false,
                  true
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Bool.Enum.succ(param[0])));
              }));
      }));

Jest.describe("Bool BoundedEnum", (function (param) {
        Jest.test("cardinality", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Relude__Relude_Bool.BoundedEnum.cardinality));
              }));
        Jest.testAll("fromEnum", {
              hd: [
                true,
                1
              ],
              tl: {
                hd: [
                  false,
                  0
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Bool.BoundedEnum.fromEnum(param[0])));
              }));
        Jest.testAll("toEnum", {
              hd: [
                1,
                true
              ],
              tl: {
                hd: [
                  0,
                  false
                ],
                tl: {
                  hd: [
                    2,
                    undefined
                  ],
                  tl: {
                    hd: [
                      -1,
                      undefined
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Bool.BoundedEnum.toEnum(param[0])));
              }));
      }));

/*  Not a pure module */
