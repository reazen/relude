// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_IO = require("relude/./Relude_IO.js");
var Relude__Relude_ReaderT = require("relude/./Relude_ReaderT.js");

var testEnv = {
  intValue: 42,
  stringValue: "abc"
};

var Reader = Relude__Relude_ReaderT.Reader.WithEnv({});

Jest.describe("Reader", (function (param) {
        Jest.test("make", (function (param) {
                return Jest.Expect.toEqual(84, Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._1(Reader.make, (function (r) {
                                          return (r.intValue << 1);
                                        })))));
              }));
        Jest.test("ask", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._2(Reader.map, (function (a) {
                                          return a.intValue;
                                        }), Reader.ask))));
              }));
        Jest.test("asks", (function (param) {
                return Jest.Expect.toEqual(840, Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._2(Reader.map, (function (a) {
                                          return Math.imul(a, 10);
                                        }), Curry._1(Reader.asks, (function (r) {
                                              return (r.intValue << 1);
                                            }))))));
              }));
        Jest.test("local", (function (param) {
                return Jest.Expect.toEqual("84abc!", Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._2(Reader.local, (function (r) {
                                          return {
                                                  intValue: (r.intValue << 1),
                                                  stringValue: r.stringValue + "!"
                                                };
                                        }), Curry._2(Reader.map, (function (a) {
                                              return String(a.intValue) + a.stringValue;
                                            }), Reader.ask)))));
              }));
        Jest.test("map", (function (param) {
                return Jest.Expect.toEqual(84, Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._2(Reader.map, (function (a) {
                                          return (a << 1);
                                        }), Curry._1(Reader.pure, 42)))));
              }));
        Jest.test("apply", (function (param) {
                return Jest.Expect.toEqual(3528, Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._2(Reader.apply, Curry._1(Reader.make, (function (r, a) {
                                              return (Math.imul(a, r.intValue) << 1);
                                            })), Curry._1(Reader.pure, 42)))));
              }));
        Jest.test("pure", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._1(Reader.pure, 42))));
              }));
        Jest.test("flatMap", (function (param) {
                return Jest.Expect.toEqual(1764, Jest.Expect.expect(Curry._2(Reader.runReaderT, testEnv, Curry._2(Reader.flatMap, (function (a) {
                                          return Curry._1(Reader.make, (function (r) {
                                                        return Math.imul(r.intValue, a);
                                                      }));
                                        }), Curry._1(Reader.pure, 42)))));
              }));
      }));

var IOE = Relude__Relude_IO.WithError({});

var ReaderIOE = Relude__Relude_ReaderT.WithMonadAndEnv(IOE.Monad, {});

var $less$$great = ReaderIOE.Infix.$less$$great;

var $less$$$great = ReaderIOE.Infix.$less$$$great;

var $great$great$eq = ReaderIOE.Infix.$great$great$eq;

Jest.describe("Reader IO", (function (param) {
        Jest.testAsync("test flow", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, assertion._0);
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._2(IOE.map, (function (a) {
                            return Jest.Expect.toEqual("-42abcsemi", Jest.Expect.expect(a));
                          }), Curry._2(ReaderIOE.runReaderT, testEnv, Curry._2(ReaderIOE.semiflatMap, (function (c) {
                                    return Curry._1(IOE.pure, c + "semi");
                                  }), Curry._2($great$great$eq, ReaderIOE.ask, (function (env) {
                                        return Curry._2($less$$$great, Curry._2($less$$$great, Curry._1(ReaderIOE.pure, Math.imul(-1, env.intValue)), (function (prim) {
                                                          return String(prim);
                                                        })), (function (a) {
                                                      return a + env.stringValue;
                                                    }));
                                      }))))));
              }));
      }));

exports.testEnv = testEnv;
exports.Reader = Reader;
exports.IOE = IOE;
exports.ReaderIOE = ReaderIOE;
exports.$less$$great = $less$$great;
exports.$less$$$great = $less$$$great;
exports.$great$great$eq = $great$great$eq;
/* Reader Not a pure module */
