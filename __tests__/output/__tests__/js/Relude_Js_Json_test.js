// Generated by Melange
'use strict';

var Jest = require("../../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Js_dict = require("melange.belt/./js_dict.js");
var Caml_option = require("melange.runtime/caml_option.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_Js_Json = require("relude/js/Relude_Js_Json.js");
var Relude__Relude_NonEmpty = require("relude/./Relude_NonEmpty.js");
var Relude__Relude_Validation = require("relude/./Relude_Validation.js");

function make(a, b, c, d, e, f, g) {
  return {
          a: a,
          b: b,
          c: c,
          d: d,
          e: e,
          f: f,
          g: g
        };
}

var MyType = {
  make: make
};

Jest.describe("Json", (function (param) {
        Jest.test("show", (function (param) {
                return Jest.Expect.toEqual("{\n    \"a\": true,\n    \"b\": false\n}", Jest.Expect.expect(Relude__Relude_Js_Json.show(4, Relude__Relude_Js_Json.fromDictOfJson(Js_dict.fromList({
                                            hd: [
                                              "a",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                            ],
                                            tl: {
                                              hd: [
                                                "b",
                                                Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, false)
                                              ],
                                              tl: /* [] */0
                                            }
                                          })))));
              }));
        Jest.test("isNull", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Js_Json.isNull(Relude__Relude_Js_Json.DSL.JE.$$null)));
              }));
        Jest.test("isBool", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Js_Json.isBool(Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true))));
              }));
        Jest.test("isString", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Js_Json.isString(Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"))));
              }));
        Jest.test("isNumber", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Js_Json.isNumber(Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 1.23))));
              }));
        Jest.test("isObject", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Js_Json.isObject(Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "hi",
                                          Relude__Relude_Js_Json.fromFloat(1.23)
                                        ],
                                        tl: /* [] */0
                                      }))));
              }));
        Jest.test("isArray", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Js_Json.isArray(Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Relude__Relude_Js_Json.fromInt(42),
                                        tl: {
                                          hd: Relude__Relude_Js_Json.fromString("hi"),
                                          tl: /* [] */0
                                        }
                                      }))));
              }));
        Jest.test("arrayOfDict", (function (param) {
                return Jest.Expect.toEqual("[{\"a\":true}]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.arrayOfDict, [Js_dict.fromList({
                                              hd: [
                                                "a",
                                                Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                              ],
                                              tl: /* [] */0
                                            })]))));
              }));
        Jest.test("listOfDict", (function (param) {
                return Jest.Expect.toEqual("[{\"a\":true}]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfDict, {
                                        hd: Js_dict.fromList({
                                              hd: [
                                                "a",
                                                Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                              ],
                                              tl: /* [] */0
                                            }),
                                        tl: /* [] */0
                                      }))));
              }));
        Jest.test("toNull Some", (function (param) {
                return Jest.Expect.toEqual(Caml_option.some(undefined), Jest.Expect.expect(Relude__Relude_Js_Json.toNull(Relude__Relude_Js_Json.DSL.JE.$$null)));
              }));
        Jest.test("toNull None", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Js_Json.toNull(Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true))));
              }));
        Jest.test("toArrayOfJsonOrElse ok", (function (param) {
                return Jest.Expect.toEqual("[{\"a\":true}]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.array, Relude__Relude_Js_Json.toArrayOfJsonOrElse([Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, false)], Curry._1(Relude__Relude_Js_Json.DSL.JE.arrayOfDict, [Js_dict.fromList({
                                                      hd: [
                                                        "a",
                                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                                      ],
                                                      tl: /* [] */0
                                                    })]))))));
              }));
        Jest.test("toArrayOfJsonOrElse error", (function (param) {
                return Jest.Expect.toEqual("[false]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.array, Relude__Relude_Js_Json.toArrayOfJsonOrElse([Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, false)], Curry._1(Relude__Relude_Js_Json.DSL.JE.arrayOfDict, ""))))));
              }));
        Jest.test("toArrayOfJsonOrEmpty ok", (function (param) {
                return Jest.Expect.toEqual("[{\"a\":true}]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.array, Relude__Relude_Js_Json.toArrayOfJsonOrEmpty(Curry._1(Relude__Relude_Js_Json.DSL.JE.arrayOfDict, [Js_dict.fromList({
                                                      hd: [
                                                        "a",
                                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                                      ],
                                                      tl: /* [] */0
                                                    })]))))));
              }));
        Jest.test("toArrayOfJsonOrEmpty error", (function (param) {
                return Jest.Expect.toEqual("[]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.array, Relude__Relude_Js_Json.toArrayOfJsonOrEmpty(Curry._1(Relude__Relude_Js_Json.DSL.JE.arrayOfDict, ""))))));
              }));
        Jest.test("toListOfJson some", (function (param) {
                return Jest.Expect.toEqual("[{\"a\":true}]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, Relude__Relude_Option.getOrThrow(Relude__Relude_Js_Json.toListOfJson(Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfDict, {
                                                    hd: Js_dict.fromList({
                                                          hd: [
                                                            "a",
                                                            Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                                          ],
                                                          tl: /* [] */0
                                                        }),
                                                    tl: /* [] */0
                                                  })))))));
              }));
        Jest.test("toListOfJson none", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Js_Json.toListOfJson("")));
              }));
        Jest.test("toListOfJsonOrElse some", (function (param) {
                return Jest.Expect.toEqual("[{\"a\":true}]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, Relude__Relude_Js_Json.toListOfJsonOrElse({
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, false),
                                            tl: /* [] */0
                                          }, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfDict, {
                                                hd: Js_dict.fromList({
                                                      hd: [
                                                        "a",
                                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                                      ],
                                                      tl: /* [] */0
                                                    }),
                                                tl: /* [] */0
                                              }))))));
              }));
        Jest.test("toListOfJsonOrElse none", (function (param) {
                return Jest.Expect.toEqual("[false]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, Relude__Relude_Js_Json.toListOfJsonOrElse({
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, false),
                                            tl: /* [] */0
                                          }, "")))));
              }));
        Jest.test("toDictOfJsonOrElse some", (function (param) {
                return Jest.Expect.toEqual(Js_dict.fromList({
                                hd: [
                                  "a",
                                  Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                ],
                                tl: /* [] */0
                              }), Jest.Expect.expect(Relude__Relude_Js_Json.toDictOfJsonOrElse({}, Curry._1(Relude__Relude_Js_Json.DSL.JE.dict, Js_dict.fromList({
                                            hd: [
                                              "a",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                            ],
                                            tl: /* [] */0
                                          })))));
              }));
        Jest.test("toDictOfJsonOrElse none", (function (param) {
                return Jest.Expect.toEqual({}, Jest.Expect.expect(Relude__Relude_Js_Json.toDictOfJsonOrElse({}, Curry._1(Relude__Relude_Js_Json.DSL.JE.dict, ""))));
              }));
        Jest.test("toDictOfJsonOrEmpty some", (function (param) {
                return Jest.Expect.toEqual(Js_dict.fromList({
                                hd: [
                                  "a",
                                  Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                ],
                                tl: /* [] */0
                              }), Jest.Expect.expect(Relude__Relude_Js_Json.toDictOfJsonOrEmpty(Curry._1(Relude__Relude_Js_Json.DSL.JE.dict, Js_dict.fromList({
                                            hd: [
                                              "a",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                            ],
                                            tl: /* [] */0
                                          })))));
              }));
        Jest.test("toDictOfJsonOrEmpty none", (function (param) {
                return Jest.Expect.toEqual({}, Jest.Expect.expect(Relude__Relude_Js_Json.toDictOfJsonOrEmpty(Curry._1(Relude__Relude_Js_Json.DSL.JE.dict, ""))));
              }));
        Jest.test("toListOrEmpty ok", (function (param) {
                return Jest.Expect.toEqual("[{\"a\":true}]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, Relude__Relude_Js_Json.toListOrEmpty(Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfDict, {
                                                hd: Js_dict.fromList({
                                                      hd: [
                                                        "a",
                                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                                                      ],
                                                      tl: /* [] */0
                                                    }),
                                                tl: /* [] */0
                                              }))))));
              }));
        Jest.test("toListOrEmpty error", (function (param) {
                return Jest.Expect.toEqual("[]", Jest.Expect.expect(Relude__Relude_Js_Json.show(0, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, Relude__Relude_Js_Json.toListOrEmpty(Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfDict, ""))))));
              }));
        Jest.test("encode opt Some", (function (param) {
                return Jest.Expect.toEqual(Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"), Jest.Expect.expect(Curry._2(Relude__Relude_Js_Json.DSL.JE.opt, Relude__Relude_Js_Json.DSL.JE.string, "hi")));
              }));
        Jest.test("encode opt None", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Js_Json.DSL.JE.$$null, Jest.Expect.expect(Curry._2(Relude__Relude_Js_Json.DSL.JE.opt, Relude__Relude_Js_Json.DSL.JE.string, undefined)));
              }));
        Jest.test("validateOptional null value is None", (function (param) {
                Jest.Expect.toEqual({
                      TAG: /* VOk */0,
                      _0: undefined
                    }, Jest.Expect.expect(Curry._3(Relude__Relude_Js_Json.DSL.JD.opt, false, Relude__Relude_Js_Json.DSL.JD.string, Relude__Relude_Js_Json.DSL.JE.$$null)));
                Jest.Expect.toEqual({
                      TAG: /* VOk */0,
                      _0: undefined
                    }, Jest.Expect.expect(Curry._3(Relude__Relude_Js_Json.DSL.JD.opt, undefined, Relude__Relude_Js_Json.DSL.JD.string, Relude__Relude_Js_Json.DSL.JE.$$null)));
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: undefined
                          }, Jest.Expect.expect(Relude__Relude_Js_Json.validateOptional(undefined, Relude__Relude_Js_Json.DSL.JD.string)(Relude__Relude_Js_Json.DSL.JE.$$null)));
              }));
        Jest.test("validateOptional good value validates", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: "hi"
                          }, Jest.Expect.expect(Curry._3(Relude__Relude_Js_Json.DSL.JD.opt, false, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"))));
              }));
        Jest.test("validateOptional bad value is an error when errorAsNone=false", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.$$Array.pure("JSON value is not a string: 42.2")
                          }, Jest.Expect.expect(Curry._3(Relude__Relude_Js_Json.DSL.JD.opt, false, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 42.2))));
              }));
        Jest.test("validateOptional bad value is None when errorAsNone=true", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: undefined
                          }, Jest.Expect.expect(Curry._3(Relude__Relude_Js_Json.DSL.JD.opt, true, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 42.2))));
              }));
        Jest.test("validateOptionalAtIndex good value passes validation", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: "abc"
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, false, false, false, 1, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc"),
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalAtIndex missing value is an error when missingAsNone=false", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.$$Array.pure("No value was found at index 42 for JSON: [\n  42,\n  null,\n  \"hi\"\n]")
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, false, false, false, 42, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalAtIndex missing value is a None when missingAsNone=true", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: undefined
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, true, false, false, 42, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalAtIndex null value is an error when nullAsNone=false", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.$$Array.pure("1 had a null value in JSON: null")
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, false, false, false, 1, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalAtIndex null value is a None when nullAsNone=true", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: undefined
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, false, true, false, 1, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalAtIndex bad value is an error when errorAsNone is false", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.$$Array.pure("JSON value is not a bool: \"abc\"")
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, false, false, false, 1, Relude__Relude_Js_Json.DSL.JD.bool, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc"),
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalAtIndex bad value is a None when errorAsNone=true", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Validation.pure(undefined), Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, false, false, true, 1, Relude__Relude_Js_Json.DSL.JD.bool, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc"),
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalAtIndex missing value is a None", (function (param) {
                Jest.Expect.toEqual(Relude__Relude_Validation.pure(undefined), Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optAt, undefined, undefined, undefined, 42, Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                  hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                  tl: {
                                    hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                    tl: {
                                      hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                      tl: /* [] */0
                                    }
                                  }
                                }))));
                return Jest.Expect.toEqual(Relude__Relude_Validation.pure(undefined), Jest.Expect.expect(Relude__Relude_Js_Json.validateOptionalAtIndex(undefined, undefined, undefined, 42)(Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                        hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                                        tl: {
                                          hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                          tl: {
                                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey good value passes validation", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: "abc"
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, false, false, false, "b", Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc")
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey missing value is an error when missingAsNone=false", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.$$Array.pure("d was not found in JSON: {\n  \"a\": 42,\n  \"b\": \"abc\",\n  \"c\": \"hi\"\n}")
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, false, false, false, "d", Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc")
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey missing value is a None when missingAsNone=true", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: undefined
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, true, false, false, "d", Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc")
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey null value is an error when nullAsNone=false", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.$$Array.pure("b contained a null value in JSON: null")
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, false, false, false, "b", Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Relude__Relude_Js_Json.DSL.JE.$$null
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey null value is a None when nullAsNone=true", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: undefined
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, false, true, false, "b", Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Relude__Relude_Js_Json.DSL.JE.$$null
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey bad value is an error when errorAsNone is false", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.$$Array.pure("JSON value is not a bool: \"abc\"")
                          }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, false, false, false, "b", Relude__Relude_Js_Json.DSL.JD.bool, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc")
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey bad value is a None when errorAsNone=true", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Validation.pure(undefined), Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, false, false, true, "b", Relude__Relude_Js_Json.DSL.JD.bool, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("validateOptionalForKey missing value is a None", (function (param) {
                Jest.Expect.toEqual({
                      TAG: /* VOk */0,
                      _0: undefined
                    }, Jest.Expect.expect(Curry._6(Relude__Relude_Js_Json.DSL.JD.optFor, undefined, undefined, undefined, "d", Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                  hd: [
                                    "a",
                                    Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                  ],
                                  tl: {
                                    hd: [
                                      "b",
                                      Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc")
                                    ],
                                    tl: {
                                      hd: [
                                        "c",
                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                      ],
                                      tl: /* [] */0
                                    }
                                  }
                                }))));
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: undefined
                          }, Jest.Expect.expect(Relude__Relude_Js_Json.validateOptionalForKey(undefined, undefined, undefined, "d")(Relude__Relude_Js_Json.DSL.JD.string, Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                                        hd: [
                                          "a",
                                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                                        ],
                                        tl: {
                                          hd: [
                                            "b",
                                            Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "abc")
                                          ],
                                          tl: {
                                            hd: [
                                              "c",
                                              Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("nullAt (success)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Validation.ok(undefined), Jest.Expect.expect(Curry._2(Relude__Relude_Js_Json.DSL.JD.nullAt, 1, Curry._1(Relude__Relude_Js_Json.DSL.JE.array, [
                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                        Relude__Relude_Js_Json.DSL.JE.$$null
                                      ]))));
              }));
        Jest.test("nullAt (error)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Validation.error(Relude__Relude_NonEmpty.$$Array.make("1: JSON value is not a null: \"bye\"", [])), Jest.Expect.expect(Curry._2(Relude__Relude_Js_Json.DSL.JD.nullAt, 1, Curry._1(Relude__Relude_Js_Json.DSL.JE.array, [
                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                                        Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "bye")
                                      ]))));
              }));
        Jest.test("decode array using applicative validation (success)", (function (param) {
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.JD.array, (function (param, json) {
                        return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                      }), Curry._1(Relude__Relude_Js_Json.DSL.JE.array, [
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "bye")
                        ]));
                var expected = Relude__Relude_Validation.ok([
                      "hi",
                      "bye"
                    ]);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("decode array using applicative validation (error)", (function (param) {
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.JD.array, (function (param, json) {
                        return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                      }), Curry._1(Relude__Relude_Js_Json.DSL.JE.array, [
                          Relude__Relude_Js_Json.DSL.JE.$$null,
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true),
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 42.1),
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.array, [
                                Relude__Relude_Js_Json.DSL.JE.$$null,
                                Relude__Relude_Js_Json.DSL.JE.$$null
                              ]),
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                tl: {
                                  hd: Relude__Relude_Js_Json.DSL.JE.$$null,
                                  tl: /* [] */0
                                }
                              }),
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.dict, Js_dict.fromList({
                                    hd: [
                                      "a",
                                      Relude__Relude_Js_Json.DSL.JE.$$null
                                    ],
                                    tl: /* [] */0
                                  }))
                        ]));
                var expected = Relude__Relude_Validation.error(Relude__Relude_NonEmpty.$$Array.make("0: JSON value is not a string: null", [
                          "1: JSON value is not a string: true",
                          "3: JSON value is not a string: 42",
                          "4: JSON value is not a string: 42.1",
                          "5: JSON value is not a string: [\n  null,\n  null\n]",
                          "6: JSON value is not a string: [\n  null,\n  null\n]",
                          "7: JSON value is not a string: {\n  \"a\": null\n}"
                        ]));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("decode object using applicative validation (success)", (function (param) {
                var json = Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                      hd: [
                        "a",
                        Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi")
                      ],
                      tl: {
                        hd: [
                          "b",
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                        ],
                        tl: {
                          hd: [
                            "c",
                            Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true)
                          ],
                          tl: {
                            hd: [
                              "d",
                              Curry._2(Relude__Relude_Js_Json.DSL.JE.listBy, Relude__Relude_Js_Json.DSL.JE.string, {
                                    hd: "one",
                                    tl: {
                                      hd: "two",
                                      tl: /* [] */0
                                    }
                                  })
                            ],
                            tl: {
                              hd: [
                                "e",
                                Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 3.14)
                              ],
                              tl: {
                                hd: [
                                  "f",
                                  Relude__Relude_Js_Json.DSL.JE.$$null
                                ],
                                tl: {
                                  hd: [
                                    "g",
                                    Curry._2(Relude__Relude_Js_Json.DSL.JE.listBy, Relude__Relude_Js_Json.DSL.JE.string, {
                                          hd: "three",
                                          tl: {
                                            hd: "four",
                                            tl: /* [] */0
                                          }
                                        })
                                  ],
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$$great, make, Curry._2(Relude__Relude_Js_Json.DSL.$great$great$eq, Curry._2(Relude__Relude_Js_Json.DSL.JD.stringFor, "a", json), (function (a) {
                                                    return {
                                                            TAG: /* VOk */0,
                                                            _0: a + a
                                                          };
                                                  }))), Curry._2(Relude__Relude_Js_Json.DSL.$less$$$great, Curry._2(Relude__Relude_Js_Json.DSL.JD.intFor, "b", json), (function (a) {
                                                return (a << 1);
                                              }))), Curry._2(Relude__Relude_Js_Json.DSL.JD.boolFor, "c", json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.arrayFor, "d", (function (_index, json) {
                                        return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                                      }), json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.floatFor, "e", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.nullFor, "f", json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.listFor, "g", (function (_index, json) {
                            return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                          }), json));
                var expectedData_d = [
                  "one",
                  "two"
                ];
                var expectedData_g = {
                  hd: "three",
                  tl: {
                    hd: "four",
                    tl: /* [] */0
                  }
                };
                var expectedData = {
                  a: "hihi",
                  b: 84,
                  c: true,
                  d: expectedData_d,
                  e: 3.14,
                  f: undefined,
                  g: expectedData_g
                };
                var expected = Relude__Relude_Validation.ok(expectedData);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("decode object using applicative validation (error)", (function (param) {
                var json = Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                      hd: [
                        "a",
                        Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 42.1)
                      ],
                      tl: {
                        hd: [
                          "b",
                          Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42)
                        ],
                        tl: {
                          hd: [
                            "c",
                            Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "invalid")
                          ],
                          tl: {
                            hd: [
                              "d",
                              Curry._2(Relude__Relude_Js_Json.DSL.JE.listBy, Relude__Relude_Js_Json.DSL.JE.string, {
                                    hd: "one",
                                    tl: {
                                      hd: "two",
                                      tl: /* [] */0
                                    }
                                  })
                            ],
                            tl: {
                              hd: [
                                "e",
                                Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 3.14)
                              ],
                              tl: {
                                hd: [
                                  "f",
                                  Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "invalid")
                                ],
                                tl: {
                                  hd: [
                                    "g",
                                    Relude__Relude_Js_Json.DSL.JE.$$null
                                  ],
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                var result = Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$$great, make, Curry._2(Relude__Relude_Js_Json.DSL.JD.stringFor, "a", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.intFor, "b", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.boolFor, "c", json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.arrayFor, "d", (function (_index, json) {
                                        return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                                      }), json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.floatFor, "e", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.nullFor, "f", json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.listFor, "g", (function (_index, json) {
                            return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                          }), json));
                var expected = Relude__Relude_Validation.error(Relude__Relude_NonEmpty.$$Array.make("a: JSON value is not a string: 42.1", [
                          "c: JSON value is not a bool: \"invalid\"",
                          "f: JSON value is not a null: \"invalid\"",
                          "JSON value is not an array: null"
                        ]));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        Jest.test("decode object using applicative validation (invalid type error)", (function (param) {
                var json = Curry._1(Relude__Relude_Js_Json.DSL.JE.listOfTuples, {
                      hd: [
                        "a",
                        Relude__Relude_Js_Json.DSL.JE.$$null
                      ],
                      tl: {
                        hd: [
                          "b",
                          Relude__Relude_Js_Json.DSL.JE.$$null
                        ],
                        tl: {
                          hd: [
                            "c",
                            Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                                  hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 1),
                                  tl: /* [] */0
                                })
                          ],
                          tl: /* [] */0
                        }
                      }
                    });
                var make = function (a, b, c) {
                  return [
                          a,
                          b,
                          c
                        ];
                };
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$$great, make, Curry._2(Relude__Relude_Js_Json.DSL.JD.intFor, "a", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.floatFor, "b", json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.listFor, "c", (function (_index, json) {
                            return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                          }), json));
                var expected = Relude__Relude_Validation.error(Relude__Relude_NonEmpty.$$Array.make("a: JSON value is not an int: null", [
                          "b: JSON value is not a float: null",
                          "0: JSON value is not a string: 1"
                        ]));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("decode object using applicative validation (not found error)", (function (param) {
                var json = Curry._1(Relude__Relude_Js_Json.DSL.JE.array, []);
                var make = function (a, b, c, d, e, f, g) {
                  return [
                          a,
                          b,
                          c,
                          d,
                          e,
                          f,
                          g
                        ];
                };
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$$great, make, Curry._2(Relude__Relude_Js_Json.DSL.JD.stringFor, "a", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.intFor, "b", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.boolFor, "c", json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.arrayFor, "d", (function (_index, json) {
                                        return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                                      }), json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.floatFor, "e", json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.nullFor, "f", json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.listFor, "g", (function (_index, json) {
                            return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                          }), json));
                var expected = Relude__Relude_Validation.error(Relude__Relude_NonEmpty.$$Array.make("a was not found in JSON: []", [
                          "b was not found in JSON: []",
                          "c was not found in JSON: []",
                          "d was not found in JSON: []",
                          "e was not found in JSON: []",
                          "f was not found in JSON: []",
                          "g was not found in JSON: []"
                        ]));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("decode an array into an object (success)", (function (param) {
                var json = Curry._1(Relude__Relude_Js_Json.DSL.JE.array, [
                      Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "hi"),
                      Curry._1(Relude__Relude_Js_Json.DSL.JE.$$int, 42),
                      Curry._1(Relude__Relude_Js_Json.DSL.JE.bool, true),
                      Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "one"),
                            tl: {
                              hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "two"),
                              tl: /* [] */0
                            }
                          }),
                      Curry._1(Relude__Relude_Js_Json.DSL.JE.$$float, 3.14),
                      Relude__Relude_Js_Json.DSL.JE.$$null,
                      Curry._1(Relude__Relude_Js_Json.DSL.JE.list, {
                            hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "three"),
                            tl: {
                              hd: Curry._1(Relude__Relude_Js_Json.DSL.JE.string, "four"),
                              tl: /* [] */0
                            }
                          })
                    ]);
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$$great, make, Curry._2(Relude__Relude_Js_Json.DSL.$great$great$eq, Curry._2(Relude__Relude_Js_Json.DSL.JD.stringAt, 0, json), (function (a) {
                                                    return {
                                                            TAG: /* VOk */0,
                                                            _0: a + a
                                                          };
                                                  }))), Curry._2(Relude__Relude_Js_Json.DSL.$less$$$great, Curry._2(Relude__Relude_Js_Json.DSL.JD.intAt, 1, json), (function (a) {
                                                return (a << 1);
                                              }))), Curry._2(Relude__Relude_Js_Json.DSL.JD.boolAt, 2, json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.arrayAt, 3, (function (_index, json) {
                                        return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                                      }), json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.floatAt, 4, json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.nullAt, 5, json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.jsonAt, 6, Curry._1(Relude__Relude_Js_Json.DSL.JD.list, (function (_index, json) {
                                return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                              })), json));
                var expectedData_d = [
                  "one",
                  "two"
                ];
                var expectedData_g = {
                  hd: "three",
                  tl: {
                    hd: "four",
                    tl: /* [] */0
                  }
                };
                var expectedData = {
                  a: "hihi",
                  b: 84,
                  c: true,
                  d: expectedData_d,
                  e: 3.14,
                  f: undefined,
                  g: expectedData_g
                };
                var expected = Relude__Relude_Validation.ok(expectedData);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("decode an array into a tuple (not found error)", (function (param) {
                var json = Curry._1(Relude__Relude_Js_Json.DSL.JE.array, []);
                var make = function (a, b, c, d, e) {
                  return [
                          a,
                          b,
                          c,
                          d,
                          e
                        ];
                };
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$$great, make, Curry._2(Relude__Relude_Js_Json.DSL.JD.stringAt, 0, json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.intAt, 1, json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.floatAt, 2, json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.boolAt, 3, json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.arrayAt, 4, (function (_index, json) {
                            return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                          }), json));
                var expected = Relude__Relude_Validation.error(Relude__Relude_NonEmpty.$$Array.make("0 was not found in JSON: []", [
                          "1 was not found in JSON: []",
                          "2 was not found in JSON: []",
                          "3 was not found in JSON: []",
                          "4 was not found in JSON: []"
                        ]));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("decode an array into a tuple (invalid type error)", (function (param) {
                var json = Curry._1(Relude__Relude_Js_Json.DSL.JE.array, [
                      Relude__Relude_Js_Json.DSL.JE.$$null,
                      Relude__Relude_Js_Json.DSL.JE.$$null,
                      Relude__Relude_Js_Json.DSL.JE.$$null,
                      Relude__Relude_Js_Json.DSL.JE.$$null,
                      Relude__Relude_Js_Json.DSL.JE.$$null
                    ]);
                var make = function (a, b, c, d, f) {
                  return [
                          a,
                          b,
                          c,
                          d,
                          f
                        ];
                };
                var actual = Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$star$great, Curry._2(Relude__Relude_Js_Json.DSL.$less$$great, make, Curry._2(Relude__Relude_Js_Json.DSL.JD.stringAt, 0, json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.intAt, 1, json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.floatAt, 2, json)), Curry._2(Relude__Relude_Js_Json.DSL.JD.boolAt, 3, json)), Curry._3(Relude__Relude_Js_Json.DSL.JD.arrayAt, 4, (function (_index, json) {
                            return Curry._1(Relude__Relude_Js_Json.DSL.JD.string, json);
                          }), json));
                var expected = Relude__Relude_Validation.error(Relude__Relude_NonEmpty.$$Array.make("0: JSON value is not a string: null", [
                          "1: JSON value is not an int: null",
                          "2: JSON value is not a float: null",
                          "3: JSON value is not a bool: null",
                          "JSON value is not an array: null"
                        ]));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
      }));

exports.MyType = MyType;
/*  Not a pure module */
