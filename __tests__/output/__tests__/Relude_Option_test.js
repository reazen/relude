// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Caml_format = require("melange.runtime/caml_format.js");
var Caml_option = require("melange.runtime/caml_option.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_Option_Specializations = require("relude/option/Relude_Option_Specializations.js");

Jest.describe("Option", (function (param) {
        Jest.test("some", (function (param) {
                return Jest.Expect.toEqual("foo", Jest.Expect.expect(Relude__Relude_Option.some("foo")));
              }));
        Jest.test("orElse (primary is none)", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Option.orElse(1, undefined)));
              }));
        Jest.test("orElse (primary is some)", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Option.orElse(1, 3)));
              }));
        Jest.test("tap (none)", (function (param) {
                var x = {
                  contents: 1
                };
                Relude__Relude_Option.tap((function (v) {
                        x.contents = x.contents + v | 0;
                      }), undefined);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tap (some)", (function (param) {
                var x = {
                  contents: 1
                };
                Relude__Relude_Option.tap((function (v) {
                        x.contents = x.contents + v | 0;
                      }), 3);
                return Jest.Expect.toEqual(4, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tapSome (none)", (function (param) {
                var x = {
                  contents: 1
                };
                Relude__Relude_Option.tapSome((function (v) {
                        x.contents = x.contents + v | 0;
                      }), undefined);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tapSome (some)", (function (param) {
                var x = {
                  contents: 1
                };
                Relude__Relude_Option.tapSome((function (v) {
                        x.contents = x.contents + v | 0;
                      }), -1);
                return Jest.Expect.toEqual(0, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tapNone (some)", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Option.tapNone((function (param) {
                        x.contents = 3;
                      }), 1);
                return Jest.Expect.toEqual(0, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tapNone (none)", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Option.tapNone((function (param) {
                        x.contents = 3;
                      }), undefined);
                return Jest.Expect.toEqual(3, Jest.Expect.expect(x.contents));
              }));
        Jest.test("bitap (some)", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Option.bitap((function (param) {
                        x.contents = 3;
                      }), (function (v) {
                        x.contents = v;
                      }), 1);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(x.contents));
              }));
        Jest.test("bitap (none)", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Option.bitap((function (param) {
                        x.contents = 3;
                      }), (function (v) {
                        x.contents = v;
                      }), undefined);
                return Jest.Expect.toEqual(3, Jest.Expect.expect(x.contents));
              }));
        Jest.test("foldLazy maps value when option is Some", (function (param) {
                return Jest.Expect.toEqual("1", Jest.Expect.expect(Relude__Relude_Option.foldLazy((function (param) {
                                      return "";
                                    }), (function (prim) {
                                      return String(prim);
                                    }), 1)));
              }));
        Jest.test("foldLazy uses default when option is None", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Relude__Relude_Option.foldLazy((function (param) {
                                      return "";
                                    }), (function (prim) {
                                      return String(prim);
                                    }), undefined)));
              }));
        Jest.test("fold maps value when option is Some", (function (param) {
                return Jest.Expect.toEqual("1", Jest.Expect.expect(Relude__Relude_Option.fold("", (function (prim) {
                                      return String(prim);
                                    }), 1)));
              }));
        Jest.test("fold uses default when option is None", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Relude__Relude_Option.fold("", (function (prim) {
                                      return String(prim);
                                    }), undefined)));
              }));
        Jest.test("getOrElseLazy extracts value when option is Some", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Option.getOrElseLazy((function (param) {
                                      return 0;
                                    }), 1)));
              }));
        Jest.test("getOrElseLazy uses default when option is None", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Option.getOrElseLazy((function (param) {
                                      return 0;
                                    }), undefined)));
              }));
        Jest.test("getOrElse extracts value when option is Some", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Option.getOrElse(0, 1)));
              }));
        Jest.test("getOrElse uses default when option is None", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Option.getOrElse(0, undefined)));
              }));
        Jest.test("toList has one item when option is Some", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: /* [] */0
                          }, Jest.Expect.expect(Curry._1(Relude__Relude_Option.toList, "a")));
              }));
        Jest.test("toList is empty when option is None", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Curry._1(Relude__Relude_Option.toList, undefined)));
              }));
        Jest.test("toArray has one item when option is Some", (function (param) {
                return Jest.Expect.toEqual([[0]], Jest.Expect.expect(Curry._1(Relude__Relude_Option.toArray, [0])));
              }));
        Jest.test("toArray is empty when option is None", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Curry._1(Relude__Relude_Option.toArray, undefined)));
              }));
        Jest.test("isSome is true for Some", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option.isSome(3)));
              }));
        Jest.test("isSome is false for None", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option.isSome(undefined)));
              }));
        Jest.test("isNone is true for None", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option.isNone(undefined)));
              }));
        Jest.test("isNone is false for Some", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option.isNone(0)));
              }));
        Jest.test("map", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Option.map((function (a) {
                                      return a + 2 | 0;
                                    }), 1)));
              }));
        Jest.test("apply", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Option.apply((function (a) {
                                      return a + 2 | 0;
                                    }), 1)));
              }));
        Jest.testAll("align", {
              hd: [
                42,
                "a",
                {
                  TAG: /* Both */2,
                  _0: 42,
                  _1: "a"
                }
              ],
              tl: {
                hd: [
                  42,
                  undefined,
                  {
                    TAG: /* This */0,
                    _0: 42
                  }
                ],
                tl: {
                  hd: [
                    undefined,
                    "a",
                    {
                      TAG: /* That */1,
                      _0: "a"
                    }
                  ],
                  tl: {
                    hd: [
                      undefined,
                      undefined,
                      undefined
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Option.align(param[0], param[1])));
              }));
        Jest.testAll("alignWith", {
              hd: [
                42,
                "99",
                141
              ],
              tl: {
                hd: [
                  42,
                  undefined,
                  42
                ],
                tl: {
                  hd: [
                    undefined,
                    "99",
                    99
                  ],
                  tl: {
                    hd: [
                      undefined,
                      undefined,
                      undefined
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Option.alignWith(f, param[0], param[1])));
              }));
        Jest.test("pure", (function (param) {
                return Jest.Expect.toEqual(5, Jest.Expect.expect(Relude__Relude_Option.pure(5)));
              }));
        Jest.test("bind", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Option.bind(1, (function (a) {
                                      return a + 2 | 0;
                                    }))));
              }));
        Jest.test(">>=", (function (param) {
                var $great$great$eq = Relude__Relude_Option.Infix.$great$great$eq;
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._2($great$great$eq, 1, (function (a) {
                                      return a + 2 | 0;
                                    }))));
              }));
        Jest.test("map2", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._3(Relude__Relude_Option.map2, (function (a, b) {
                                      return a + b | 0;
                                    }), 1, 2)));
              }));
        Jest.test("map3", (function (param) {
                return Jest.Expect.toEqual(6, Jest.Expect.expect(Curry._4(Relude__Relude_Option.map3, (function (a, b, c) {
                                      return (a + b | 0) + c | 0;
                                    }), 1, 2, 3)));
              }));
        Jest.test("map4", (function (param) {
                return Jest.Expect.toEqual(10, Jest.Expect.expect(Curry._5(Relude__Relude_Option.map4, (function (a, b, c, d) {
                                      return ((a + b | 0) + c | 0) + d | 0;
                                    }), 1, 2, 3, 4)));
              }));
        Jest.test("map5", (function (param) {
                return Jest.Expect.toEqual(15, Jest.Expect.expect(Curry._6(Relude__Relude_Option.map5, (function (a, b, c, d, e) {
                                      return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                    }), 1, 2, 3, 4, 5)));
              }));
        Jest.test("tuple2", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_Option.tuple2, 1, 2)));
              }));
        Jest.test("tuple3", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Curry._3(Relude__Relude_Option.tuple3, 1, 2, 3)));
              }));
        Jest.test("tuple4", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4
                          ], Jest.Expect.expect(Curry._4(Relude__Relude_Option.tuple4, 1, 2, 3, 4)));
              }));
        Jest.test("tuple5", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect.expect(Curry._5(Relude__Relude_Option.tuple5, 1, 2, 3, 4, 5)));
              }));
        Jest.test("mapTuple2", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._2(Relude__Relude_Option.mapTuple2, (function (a, b) {
                                      return a + b | 0;
                                    }), [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("mapTuple3", (function (param) {
                return Jest.Expect.toEqual(6, Jest.Expect.expect(Curry._2(Relude__Relude_Option.mapTuple3, (function (a, b, c) {
                                      return (a + b | 0) + c | 0;
                                    }), [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("mapTuple4", (function (param) {
                return Jest.Expect.toEqual(10, Jest.Expect.expect(Curry._2(Relude__Relude_Option.mapTuple4, (function (a, b, c, d) {
                                      return ((a + b | 0) + c | 0) + d | 0;
                                    }), [
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("mapTuple5", (function (param) {
                return Jest.Expect.toEqual(15, Jest.Expect.expect(Curry._2(Relude__Relude_Option.mapTuple5, (function (a, b, c, d, e) {
                                      return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                    }), [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("foldLeft", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 10,
                              tl: {
                                hd: 20,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_Option.foldLeft((function (acc, v) {
                                        return {
                                                hd: v,
                                                tl: acc
                                              };
                                      }), {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: /* [] */0
                                      }
                                    })(1)));
              }));
        Jest.test("foldRight", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 10,
                              tl: {
                                hd: 20,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_Option.foldRight((function (v, acc) {
                                        return {
                                                hd: v,
                                                tl: acc
                                              };
                                      }), {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: /* [] */0
                                      }
                                    })(1)));
              }));
        Jest.test("alt both", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Option.alt(1, 2)));
              }));
        Jest.test("alt left", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Option.alt(1, undefined)));
              }));
        Jest.test("alt right", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Option.alt(undefined, 1)));
              }));
        Jest.test("alt neither", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Option.alt(undefined, undefined)));
              }));
        Jest.test("empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Option.empty));
              }));
        Jest.test("filter is None when option is None", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Option.filter(function (v) {
                                      return v === 0;
                                    })(undefined)));
              }));
        Jest.test("filter is None when value does not pass predicate", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Option.filter(function (v) {
                                      return v === 0;
                                    })(1)));
              }));
        Jest.test("filter is Some when value passes predicate", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Option.filter(function (v) {
                                      return v === 0;
                                    })(0)));
              }));
        Jest.test("filterNot", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Option.filterNot(function (x) {
                                      return x % 2 === 0;
                                    })(1)));
              }));
        Jest.test("flatten is None when option is None", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Relude__Relude_Option.flatten, undefined)));
              }));
        Jest.test("flatten is None when inner option is None", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Relude__Relude_Option.flatten, Caml_option.some(undefined))));
              }));
        Jest.test("flatten is Some when both options are Some", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Curry._1(Relude__Relude_Option.flatten, 1)));
              }));
        Jest.test("eqBy is true when inner values match", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option.eqBy(Relude__Relude_Int.eq, 1, 1)));
              }));
        Jest.test("eqBy is false when inner values do not match", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option.eqBy(Relude__Relude_Int.eq, 1, 2)));
              }));
        Jest.test("eqBy is false when one option is Some and one is None", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option.eqBy(Relude__Relude_Int.eq, 1, undefined)));
              }));
        Jest.test("eqBy is true when both options are None", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option.eqBy(Relude__Relude_Int.eq, undefined, undefined)));
              }));
        Jest.test("eq is true when inner values match", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option.eq(Relude__Relude_Int.Eq, 1, 1)));
              }));
        Jest.test("eq is false when inner values do not match", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option.eq(Relude__Relude_Int.Eq, 1, 2)));
              }));
        Jest.test("eq is true when both values are None", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option.eq(Relude__Relude_Int.Eq, undefined, undefined)));
              }));
        Jest.test("eq is false when one value is Some and one is None", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option.eq(Relude__Relude_Int.Eq, undefined, 1)));
              }));
      }));

Jest.describe("Option Specializations", (function (param) {
        Jest.test("String.eq (both none)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option_Specializations.$$String.eq(undefined, undefined)));
              }));
        Jest.test("String.eq (one none, one some)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option_Specializations.$$String.eq(undefined, "a")));
              }));
        Jest.test("String.eq (both some, same value)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option_Specializations.$$String.eq("a", "a")));
              }));
        Jest.test("String.eq (both some, different value)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option_Specializations.$$String.eq("a", "b")));
              }));
        Jest.test("String.compare (both none)", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(Relude__Relude_Option_Specializations.$$String.compare, undefined, undefined)));
              }));
        Jest.test("String.compare (none less than some)", (function (param) {
                return Jest.Expect.toEqual("less_than", Jest.Expect.expect(Curry._2(Relude__Relude_Option_Specializations.$$String.compare, undefined, "a")));
              }));
        Jest.test("String.compare (some is greater than none)", (function (param) {
                return Jest.Expect.toEqual("greater_than", Jest.Expect.expect(Curry._2(Relude__Relude_Option_Specializations.$$String.compare, "", undefined)));
              }));
        Jest.test("String.compare (both some, same value)", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(Relude__Relude_Option_Specializations.$$String.compare, "hi", "hi")));
              }));
        Jest.test("String.compare (both some, different value)", (function (param) {
                return Jest.Expect.toEqual("greater_than", Jest.Expect.expect(Curry._2(Relude__Relude_Option_Specializations.$$String.compare, "b", "a")));
              }));
        Jest.test("Int.eq", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Option_Specializations.Int.eq(1, undefined)));
              }));
        Jest.test("Float.eq", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Option_Specializations.Float.eq(3.14, 3.14)));
              }));
      }));

/*  Not a pure module */
