// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Caml_format = require("melange.runtime/caml_format.js");
var Relude__Relude_Ior = require("relude/./Relude_Ior.js");
var Relude__Relude_NonEmpty = require("relude/./Relude_NonEmpty.js");

var That = {};

var IorT = Relude__Relude_Ior.WithThats(Relude__Relude_NonEmpty.List.SemigroupAny, That);

Jest.describe("Ior", (function (param) {
        Jest.test("this", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* This */0,
                            _0: 5
                          }, Jest.Expect.expect(Relude__Relude_Ior.$$this(5)));
              }));
        Jest.test("that", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* That */1,
                            _0: 5
                          }, Jest.Expect.expect(Relude__Relude_Ior.that(5)));
              }));
        Jest.test("both", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Both */2,
                            _0: 5,
                            _1: "Warning"
                          }, Jest.Expect.expect(Relude__Relude_Ior.both(5, "Warning")));
              }));
        Jest.testAll("isThis", {
              hd: [
                Relude__Relude_Ior.pure(5),
                true
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("Warning"),
                  false
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(5, "Warning"),
                    false
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.isThis(param[0])));
              }));
        Jest.testAll("isThat", {
              hd: [
                Relude__Relude_Ior.pure(5),
                false
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("Warning"),
                  true
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(5, "Warning"),
                    false
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.isThat(param[0])));
              }));
        Jest.testAll("isBoth", {
              hd: [
                Relude__Relude_Ior.pure(5),
                false
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("Warning"),
                  false
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(5, "Warning"),
                    true
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.isBoth(param[0])));
              }));
        Jest.testAll("getThis", {
              hd: [
                Relude__Relude_Ior.pure(5),
                5
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("Warning"),
                  undefined
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(5, "Warning"),
                    5
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.getThis(param[0])));
              }));
        Jest.testAll("getThat", {
              hd: [
                Relude__Relude_Ior.pure(5),
                undefined
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("Warning"),
                  "Warning"
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(5, "Warning"),
                    "Warning"
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.getThat(param[0])));
              }));
        Jest.test("partition", (function (param) {
                var actual = Relude__Relude_Ior.partition({
                      hd: Relude__Relude_Ior.$$this(1),
                      tl: {
                        hd: Relude__Relude_Ior.that("2"),
                        tl: {
                          hd: Relude__Relude_Ior.both(3, "4"),
                          tl: {
                            hd: Relude__Relude_Ior.that("5"),
                            tl: {
                              hd: Relude__Relude_Ior.both(6, "7"),
                              tl: {
                                hd: Relude__Relude_Ior.that("8"),
                                tl: {
                                  hd: Relude__Relude_Ior.$$this(9),
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                return Jest.Expect.toEqual([
                            {
                              hd: 1,
                              tl: {
                                hd: 9,
                                tl: /* [] */0
                              }
                            },
                            {
                              hd: "2",
                              tl: {
                                hd: "5",
                                tl: {
                                  hd: "8",
                                  tl: /* [] */0
                                }
                              }
                            },
                            {
                              hd: [
                                3,
                                "4"
                              ],
                              tl: {
                                hd: [
                                  6,
                                  "7"
                                ],
                                tl: /* [] */0
                              }
                            }
                          ], Jest.Expect.expect(actual));
              }));
        Jest.test("catThis", (function (param) {
                var actual = Relude__Relude_Ior.catThis({
                      hd: Relude__Relude_Ior.$$this(1),
                      tl: {
                        hd: Relude__Relude_Ior.that("2"),
                        tl: {
                          hd: Relude__Relude_Ior.both(3, "4"),
                          tl: {
                            hd: Relude__Relude_Ior.that("5"),
                            tl: {
                              hd: Relude__Relude_Ior.both(6, "7"),
                              tl: {
                                hd: Relude__Relude_Ior.that("8"),
                                tl: {
                                  hd: Relude__Relude_Ior.$$this(9),
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 3,
                              tl: {
                                hd: 6,
                                tl: {
                                  hd: 9,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(actual));
              }));
        Jest.test("catThat", (function (param) {
                var actual = Relude__Relude_Ior.catThat({
                      hd: Relude__Relude_Ior.$$this(1),
                      tl: {
                        hd: Relude__Relude_Ior.that("2"),
                        tl: {
                          hd: Relude__Relude_Ior.both(3, "4"),
                          tl: {
                            hd: Relude__Relude_Ior.that("5"),
                            tl: {
                              hd: Relude__Relude_Ior.both(6, "7"),
                              tl: {
                                hd: Relude__Relude_Ior.that("8"),
                                tl: {
                                  hd: Relude__Relude_Ior.$$this(9),
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                return Jest.Expect.toEqual({
                            hd: "2",
                            tl: {
                              hd: "4",
                              tl: {
                                hd: "5",
                                tl: {
                                  hd: "7",
                                  tl: {
                                    hd: "8",
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(actual));
              }));
        Jest.testAll("mapThis", {
              hd: [
                {
                  TAG: /* This */0,
                  _0: 42
                },
                {
                  TAG: /* This */0,
                  _0: 84
                }
              ],
              tl: {
                hd: [
                  {
                    TAG: /* That */1,
                    _0: "a"
                  },
                  {
                    TAG: /* That */1,
                    _0: "a"
                  }
                ],
                tl: {
                  hd: [
                    {
                      TAG: /* Both */2,
                      _0: 42,
                      _1: "a"
                    },
                    {
                      TAG: /* Both */2,
                      _0: 84,
                      _1: "a"
                    }
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.mapThis((function (a) {
                                      return (a << 1);
                                    }), param[0])));
              }));
        Jest.testAll("mapThat", {
              hd: [
                {
                  TAG: /* This */0,
                  _0: 42
                },
                {
                  TAG: /* This */0,
                  _0: 42
                }
              ],
              tl: {
                hd: [
                  {
                    TAG: /* That */1,
                    _0: "a"
                  },
                  {
                    TAG: /* That */1,
                    _0: "aa"
                  }
                ],
                tl: {
                  hd: [
                    {
                      TAG: /* Both */2,
                      _0: 42,
                      _1: "a"
                    },
                    {
                      TAG: /* Both */2,
                      _0: 42,
                      _1: "aa"
                    }
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.mapThat((function (b) {
                                      return b + b;
                                    }), param[0])));
              }));
        Jest.test("tap This", (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tap((function ($$this) {
                        actual.contents = $$this;
                      }), (function (param) {
                        actual.contents = -1;
                      }), (function (param, param$1) {
                        actual.contents = -2;
                      }), {
                      TAG: /* This */0,
                      _0: 1
                    });
                return Jest.Expect.toEqual(1, Jest.Expect.expect(actual.contents));
              }));
        Jest.test("tap That", (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tap((function (param) {
                        actual.contents = -1;
                      }), (function (that) {
                        actual.contents = that;
                      }), (function (param, param$1) {
                        actual.contents = -2;
                      }), {
                      TAG: /* That */1,
                      _0: 1
                    });
                return Jest.Expect.toEqual(1, Jest.Expect.expect(actual.contents));
              }));
        Jest.test("tap Both", (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tap((function (param) {
                        actual.contents = -1;
                      }), (function (param) {
                        actual.contents = -2;
                      }), (function ($$this, that) {
                        actual.contents = $$this + that | 0;
                      }), {
                      TAG: /* Both */2,
                      _0: 1,
                      _1: 2
                    });
                return Jest.Expect.toEqual(3, Jest.Expect.expect(actual.contents));
              }));
        Jest.testAll("tapThis", {
              hd: [
                {
                  TAG: /* This */0,
                  _0: 1
                },
                1
              ],
              tl: {
                hd: [
                  {
                    TAG: /* That */1,
                    _0: "Warning"
                  },
                  0
                ],
                tl: {
                  hd: [
                    {
                      TAG: /* Both */2,
                      _0: 5,
                      _1: "Warning"
                    },
                    0
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tapThis((function (a) {
                        actual.contents = a;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual.contents));
              }));
        Jest.testAll("tapThat", {
              hd: [
                {
                  TAG: /* This */0,
                  _0: 1
                },
                0
              ],
              tl: {
                hd: [
                  {
                    TAG: /* That */1,
                    _0: 1
                  },
                  1
                ],
                tl: {
                  hd: [
                    {
                      TAG: /* Both */2,
                      _0: 1,
                      _1: 2
                    },
                    0
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tapThat((function (a) {
                        actual.contents = a;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual.contents));
              }));
        Jest.testAll("tapBoth", {
              hd: [
                {
                  TAG: /* This */0,
                  _0: 1
                },
                0
              ],
              tl: {
                hd: [
                  {
                    TAG: /* That */1,
                    _0: 2
                  },
                  0
                ],
                tl: {
                  hd: [
                    {
                      TAG: /* Both */2,
                      _0: 1,
                      _1: 2
                    },
                    3
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tapBoth((function (a, e) {
                        actual.contents = a + e | 0;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual.contents));
              }));
        Jest.testAll("tapThisOrBoth", {
              hd: [
                {
                  TAG: /* This */0,
                  _0: 1
                },
                1
              ],
              tl: {
                hd: [
                  {
                    TAG: /* That */1,
                    _0: 2
                  },
                  0
                ],
                tl: {
                  hd: [
                    {
                      TAG: /* Both */2,
                      _0: 1,
                      _1: 2
                    },
                    1
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tapThisOrBoth((function (a) {
                        actual.contents = a;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual.contents));
              }));
        Jest.testAll("tapThatOrBoth", {
              hd: [
                {
                  TAG: /* This */0,
                  _0: 1
                },
                0
              ],
              tl: {
                hd: [
                  {
                    TAG: /* That */1,
                    _0: 2
                  },
                  2
                ],
                tl: {
                  hd: [
                    {
                      TAG: /* Both */2,
                      _0: 1,
                      _1: 2
                    },
                    2
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = {
                  contents: 0
                };
                Relude__Relude_Ior.tapThatOrBoth((function (a) {
                        actual.contents = a;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual.contents));
              }));
        Jest.test("map2 This This", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* This */0,
                            _0: 3
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* This */0,
                                    _0: 1
                                  }, {
                                    TAG: /* This */0,
                                    _0: 2
                                  })));
              }));
        Jest.test("map2 This That", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* That */1,
                            _0: "W2"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* This */0,
                                    _0: 1
                                  }, {
                                    TAG: /* That */1,
                                    _0: "W2"
                                  })));
              }));
        Jest.test("map2 This Both", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Both */2,
                            _0: 3,
                            _1: "W2"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* This */0,
                                    _0: 1
                                  }, {
                                    TAG: /* Both */2,
                                    _0: 2,
                                    _1: "W2"
                                  })));
              }));
        Jest.test("map2 That This", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* That */1,
                            _0: "W1"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* That */1,
                                    _0: "W1"
                                  }, {
                                    TAG: /* This */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("map2 That That", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* That */1,
                            _0: "W1W2"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* That */1,
                                    _0: "W1"
                                  }, {
                                    TAG: /* That */1,
                                    _0: "W2"
                                  })));
              }));
        Jest.test("map2 That Both", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* That */1,
                            _0: "W1W2"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* That */1,
                                    _0: "W1"
                                  }, {
                                    TAG: /* Both */2,
                                    _0: 1,
                                    _1: "W2"
                                  })));
              }));
        Jest.test("map2 Both This", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Both */2,
                            _0: 3,
                            _1: "W1"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* Both */2,
                                    _0: 1,
                                    _1: "W1"
                                  }, {
                                    TAG: /* This */0,
                                    _0: 2
                                  })));
              }));
        Jest.test("map2 Both That", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* That */1,
                            _0: "W1W2"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* Both */2,
                                    _0: 1,
                                    _1: "W1"
                                  }, {
                                    TAG: /* That */1,
                                    _0: "W2"
                                  })));
              }));
        Jest.test("map2 Both Both", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Both */2,
                            _0: 3,
                            _1: "W1W2"
                          }, Jest.Expect.expect(Relude__Relude_Ior.map2((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    TAG: /* Both */2,
                                    _0: 1,
                                    _1: "W1"
                                  }, {
                                    TAG: /* Both */2,
                                    _0: 2,
                                    _1: "W2"
                                  })));
              }));
        Jest.test("map3 This This This", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* This */0,
                            _0: 6
                          }, Jest.Expect.expect(Relude__Relude_Ior.map3((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b, c) {
                                      return (a + b | 0) + c | 0;
                                    }), {
                                    TAG: /* This */0,
                                    _0: 1
                                  }, {
                                    TAG: /* This */0,
                                    _0: 2
                                  }, {
                                    TAG: /* This */0,
                                    _0: 3
                                  })));
              }));
        Jest.test("map4 This This This This", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* This */0,
                            _0: 10
                          }, Jest.Expect.expect(Relude__Relude_Ior.map4((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b, c, d) {
                                      return ((a + b | 0) + c | 0) + d | 0;
                                    }), {
                                    TAG: /* This */0,
                                    _0: 1
                                  }, {
                                    TAG: /* This */0,
                                    _0: 2
                                  }, {
                                    TAG: /* This */0,
                                    _0: 3
                                  }, {
                                    TAG: /* This */0,
                                    _0: 4
                                  })));
              }));
        Jest.test("map5 This This This This This", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* This */0,
                            _0: 15
                          }, Jest.Expect.expect(Relude__Relude_Ior.map5((function (prim0, prim1) {
                                      return prim0 + prim1;
                                    }), (function (a, b, c, d, f) {
                                      return (((a + b | 0) + c | 0) + d | 0) + f | 0;
                                    }), {
                                    TAG: /* This */0,
                                    _0: 1
                                  }, {
                                    TAG: /* This */0,
                                    _0: 2
                                  }, {
                                    TAG: /* This */0,
                                    _0: 3
                                  }, {
                                    TAG: /* This */0,
                                    _0: 4
                                  }, {
                                    TAG: /* This */0,
                                    _0: 5
                                  })));
              }));
        Jest.test("pure", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* This */0,
                            _0: 5
                          }, Jest.Expect.expect(Relude__Relude_Ior.pure(5)));
              }));
        Jest.testAll("bind", {
              hd: [
                Relude__Relude_Ior.$$this(1),
                {
                  TAG: /* This */0,
                  _0: 2
                }
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("Warning"),
                  {
                    TAG: /* That */1,
                    _0: "Warning"
                  }
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(1, "Warning"),
                    {
                      TAG: /* This */0,
                      _0: 2
                    }
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.bind(param[0], (function (a) {
                                      return Relude__Relude_Ior.$$this(a + 1 | 0);
                                    }))));
              }));
        Jest.testAll("flatMap", {
              hd: [
                Relude__Relude_Ior.$$this(1),
                {
                  TAG: /* This */0,
                  _0: 2
                }
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("Warning"),
                  {
                    TAG: /* That */1,
                    _0: "Warning"
                  }
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(1, "Warning"),
                    {
                      TAG: /* This */0,
                      _0: 2
                    }
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ior.flatMap((function (a) {
                                      return Relude__Relude_Ior.$$this(a + 1 | 0);
                                    }), param[0])));
              }));
        Jest.testAll("fold", {
              hd: [
                Relude__Relude_Ior.$$this(1),
                10
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("2"),
                  20
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(1, "2"),
                    30
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = Relude__Relude_Ior.fold((function (a) {
                        return Math.imul(a, 10);
                      }), (function (b) {
                        return Math.imul(Caml_format.caml_int_of_string(b), 10);
                      }), (function (a, b) {
                        return Math.imul(a, 10) + Math.imul(Caml_format.caml_int_of_string(b), 10) | 0;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual));
              }));
        Jest.testAll("toTuple", {
              hd: [
                Relude__Relude_Ior.$$this(1),
                [
                  1,
                  "hi"
                ]
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("2"),
                  [
                    100,
                    "2"
                  ]
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(1, "2"),
                    [
                      1,
                      "2"
                    ]
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = Relude__Relude_Ior.toTuple(100, "hi", param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual));
              }));
        Jest.testAll("merge", {
              hd: [
                Relude__Relude_Ior.$$this(1),
                1
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that(2),
                  2
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both(1, 2),
                    3
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = Relude__Relude_Ior.merge((function (a, b) {
                        return a + b | 0;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual));
              }));
        Jest.testAll("mergeWith", {
              hd: [
                Relude__Relude_Ior.$$this("1"),
                1
              ],
              tl: {
                hd: [
                  Relude__Relude_Ior.that("2"),
                  2
                ],
                tl: {
                  hd: [
                    Relude__Relude_Ior.both("1", "2"),
                    3
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                var actual = Relude__Relude_Ior.mergeWith(Caml_format.caml_int_of_string, Caml_format.caml_int_of_string, (function (a, b) {
                        return a + b | 0;
                      }), param[0]);
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(actual));
              }));
        Jest.describe("WithThats", (function (param) {
                Jest.test("map", (function (param) {
                        return Jest.Expect.toEqual({
                                    TAG: /* That */1,
                                    _0: Relude__Relude_NonEmpty.List.pure(/* Unknown */0)
                                  }, Jest.Expect.expect(Curry._2(IorT.map, (function (a) {
                                              return a + 1 | 0;
                                            }), Relude__Relude_Ior.that(Relude__Relude_NonEmpty.List.pure(/* Unknown */0)))));
                      }));
                Jest.test("apply", (function (param) {
                        return Jest.Expect.toEqual({
                                    TAG: /* That */1,
                                    _0: Relude__Relude_NonEmpty.List.pure(/* Unknown */0)
                                  }, Jest.Expect.expect(Curry._2(IorT.apply, Relude__Relude_Ior.$$this(function (a) {
                                                return a + 1 | 0;
                                              }), Relude__Relude_Ior.that(Relude__Relude_NonEmpty.List.pure(/* Unknown */0)))));
                      }));
              }));
      }));

exports.That = That;
exports.IorT = IorT;
/* IorT Not a pure module */
