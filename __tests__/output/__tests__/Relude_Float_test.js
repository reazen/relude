// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Float = require("relude/./Relude_Float.js");

Jest.describe("Float", (function (param) {
        Jest.test("eq true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.eq(1.1, 1.1)));
              }));
        Jest.test("eq false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Float.eq(1.1, 1.2)));
              }));
        Jest.test("compare equal_to", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(Relude__Relude_Float.compare, 1.1, 1.1)));
              }));
        Jest.test("compare greater_than", (function (param) {
                return Jest.Expect.toEqual("greater_than", Jest.Expect.expect(Curry._2(Relude__Relude_Float.compare, 1.2, 1.1)));
              }));
        Jest.test("compare less_than", (function (param) {
                return Jest.Expect.toEqual("less_than", Jest.Expect.expect(Curry._2(Relude__Relude_Float.compare, 1.1, 1.2)));
              }));
        Jest.test("add", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.approximatelyEqual(0.01, Relude__Relude_Float.add(3.1, 4.2), 7.3)));
              }));
        Jest.test("multiply", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.approximatelyEqual(0.01, Relude__Relude_Float.multiply(3.1, 2.0), 6.2)));
              }));
        Jest.test("subtract", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.approximatelyEqual(1.1, Relude__Relude_Float.subtract(9.9, 8.8), 1.1)));
              }));
        Jest.test("divide", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.approximatelyEqual(0.01, Relude__Relude_Float.divide(1.0, 3.0), 0.333)));
              }));
        Jest.test("pow", (function (param) {
                return Jest.Expect.toEqual(16.0, Jest.Expect.expect(Relude__Relude_Float.pow(2.0, 4.0)));
              }));
        Jest.test("pow (nan)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.$$isNaN(Relude__Relude_Float.pow(-2.0, 0.3333333))));
              }));
        Jest.test("sqrt", (function (param) {
                return Jest.Expect.toEqual(3.0, Jest.Expect.expect(Relude__Relude_Float.sqrt(9.0)));
              }));
        Jest.test("sqrt (nan)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.$$isNaN(Relude__Relude_Float.sqrt(-9.0))));
              }));
        Jest.test("isNaN (false for normal number)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Float.$$isNaN(3.0)));
              }));
        Jest.test("isNaN (false for infinity)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Float.$$isNaN(Relude__Relude_Float.infinity)));
              }));
        Jest.test("isNaN (true for nan)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.$$isNaN(Relude__Relude_Float.nan)));
              }));
        Jest.test("isNaN (true for computation that returns nan)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.$$isNaN(Relude__Relude_Float.sqrt(-1.0))));
              }));
        Jest.test("compareAsInt (-1)", (function (param) {
                return Jest.Expect.toEqual(-1, Jest.Expect.expect(Curry._2(Relude__Relude_Float.compareAsInt, 3.0, 3.1)));
              }));
        Jest.test("compareAsInt (0)", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._2(Relude__Relude_Float.compareAsInt, 3.0, 3.0)));
              }));
        Jest.test("compareAsInt (1)", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Curry._2(Relude__Relude_Float.compareAsInt, 3.0, 2.0)));
              }));
        Jest.test("min (smaller first)", (function (param) {
                return Jest.Expect.toEqual(3.1, Jest.Expect.expect(Curry._2(Relude__Relude_Float.min, 3.1, 3.2)));
              }));
        Jest.test("min (smaller second)", (function (param) {
                return Jest.Expect.toEqual(3.1, Jest.Expect.expect(Curry._2(Relude__Relude_Float.min, 3.2, 3.1)));
              }));
        Jest.test("max (larger second)", (function (param) {
                return Jest.Expect.toEqual(1.0, Jest.Expect.expect(Curry._2(Relude__Relude_Float.max, -1.0, 1.0)));
              }));
        Jest.test("max (values equal)", (function (param) {
                return Jest.Expect.toEqual(10.0, Jest.Expect.expect(Curry._2(Relude__Relude_Float.max, 10.0, 10.0)));
              }));
        Jest.test("lessThan (first smaller)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.lessThan, 3.14, 3.15)));
              }));
        Jest.test("lessThan (values equal)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.lessThan, 3.14, 3.14)));
              }));
        Jest.test("lessThanOrEq (first smaller)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.lessThanOrEq, 1.0, 2.0)));
              }));
        Jest.test("lessThanOrEq (first larger)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.lessThanOrEq, 3.0, 0.0)));
              }));
        Jest.test("greaterThan (first larger)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.greaterThan, 1.0, 0.1)));
              }));
        Jest.test("greaterThan (values equal)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.greaterThan, 1.0, 1.0)));
              }));
        Jest.test("greaterThanOrEq (eq)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.greaterThanOrEq, 0.0, 0.0)));
              }));
        Jest.test("greaterThanOrEq (first larger)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.greaterThanOrEq, 1.0, 0.0)));
              }));
        Jest.test("greaterThanOrEq (first smaller)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.greaterThanOrEq, 1.0, 2.0)));
              }));
        Jest.test("named lessThan (smaller)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.lessThan, 3.15, 3.14)));
              }));
        Jest.test("named lessThan (equal)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.lessThan, 3.14, 3.14)));
              }));
        Jest.test("named lessThanOrEq (smaller)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.lessThanOrEq, 2.0, 1.0)));
              }));
        Jest.test("named lessThanOrEq (larger)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.lessThanOrEq, 0.0, 3.0)));
              }));
        Jest.test("named greaterThan (larger)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.greaterThan, 0.1, 1.0)));
              }));
        Jest.test("named greaterThan (equal)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.greaterThan, 1.0, 1.0)));
              }));
        Jest.test("named greaterThanOrEq (eq)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.greaterThanOrEq, 0.0, 0.0)));
              }));
        Jest.test("named greaterThanOrEq (larger)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.greaterThanOrEq, 0.0, 1.0)));
              }));
        Jest.test("named greaterThanOrEq (smaller)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_Float.OrdNamed.greaterThanOrEq, 2.0, 1.0)));
              }));
        Jest.test("clamp (in range)", (function (param) {
                return Jest.Expect.toEqual(1.3, Jest.Expect.expect(Curry._3(Relude__Relude_Float.clamp, 1.1, 1.5, 1.3)));
              }));
        Jest.test("clamp (too high)", (function (param) {
                return Jest.Expect.toEqual(1.5, Jest.Expect.expect(Curry._3(Relude__Relude_Float.clamp, 1.1, 1.5, 2.3)));
              }));
        Jest.test("clamp (too low)", (function (param) {
                return Jest.Expect.toEqual(1.1, Jest.Expect.expect(Curry._3(Relude__Relude_Float.clamp, 1.1, 1.5, 0.3)));
              }));
        Jest.test("clamp (invalid min max)", (function (param) {
                return Jest.Expect.toEqual(0.0, Jest.Expect.expect(Curry._3(Relude__Relude_Float.clamp, 5.0, 0.0, 3.0)));
              }));
        Jest.test("between (true)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_Float.between, 0.0, 1.0, 0.5)));
              }));
        Jest.test("between (equal to max)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_Float.between, 0.0, 1.0, 1.0)));
              }));
        Jest.test("between (equal to min)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_Float.between, 0.0, 1.0, 0.0)));
              }));
        Jest.test("between (too low)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._3(Relude__Relude_Float.between, -1.0, 1.0, -2.0)));
              }));
        Jest.test("abs (zero)", (function (param) {
                return Jest.Expect.toEqual(0.0, Jest.Expect.expect(Curry._1(Relude__Relude_Float.abs, 0.0)));
              }));
        Jest.test("abs (positive)", (function (param) {
                return Jest.Expect.toEqual(5.2, Jest.Expect.expect(Curry._1(Relude__Relude_Float.abs, 5.2)));
              }));
        Jest.test("abs (negative)", (function (param) {
                return Jest.Expect.toEqual(3.1, Jest.Expect.expect(Curry._1(Relude__Relude_Float.abs, -3.1)));
              }));
        Jest.test("signum (zero)", (function (param) {
                return Jest.Expect.toEqual(1.0, Jest.Expect.expect(Curry._1(Relude__Relude_Float.signum, 0.0)));
              }));
        Jest.test("signum (negative)", (function (param) {
                return Jest.Expect.toEqual(-1.0, Jest.Expect.expect(Curry._1(Relude__Relude_Float.signum, -55.0)));
              }));
        Jest.test("signum (positive)", (function (param) {
                return Jest.Expect.toEqual(1.0, Jest.Expect.expect(Curry._1(Relude__Relude_Float.signum, 24.0)));
              }));
        Jest.test("approximatelyEqual", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.approximatelyEqual(0.01, 0.111, 0.112)));
              }));
        Jest.test("toInt", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Float.toInt(3.9)));
              }));
        Jest.test("toInt (nan)", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Float.toInt(Number.NaN)));
              }));
        Jest.test("fromInt", (function (param) {
                return Jest.Expect.toEqual(3.0, Jest.Expect.expect(Relude__Relude_Float.fromInt(3)));
              }));
        Jest.test("fractionalPart", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.approximatelyEqual(0.0001, Relude__Relude_Float.fractionalPart(3.141592), 0.141592)));
              }));
        Jest.test("fractionalPart (negative)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Float.approximatelyEqual(0.0001, Relude__Relude_Float.fractionalPart(-20.00001), 0.00001)));
              }));
        Jest.test("fractionalPart (negative half)", (function (param) {
                return Jest.Expect.toEqual(0.5, Jest.Expect.expect(Relude__Relude_Float.fractionalPart(-0.5)));
              }));
        Jest.test("floor (positive)", (function (param) {
                return Jest.Expect.toEqual(1.0, Jest.Expect.expect(Relude__Relude_Float.floor(1.999)));
              }));
        Jest.test("floor (negative)", (function (param) {
                return Jest.Expect.toEqual(-2.0, Jest.Expect.expect(Relude__Relude_Float.floor(-1.01)));
              }));
        Jest.test("floorAsInt", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Float.floorAsInt(0.1234)));
              }));
        Jest.test("ceil (positive)", (function (param) {
                return Jest.Expect.toEqual(2.0, Jest.Expect.expect(Relude__Relude_Float.ceil(1.001)));
              }));
        Jest.test("ceil (negative)", (function (param) {
                return Jest.Expect.toEqual(-1.0, Jest.Expect.expect(Relude__Relude_Float.ceil(-1.999)));
              }));
        Jest.test("ceilAsInt", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Float.ceilAsInt(0.1234)));
              }));
        Jest.test("round", (function (param) {
                return Jest.Expect.toEqual(1.0, Jest.Expect.expect(Relude__Relude_Float.round(0.5)));
              }));
        Jest.test("round (negative, half)", (function (param) {
                return Jest.Expect.toEqual(-1.0, Jest.Expect.expect(Relude__Relude_Float.round(-1.5)));
              }));
        Jest.test("round (below half)", (function (param) {
                return Jest.Expect.toEqual(0.0, Jest.Expect.expect(Relude__Relude_Float.round(0.4)));
              }));
        Jest.test("round (above half)", (function (param) {
                return Jest.Expect.toEqual(1.0, Jest.Expect.expect(Relude__Relude_Float.round(0.8)));
              }));
        Jest.test("roundAsInt", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Relude__Relude_Float.roundAsInt(2.3)));
              }));
        Jest.test("toPrecision", (function (param) {
                return Jest.Expect.toEqual(3.14, Jest.Expect.expect(Relude__Relude_Float.toPrecision(2, 3.141592)));
              }));
        Jest.test("toPrecision (negative float)", (function (param) {
                return Jest.Expect.toEqual(-4.9999, Jest.Expect.expect(Relude__Relude_Float.toPrecision(4, -4.9999999999)));
              }));
        Jest.test("toPrecision (many requested decimals)", (function (param) {
                return Jest.Expect.toEqual(1.1111111111, Jest.Expect.expect(Relude__Relude_Float.toPrecision(10, 1.1111111111111)));
              }));
        Jest.test("toPrecision (more requested decimals)", (function (param) {
                return Jest.Expect.toEqual(1.1, Jest.Expect.expect(Relude__Relude_Float.toPrecision(10, 1.1)));
              }));
        Jest.test("toPrecision (negative number of decimals)", (function (param) {
                return Jest.Expect.toEqual(10.0, Jest.Expect.expect(Relude__Relude_Float.toPrecision(-1, 11.111)));
              }));
        Jest.test("fromString success", (function (param) {
                return Jest.Expect.toEqual(3.14, Jest.Expect.expect(Relude__Relude_Float.fromString("3.14")));
              }));
        Jest.test("fromString success on int", (function (param) {
                return Jest.Expect.toEqual(3.0, Jest.Expect.expect(Relude__Relude_Float.fromString("3")));
              }));
        Jest.test("fromString failure on empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Float.fromString("")));
              }));
        Jest.test("fromString failure on mixed", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Float.fromString("3.14a")));
              }));
        Jest.test("fromString failure on alpha", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Float.fromString("abc")));
              }));
        Jest.test("show 1.0", (function (param) {
                return Jest.Expect.toEqual("1", Jest.Expect.expect(Relude__Relude_Float.show(1.0)));
              }));
        Jest.test("toString 1.0", (function (param) {
                return Jest.Expect.toEqual("1", Jest.Expect.expect(Relude__Relude_Float.toString(1.0)));
              }));
        Jest.test("show 1.123", (function (param) {
                return Jest.Expect.toEqual("1.123", Jest.Expect.expect(Relude__Relude_Float.show(1.123)));
              }));
        Jest.test("toString 1.123", (function (param) {
                return Jest.Expect.toEqual("1.123", Jest.Expect.expect(Relude__Relude_Float.toString(1.123)));
              }));
      }));

/*  Not a pure module */
