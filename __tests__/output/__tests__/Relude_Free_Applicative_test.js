// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_Result = require("relude/./Relude_Result.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_Globals = require("relude/./Relude_Globals.js");
var Relude__Relude_NonEmpty = require("relude/./Relude_NonEmpty.js");
var Relude__Relude_Validation = require("relude/./Relude_Validation.js");
var Relude__Relude_Free_Applicative = require("relude/./Relude_Free_Applicative.js");

var Validator = {};

function make(name, validator) {
  return {
          name: name,
          validator: validator
        };
}

function map(f, param) {
  var validator = param.validator;
  return {
          name: param.name,
          validator: (function (param) {
              return Relude__Relude_Globals.$great$great(validator, (function (param) {
                            return Relude__Relude_Result.map(f, param);
                          }), param);
            })
        };
}

var Functor = {
  map: map
};

var Field = {
  make: make,
  map: map,
  Functor: Functor
};

var include = Relude__Relude_Free_Applicative.WithFunctor(Functor);

var liftF = include.liftF;

var WithApplicativeAndNT = include.WithApplicativeAndNT;

var Infix = include.Infix;

function field(name, validator) {
  return Curry._1(liftF, {
              name: name,
              validator: validator
            });
}

function $$int(name) {
  return Curry._1(liftF, {
              name: name,
              validator: (function (input) {
                  return Relude__Relude_Result.fromOption("Invalid input for field " + (name + (" (expected int): " + input)), Relude__Relude_Int.fromString(input));
                })
            });
}

function nonEmptyString(name) {
  return Curry._1(liftF, {
              name: name,
              validator: (function (input) {
                  return Relude__Relude_Result.fromOption("Invalid input for field " + (name + (" (expected non-empty): " + input)), Relude__Relude_Option.keep(Relude__Relude_String.isNotEmpty)(input));
                })
            });
}

var Schema_map = include.map;

var Schema_Functor = include.Functor;

var Schema_BsFunctorExtensions = include.BsFunctorExtensions;

var Schema_flipMap = include.flipMap;

var Schema_void = include.$$void;

var Schema_voidRight = include.voidRight;

var Schema_voidLeft = include.voidLeft;

var Schema_flap = include.flap;

var Schema_apply = include.apply;

var Schema_Apply = include.Apply;

var Schema_BsApplyExtensions = include.BsApplyExtensions;

var Schema_applyFirst = include.applyFirst;

var Schema_applySecond = include.applySecond;

var Schema_map2 = include.map2;

var Schema_map3 = include.map3;

var Schema_map4 = include.map4;

var Schema_map5 = include.map5;

var Schema_tuple2 = include.tuple2;

var Schema_tuple3 = include.tuple3;

var Schema_tuple4 = include.tuple4;

var Schema_tuple5 = include.tuple5;

var Schema_mapTuple2 = include.mapTuple2;

var Schema_mapTuple3 = include.mapTuple3;

var Schema_mapTuple4 = include.mapTuple4;

var Schema_mapTuple5 = include.mapTuple5;

var Schema_pure = include.pure;

var Schema_Applicative = include.Applicative;

var Schema_BsApplicativeExtensions = include.BsApplicativeExtensions;

var Schema_liftA1 = include.liftA1;

var Schema_when_ = include.when_;

var Schema_unless = include.unless;

var Schema_all = include.all;

var Schema_WithApplicative = include.WithApplicative;

var Schema = {
  map: Schema_map,
  Functor: Schema_Functor,
  BsFunctorExtensions: Schema_BsFunctorExtensions,
  flipMap: Schema_flipMap,
  $$void: Schema_void,
  voidRight: Schema_voidRight,
  voidLeft: Schema_voidLeft,
  flap: Schema_flap,
  apply: Schema_apply,
  Apply: Schema_Apply,
  BsApplyExtensions: Schema_BsApplyExtensions,
  applyFirst: Schema_applyFirst,
  applySecond: Schema_applySecond,
  map2: Schema_map2,
  map3: Schema_map3,
  map4: Schema_map4,
  map5: Schema_map5,
  tuple2: Schema_tuple2,
  tuple3: Schema_tuple3,
  tuple4: Schema_tuple4,
  tuple5: Schema_tuple5,
  mapTuple2: Schema_mapTuple2,
  mapTuple3: Schema_mapTuple3,
  mapTuple4: Schema_mapTuple4,
  mapTuple5: Schema_mapTuple5,
  pure: Schema_pure,
  Applicative: Schema_Applicative,
  BsApplicativeExtensions: Schema_BsApplicativeExtensions,
  liftA1: Schema_liftA1,
  when_: Schema_when_,
  unless: Schema_unless,
  all: Schema_all,
  liftF: liftF,
  WithApplicative: Schema_WithApplicative,
  WithApplicativeAndNT: WithApplicativeAndNT,
  Infix: Infix,
  field: field,
  $$int: $$int,
  nonEmptyString: nonEmptyString
};

function make$1(first, last, age) {
  return {
          first: first,
          last: last,
          age: age
        };
}

var schema = Curry._2(Infix.$less$star$great, Curry._2(Infix.$less$star$great, Curry._2(Infix.$less$$great, make$1, nonEmptyString("first")), nonEmptyString("last")), $$int("age"));

var User = {
  make: make$1,
  schema: schema
};

var ValidationE = Relude__Relude_Validation.WithErrors(Relude__Relude_NonEmpty.List.SemigroupAny, {});

function validateUser(first, last, age) {
  var f = function (field) {
    var match = field.name;
    switch (match) {
      case "age" :
          return Relude__Relude_Result.toValidationNel(Curry._1(field.validator, age));
      case "first" :
          return Relude__Relude_Result.toValidationNel(Curry._1(field.validator, first));
      case "last" :
          return Relude__Relude_Result.toValidationNel(Curry._1(field.validator, last));
      default:
        return Relude__Relude_Validation.errorNel("Unexpected field: " + field.name);
    }
  };
  var NT = {
    f: f
  };
  var SchemaValidate = Curry._2(WithApplicativeAndNT, ValidationE.Applicative, NT);
  return Curry._1(SchemaValidate.foldFree, schema);
}

Jest.describe("Relude.Free_Applicative", (function (param) {
        Jest.test("validateUser success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: {
                              first: "Andy",
                              last: "White",
                              age: 101
                            }
                          }, Jest.Expect.expect(validateUser("Andy", "White", "101")));
              }));
        Jest.test("validateUser error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.List.make("Invalid input for field age (expected int): abc", {
                                  hd: "Invalid input for field last (expected non-empty): ",
                                  tl: {
                                    hd: "Invalid input for field first (expected non-empty): ",
                                    tl: /* [] */0
                                  }
                                })
                          }, Jest.Expect.expect(validateUser("", "", "abc")));
              }));
      }));

exports.Validator = Validator;
exports.Field = Field;
exports.Schema = Schema;
exports.User = User;
exports.ValidationE = ValidationE;
exports.validateUser = validateUser;
/* include Not a pure module */
