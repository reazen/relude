// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Caml_option = require("melange.runtime/caml_option.js");
var Relude__Relude_IO = require("relude/./Relude_IO.js");
var Relude__Relude_OptionT = require("relude/./Relude_OptionT.js");

var IOE = Relude__Relude_IO.WithError({});

var OptionIOE = Relude__Relude_OptionT.WithMonad(IOE.Monad);

var $less$$great = OptionIOE.Infix.$less$$great;

var $less$$$great = OptionIOE.Infix.$less$$$great;

var $great$great$eq = OptionIOE.Infix.$great$great$eq;

Jest.describe("OptionT", (function (param) {
        Jest.testAsync("make", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (_x) {
                        if (_x.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("error"));
                        }
                        var assertion = _x._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("none"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._2(OptionIOE.map, (function (a) {
                                return Jest.Expect.toEqual(2, Jest.Expect.expect(a));
                              }), Curry._1(OptionIOE.make, Curry._1(IOE.pure, 2)))));
              }));
        Jest.testAsync("map", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var assertion = param._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._2(OptionIOE.map, (function (a) {
                                return Jest.Expect.toEqual(4, Jest.Expect.expect(a));
                              }), Curry._2(OptionIOE.map, (function (a) {
                                    return (a << 1);
                                  }), Curry._1(OptionIOE.pure, 2)))));
              }));
        Jest.testAsync("apply", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var assertion = param._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._2(OptionIOE.map, (function (a) {
                                return Jest.Expect.toEqual(4, Jest.Expect.expect(a));
                              }), Curry._2(OptionIOE.apply, Curry._1(OptionIOE.pure, (function (a) {
                                        return (a << 1);
                                      })), Curry._1(OptionIOE.pure, 2)))));
              }));
        Jest.testAsync("pure", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var assertion = param._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._1(OptionIOE.pure, Jest.pass)));
              }));
        Jest.testAsync("bind", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var assertion = param._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._2(OptionIOE.map, (function (a) {
                                return Jest.Expect.toEqual(4, Jest.Expect.expect(a));
                              }), Curry._2(OptionIOE.flatMap, (function (a) {
                                    return Curry._1(OptionIOE.pure, (a << 1));
                                  }), Curry._1(OptionIOE.pure, 2)))));
              }));
        Jest.testAsync("operators", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var assertion = param._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._2($less$$$great, Curry._2($great$great$eq, Curry._2($less$$$great, Curry._1(OptionIOE.pure, 2), (function (a) {
                                        return Math.imul(a, 3);
                                      })), (function (a) {
                                    return Curry._1(OptionIOE.pure, a + 7 | 0);
                                  })), (function (a) {
                                return Jest.Expect.toEqual(13, Jest.Expect.expect(a));
                              }))));
              }));
        Jest.testAsync("subflatMap", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var assertion = param._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._2($less$$$great, Curry._2(OptionIOE.subflatMap, (function (a) {
                                    return Math.imul(a, 3);
                                  }), Curry._1(OptionIOE.pure, 2)), (function (a) {
                                return Jest.Expect.toEqual(6, Jest.Expect.expect(a));
                              }))));
              }));
        Jest.testAsync("semiflatMap", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var assertion = param._0;
                        if (assertion !== undefined) {
                          return Curry._1(onDone, Caml_option.valFromOption(assertion));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Curry._1(OptionIOE.runOptionT, Curry._2($less$$$great, Curry._2(OptionIOE.semiflatMap, (function (a) {
                                    return Relude__Relude_IO.pure(Math.imul(a, 3));
                                  }), Curry._1(OptionIOE.pure, 2)), (function (a) {
                                return Jest.Expect.toEqual(6, Jest.Expect.expect(a));
                              }))));
              }));
      }));

exports.IOE = IOE;
exports.OptionIOE = OptionIOE;
exports.$less$$great = $less$$great;
exports.$less$$$great = $less$$$great;
exports.$great$great$eq = $great$great$eq;
/* IOE Not a pure module */
