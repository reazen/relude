// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_List = require("relude/./Relude_List.js");
var Relude__Relude_String = require("relude/./Relude_String.js");

Jest.describe("String", (function (param) {
        Jest.test("length empty string", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_String.length(Relude__Relude_String.empty)));
              }));
        Jest.test("length non-empty string", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_String.length("abc")));
              }));
        Jest.test("isEmpty empty string", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_String.isEmpty("")));
              }));
        Jest.test("isEmpty non-empty string", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_String.isEmpty("abc")));
              }));
        Jest.test("isNotEmpty empty string", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_String.isNotEmpty("")));
              }));
        Jest.test("isNotEmpty non-empty string", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_String.isNotEmpty("abc")));
              }));
        Jest.test("toNonEmpty (empty)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toNonEmpty("")));
              }));
        Jest.test("toNonEmpty (non-empty)", (function (param) {
                return Jest.Expect.toEqual("abc", Jest.Expect.expect(Relude__Relude_String.toNonEmpty("abc")));
              }));
        Jest.test("trim empty string", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Relude__Relude_String.trim("")));
              }));
        Jest.test("trim whitespace string", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Relude__Relude_String.trim("  \t")));
              }));
        Jest.test("trim no whitespace string", (function (param) {
                return Jest.Expect.toEqual("test", Jest.Expect.expect(Relude__Relude_String.trim("test")));
              }));
        Jest.test("trim whitespace string", (function (param) {
                return Jest.Expect.toEqual("hello\t world", Jest.Expect.expect(Relude__Relude_String.trim(" \t\t   hello\t world\t \t  ")));
              }));
        Jest.test("isWhitespace empty string", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_String.isWhitespace("")));
              }));
        Jest.test("isNonWhitespace (only newlines)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_String.isNonWhitespace("\n\n")));
              }));
        Jest.test("isNonWhitespace (un-trimmed)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_String.isNonWhitespace("\nfoo\n")));
              }));
        Jest.test("toNonWhitespace empty string", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toNonWhitespace("")));
              }));
        Jest.test("toNonWhitespace non-empty string", (function (param) {
                return Jest.Expect.toEqual(" hi ", Jest.Expect.expect(Relude__Relude_String.toNonWhitespace(" hi ")));
              }));
        Jest.test("concat", (function (param) {
                return Jest.Expect.toEqual("ab", Jest.Expect.expect(Relude__Relude_String.concat("a", "b")));
              }));
        Jest.test("concatNamed", (function (param) {
                return Jest.Expect.toEqual("abcdef", Jest.Expect.expect(Curry._2(Relude__Relude_String.concatNamed, "abc", "def")));
              }));
        Jest.test("concatArray", (function (param) {
                return Jest.Expect.toEqual("ab", Jest.Expect.expect(Relude__Relude_String.concatArray([
                                    "a",
                                    "b"
                                  ])));
              }));
        Jest.test("concatList", (function (param) {
                return Jest.Expect.toEqual("foo bar", Jest.Expect.expect(Relude__Relude_String.concatList({
                                    hd: "foo",
                                    tl: {
                                      hd: " ",
                                      tl: {
                                        hd: "bar",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("guard true", (function (param) {
                return Jest.Expect.toEqual("hi", Jest.Expect.expect(Curry._2(Relude__Relude_String.guard, true, "hi")));
              }));
        Jest.test("guard false", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Curry._2(Relude__Relude_String.guard, false, "hi")));
              }));
        Jest.test("power", (function (param) {
                return Jest.Expect.toEqual("hihihihi", Jest.Expect.expect(Curry._2(Relude__Relude_String.power, "hi", 4)));
              }));
        Jest.test("make", (function (param) {
                return Jest.Expect.toEqual("true", Jest.Expect.expect(Relude__Relude_String.make(true)));
              }));
        Jest.test("makeWithIndex", (function (param) {
                return Jest.Expect.toEqual("01234", Jest.Expect.expect(Relude__Relude_String.makeWithIndex(5, (function (i) {
                                      return String(i);
                                    }))));
              }));
        Jest.test("repeat", (function (param) {
                return Jest.Expect.toEqual("hi hi hi hi hi ", Jest.Expect.expect(Relude__Relude_String.repeat(5, "hi ")));
              }));
        Jest.test("toUpperCase", (function (param) {
                return Jest.Expect.toEqual("RELUDE!", Jest.Expect.expect(Relude__Relude_String.toUpperCase("Relude!")));
              }));
        Jest.test("toLowerCase", (function (param) {
                return Jest.Expect.toEqual("relude!", Jest.Expect.expect(Relude__Relude_String.toLowerCase("ReLude!")));
              }));
        Jest.test("fromCharCode", (function (param) {
                return Jest.Expect.toEqual("A", Jest.Expect.expect(Relude__Relude_String.fromCharCode(65)));
              }));
        Jest.test("charCodeAt (success)", (function (param) {
                return Jest.Expect.toEqual(97, Jest.Expect.expect(Relude__Relude_String.charCodeAt(0, "abc")));
              }));
        Jest.test("charCodeAt (negative index)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.charCodeAt(-1, "abc")));
              }));
        Jest.test("charCodeAt (empty string)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.charCodeAt(0, "")));
              }));
        Jest.test("charAt success", (function (param) {
                return Jest.Expect.toEqual("c", Jest.Expect.expect(Relude__Relude_String.charAt(2, "abcdefg")));
              }));
        Jest.test("charAt failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.charAt(7, "abcdefg")));
              }));
        Jest.test("charAtNullable success", (function (param) {
                return Jest.Expect.toEqual("c", Jest.Expect.expect(Relude__Relude_String.charAtNullable(2, "abcdefg")));
              }));
        Jest.test("charAtNullable failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.charAtNullable(7, "abcdefg")));
              }));
        Jest.test("charAtOrThrow success", (function (param) {
                return Jest.Expect.toEqual("c", Jest.Expect.expect(Relude__Relude_String.charAtOrThrow(2, "abcdefg")));
              }));
        Jest.test("charAtOrThrow failure", (function (param) {
                return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                return Relude__Relude_String.charAtOrThrow(7, "abcdefg");
                              }));
              }));
        Jest.test("charAtOrEmpty (in range)", (function (param) {
                return Jest.Expect.toEqual("a", Jest.Expect.expect(Relude__Relude_String.charAtOrEmpty(0, "abc")));
              }));
        Jest.test("charAtOrEmpty (empty string)", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Relude__Relude_String.charAtOrEmpty(0, "")));
              }));
        Jest.test("charAtOrEmpty (above range)", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Relude__Relude_String.charAtOrEmpty(2, "a")));
              }));
        Jest.test("charAtOrEmpty (below range)", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Relude__Relude_String.charAtOrEmpty(-1, "abc")));
              }));
        Jest.test("toList", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "b",
                              tl: {
                                hd: "c",
                                tl: {
                                  hd: "d",
                                  tl: {
                                    hd: "e",
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_String.toList("abcde")));
              }));
        Jest.test("toArray", (function (param) {
                return Jest.Expect.toEqual([
                            "a",
                            "b",
                            "c",
                            "d",
                            "e"
                          ], Jest.Expect.expect(Relude__Relude_String.toArray("abcde")));
              }));
        Jest.test("foldLeft", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "b",
                              tl: {
                                hd: "c",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_String.foldLeft((function (acc, str) {
                                      return Relude__Relude_List.concat(acc, {
                                                  hd: str,
                                                  tl: /* [] */0
                                                });
                                    }), /* [] */0, "abc")));
              }));
        Jest.test("foldRight", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "c",
                            tl: {
                              hd: "b",
                              tl: {
                                hd: "a",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_String.foldRight((function (str, acc) {
                                      return Relude__Relude_List.concat(acc, {
                                                  hd: str,
                                                  tl: /* [] */0
                                                });
                                    }), /* [] */0, "abc")));
              }));
        Jest.test("endsWith", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_String.endsWith("de", "abcde")));
              }));
        Jest.test("startsWith", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_String.startsWith("ab", "abcde")));
              }));
        Jest.test("contains", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_String.contains("cd", "abcde")));
              }));
        Jest.test("indexOf success", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Relude__Relude_String.indexOf("cd", "abcde")));
              }));
        Jest.test("indexOf failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.indexOf("x", "abcde")));
              }));
        Jest.test("lastIndexOf success", (function (param) {
                return Jest.Expect.toEqual(5, Jest.Expect.expect(Relude__Relude_String.lastIndexOf("cd", "abcdecd")));
              }));
        Jest.test("indexOf failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.lastIndexOf("x", "abcde")));
              }));
        Jest.test("replaceFirst", (function (param) {
                return Jest.Expect.toEqual("axyzcde", Jest.Expect.expect(Relude__Relude_String.replaceFirst("b", "xyz", "abcde")));
              }));
        Jest.test("replaceEach", (function (param) {
                return Jest.Expect.toEqual("axyzcdexyz", Jest.Expect.expect(Relude__Relude_String.replaceEach("b", "xyz", "abcdeb")));
              }));
        Jest.test("replaceEach special characters", (function (param) {
                return Jest.Expect.toEqual("a b c", Jest.Expect.expect(Relude__Relude_String.replaceEach("+", " ", "a+b+c")));
              }));
        Jest.test("replaceRegex", (function (param) {
                return Jest.Expect.toEqual("axyzcde", Jest.Expect.expect(Relude__Relude_String.replaceRegex(/b/, "xyz", "abcde")));
              }));
        Jest.test("removeFirst", (function (param) {
                return Jest.Expect.toEqual("foobar baz", Jest.Expect.expect(Relude__Relude_String.removeFirst(" ", "foo bar baz")));
              }));
        Jest.test("removeEach", (function (param) {
                return Jest.Expect.toEqual("foobarbaz", Jest.Expect.expect(Relude__Relude_String.removeEach(" ", "foo bar baz")));
              }));
        Jest.test("slice", (function (param) {
                return Jest.Expect.toEqual("cde", Jest.Expect.expect(Relude__Relude_String.slice(2, 5, "abcdefg")));
              }));
        Jest.test("sliceToEnd", (function (param) {
                return Jest.Expect.toEqual("cdefg", Jest.Expect.expect(Relude__Relude_String.sliceToEnd(2, "abcdefg")));
              }));
        Jest.test("splitArray", (function (param) {
                return Jest.Expect.toEqual([
                            "a",
                            "b",
                            "c"
                          ], Jest.Expect.expect(Relude__Relude_String.splitArray(",", "a,b,c")));
              }));
        Jest.test("splitList", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "b",
                              tl: {
                                hd: "c",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_String.splitList(",", "a,b,c")));
              }));
        Jest.test("splitAt -7", (function (param) {
                return Jest.Expect.toEqual([
                            "",
                            "abcdef"
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(-7, "abcdef")));
              }));
        Jest.test("splitAt -6", (function (param) {
                return Jest.Expect.toEqual([
                            "",
                            "abcdef"
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(-6, "abcdef")));
              }));
        Jest.test("splitAt -4", (function (param) {
                return Jest.Expect.toEqual([
                            "ab",
                            "cdef"
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(-4, "abcdef")));
              }));
        Jest.test("splitAt -1", (function (param) {
                return Jest.Expect.toEqual([
                            "abcde",
                            "f"
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(-1, "abcdef")));
              }));
        Jest.test("splitAt 0", (function (param) {
                return Jest.Expect.toEqual([
                            "",
                            "abcdef"
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(0, "abcdef")));
              }));
        Jest.test("splitAt 2", (function (param) {
                return Jest.Expect.toEqual([
                            "ab",
                            "cdef"
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(2, "abcdef")));
              }));
        Jest.test("splitAt 6", (function (param) {
                return Jest.Expect.toEqual([
                            "abcdef",
                            ""
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(6, "abcdef")));
              }));
        Jest.test("splitAt 7", (function (param) {
                return Jest.Expect.toEqual([
                            "abcdef",
                            ""
                          ], Jest.Expect.expect(Relude__Relude_String.splitAt(7, "abcdef")));
              }));
        Jest.test("mapChars", (function (param) {
                return Jest.Expect.toEqual("aabbcc", Jest.Expect.expect(Relude__Relude_String.mapChars((function (s) {
                                      return s + s;
                                    }), "abc")));
              }));
        Jest.testAll("padStart", {
              hd: [
                "abc",
                "",
                10,
                "abc"
              ],
              tl: {
                hd: [
                  "abc",
                  " ",
                  10,
                  "       abc"
                ],
                tl: {
                  hd: [
                    "abc",
                    "foo",
                    10,
                    "foofoofabc"
                  ],
                  tl: {
                    hd: [
                      "abc",
                      "123456",
                      6,
                      "123abc"
                    ],
                    tl: {
                      hd: [
                        "abc",
                        "0",
                        8,
                        "00000abc"
                      ],
                      tl: {
                        hd: [
                          "abc",
                          " ",
                          1,
                          "abc"
                        ],
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[3], Jest.Expect.expect(Relude__Relude_String.padStart(param[2], param[1], param[0])));
              }));
        Jest.testAll("padEnd", {
              hd: [
                "abc",
                "",
                10,
                "abc"
              ],
              tl: {
                hd: [
                  "abc",
                  " ",
                  10,
                  "abc       "
                ],
                tl: {
                  hd: [
                    "abc",
                    "foo",
                    10,
                    "abcfoofoof"
                  ],
                  tl: {
                    hd: [
                      "abc",
                      "123456",
                      6,
                      "abc123"
                    ],
                    tl: {
                      hd: [
                        "abc",
                        "0",
                        8,
                        "abc00000"
                      ],
                      tl: {
                        hd: [
                          "abc",
                          " ",
                          1,
                          "abc"
                        ],
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[3], Jest.Expect.expect(Relude__Relude_String.padEnd(param[2], param[1], param[0])));
              }));
        Jest.test("fromInt", (function (param) {
                return Jest.Expect.toEqual("-20", Jest.Expect.expect(Relude__Relude_String.fromInt(-20)));
              }));
        Jest.test("toInt success", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_String.toInt("3")));
              }));
        Jest.test("toInt failure on empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toInt("")));
              }));
        Jest.test("toInt failure on mixed", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toInt("3a")));
              }));
        Jest.test("toInt failure on float", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toInt("3.14")));
              }));
        Jest.test("toInt failure on alpha", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toInt("abc")));
              }));
        Jest.test("fromFloat", (function (param) {
                return Jest.Expect.toEqual("3.1415", Jest.Expect.expect(Relude__Relude_String.fromFloat(3.1415)));
              }));
        Jest.test("fromFloat (ends in zero)", (function (param) {
                return Jest.Expect.toEqual("3", Jest.Expect.expect(Relude__Relude_String.fromFloat(3.000)));
              }));
        Jest.test("toFloat success", (function (param) {
                return Jest.Expect.toEqual(3.14, Jest.Expect.expect(Relude__Relude_String.toFloat("3.14")));
              }));
        Jest.test("toFloat success on int", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_String.toFloat("3")));
              }));
        Jest.test("toFloat failure on empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toFloat("")));
              }));
        Jest.test("toFloat failure on mixed", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toFloat("3.14a")));
              }));
        Jest.test("toFloat failure on alpha", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_String.toFloat("abc")));
              }));
        Jest.test("MonoidExtensions guard false", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Curry._2(Relude__Relude_String.guard, false, "hi")));
              }));
        Jest.test("MonoidExtensions guard true", (function (param) {
                return Jest.Expect.toEqual("hi", Jest.Expect.expect(Curry._2(Relude__Relude_String.guard, true, "hi")));
              }));
        Jest.test("MonoidExtensions power", (function (param) {
                return Jest.Expect.toEqual("hihihihihi", Jest.Expect.expect(Curry._2(Relude__Relude_String.power, "hi", 5)));
              }));
      }));

/*  Not a pure module */
