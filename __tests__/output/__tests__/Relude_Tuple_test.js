// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Bool = require("relude/./Relude_Bool.js");
var Relude__Relude_List = require("relude/./Relude_List.js");
var Relude__Relude_Unit = require("relude/./Relude_Unit.js");
var Relude__Relude_Array = require("relude/./Relude_Array.js");
var Relude__Relude_Float = require("relude/./Relude_Float.js");
var Relude__Relude_Tuple = require("relude/./Relude_Tuple.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_Tuple2 = require("relude/./Relude_Tuple2.js");
var Relude__Relude_Tuple3 = require("relude/./Relude_Tuple3.js");
var Relude__Relude_Tuple4 = require("relude/./Relude_Tuple4.js");
var Relude__Relude_Tuple5 = require("relude/./Relude_Tuple5.js");

Jest.describe("Tuple constructors", (function (param) {
        Jest.test("make", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            0
                          ], Jest.Expect.expect(Relude__Relude_Tuple.make("A", 0)));
              }));
        Jest.test("make3", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            0,
                            true
                          ], Jest.Expect.expect(Relude__Relude_Tuple.make3("A", 0, true)));
              }));
        Jest.test("make4", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            0,
                            true,
                            false
                          ], Jest.Expect.expect(Relude__Relude_Tuple.make4("A", 0, true, false)));
              }));
        Jest.test("make5", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            0,
                            true,
                            false,
                            3.14
                          ], Jest.Expect.expect(Relude__Relude_Tuple.make5("A", 0, true, false, 3.14)));
              }));
      }));

Jest.describe("Tuple fromArray", (function (param) {
        Jest.test("fromArray (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArray([
                                    0,
                                    1
                                  ])));
              }));
        Jest.test("fromArray (failure on long array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromArray([
                                    0,
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("fromArray3 (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArray3([
                                    0,
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("fromArray3 (failure on short array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromArray3([
                                    0,
                                    1
                                  ])));
              }));
        Jest.test("fromArray4 (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArray4([
                                    0,
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("fromArray4 (failure on long array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromArray4([
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("fromArray5 (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2,
                            3,
                            4
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArray5([
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("fromArray5 (failure on long array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromArray5([
                                    0,
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
      }));

Jest.describe("Tuple fromArrayAtLeast", (function (param) {
        Jest.test("fromArrayAtLeast2", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArrayAtLeast2(Relude__Relude_Array.repeat(6, "A"))));
              }));
        Jest.test("fromArrayAtLeast3", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArrayAtLeast3(Relude__Relude_Array.repeat(6, "A"))));
              }));
        Jest.test("fromArrayAtLeast4", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A",
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArrayAtLeast4(Relude__Relude_Array.repeat(6, "A"))));
              }));
        Jest.test("fromArrayAtLeast5", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A",
                            "A",
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromArrayAtLeast5(Relude__Relude_Array.repeat(6, "A"))));
              }));
      }));

Jest.describe("Tuple fromList", (function (param) {
        Jest.test("fromList (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromList({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("fromList (failure on long array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromList({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("fromList3 (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromList3({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("fromList3 (failure on short array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromList3({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("fromList4 (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromList4({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("fromList4 (failure on long array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromList4({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("fromList4 (failure on long array)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fromList5({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: {
                                              hd: 5,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("fromList5 (success)", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2,
                            3,
                            4
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromList5({
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
      }));

Jest.describe("Tuple fromListAtLeast", (function (param) {
        Jest.test("fromListAtLeast2", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromListAtLeast2(Relude__Relude_List.repeat(6, "A"))));
              }));
        Jest.test("fromListAtLeast3", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromListAtLeast3(Relude__Relude_List.repeat(6, "A"))));
              }));
        Jest.test("fromListAtLeast4", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A",
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromListAtLeast4(Relude__Relude_List.repeat(6, "A"))));
              }));
        Jest.test("fromListAtLeast5", (function (param) {
                return Jest.Expect.toEqual([
                            "A",
                            "A",
                            "A",
                            "A",
                            "A"
                          ], Jest.Expect.expect(Relude__Relude_Tuple.fromListAtLeast5(Relude__Relude_List.repeat(6, "A"))));
              }));
      }));

Jest.describe("Tuple apply", (function (param) {
        Jest.test("apply2", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Tuple.apply2((function (a, b) {
                                      return a + b | 0;
                                    }), [
                                    1,
                                    2
                                  ])));
              }));
        Jest.test("apply3", (function (param) {
                return Jest.Expect.toEqual(6, Jest.Expect.expect(Relude__Relude_Tuple.apply3((function (a, b, c) {
                                      return (a + b | 0) + c | 0;
                                    }), [
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("apply4", (function (param) {
                return Jest.Expect.toEqual(10, Jest.Expect.expect(Relude__Relude_Tuple.apply4((function (a, b, c, d) {
                                      return ((a + b | 0) + c | 0) + d | 0;
                                    }), [
                                    1,
                                    2,
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("apply5", (function (param) {
                return Jest.Expect.toEqual(15, Jest.Expect.expect(Relude__Relude_Tuple.apply5((function (a, b, c, d, e) {
                                      return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                    }), [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                  ])));
              }));
      }));

Jest.describe("Tuple first", (function (param) {
        Jest.test("first2", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Tuple.first2([
                                    42,
                                    "hi"
                                  ])));
              }));
        Jest.test("first3", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Tuple.first3([
                                    42,
                                    "hi",
                                    true
                                  ])));
              }));
        Jest.test("first4", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Tuple.first4([
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ])));
              }));
        Jest.test("first5", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Tuple.first5([
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

Jest.describe("Tuple second", (function (param) {
        Jest.test("second2", (function (param) {
                return Jest.Expect.toEqual("hi", Jest.Expect.expect(Relude__Relude_Tuple.second2([
                                    42,
                                    "hi"
                                  ])));
              }));
        Jest.test("second3", (function (param) {
                return Jest.Expect.toEqual("hi", Jest.Expect.expect(Relude__Relude_Tuple.second3([
                                    42,
                                    "hi",
                                    true
                                  ])));
              }));
        Jest.test("second4", (function (param) {
                return Jest.Expect.toEqual("hi", Jest.Expect.expect(Relude__Relude_Tuple.second4([
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ])));
              }));
        Jest.test("second5", (function (param) {
                return Jest.Expect.toEqual("hi", Jest.Expect.expect(Relude__Relude_Tuple.second5([
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

Jest.describe("Tuple third", (function (param) {
        Jest.test("third3", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Tuple.third3([
                                    42,
                                    "hi",
                                    true
                                  ])));
              }));
        Jest.test("third4", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Tuple.third4([
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ])));
              }));
        Jest.test("third5", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Tuple.third5([
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

Jest.describe("Tuple fourth", (function (param) {
        Jest.test("fourth4", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fourth4([
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ])));
              }));
        Jest.test("fourth5", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Tuple.fourth5([
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

Jest.describe("Tuple fifth", (function (param) {
        Jest.test("fifth5", (function (param) {
                return Jest.Expect.toEqual(99.9, Jest.Expect.expect(Relude__Relude_Tuple.fifth5([
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

Jest.describe("Tuple showBy", (function (param) {
        Jest.test("showBy2", (function (param) {
                return Jest.Expect.toEqual("(42, hi)", Jest.Expect.expect(Relude__Relude_Tuple.showBy2(Relude__Relude_Int.show, Relude__Relude_String.show, [
                                    42,
                                    "hi"
                                  ])));
              }));
        Jest.test("showBy3", (function (param) {
                return Jest.Expect.toEqual("(42, hi, true)", Jest.Expect.expect(Relude__Relude_Tuple.showBy3(Relude__Relude_Int.show, Relude__Relude_String.show, Relude__Relude_Bool.show, [
                                    42,
                                    "hi",
                                    true
                                  ])));
              }));
        Jest.test("showBy4", (function (param) {
                return Jest.Expect.toEqual("(42, hi, true, ())", Jest.Expect.expect(Relude__Relude_Tuple.showBy4(Relude__Relude_Int.show, Relude__Relude_String.show, Relude__Relude_Bool.show, Relude__Relude_Unit.show, [
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ])));
              }));
        Jest.test("showBy5", (function (param) {
                return Jest.Expect.toEqual("(42, hi, true, (), 99.9)", Jest.Expect.expect(Relude__Relude_Tuple.showBy5(Relude__Relude_Int.show, Relude__Relude_String.show, Relude__Relude_Bool.show, Relude__Relude_Unit.show, Relude__Relude_Float.show, [
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

var Eq2 = Relude__Relude_Tuple2.WithEqs(Relude__Relude_Int.Eq, Relude__Relude_String.Eq);

var Eq3 = Relude__Relude_Tuple3.WithEqs(Relude__Relude_Int.Eq, Relude__Relude_String.Eq, Relude__Relude_Bool.Eq);

var Eq4 = Relude__Relude_Tuple4.WithEqs(Relude__Relude_Int.Eq, Relude__Relude_String.Eq, Relude__Relude_Bool.Eq, Relude__Relude_Unit.Eq);

var Eq5 = Relude__Relude_Tuple5.WithEqs(Relude__Relude_Int.Eq, Relude__Relude_String.Eq, Relude__Relude_Bool.Eq, Relude__Relude_Unit.Eq, Relude__Relude_Float.Eq);

Jest.describe("Tuple WithEqs", (function (param) {
        Jest.test("WithEqs2", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Eq2.eq, [
                                    42,
                                    "hi"
                                  ], [
                                    42,
                                    "hi"
                                  ])));
              }));
        Jest.test("WithEqs3", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Eq3.eq, [
                                    42,
                                    "hi",
                                    true
                                  ], [
                                    42,
                                    "hi",
                                    true
                                  ])));
              }));
        Jest.test("WithEqs4", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Eq4.eq, [
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ], [
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ])));
              }));
        Jest.test("WithEqs5", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Eq5.eq, [
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ], [
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

var user1 = {
  first: "Andy",
  last: "White",
  age: 99,
  email: "test@example.com",
  approved: true
};

function f(user) {
  return [
          user.first,
          user.last
        ];
}

var EqBy2 = Relude__Relude_Tuple2.EqBy(Relude__Relude_String.Eq, Relude__Relude_String.Eq, {
      f: f
    });

function f$1(user) {
  return [
          user.first,
          user.last,
          user.age
        ];
}

var EqBy3 = Relude__Relude_Tuple3.EqBy(Relude__Relude_String.Eq, Relude__Relude_String.Eq, Relude__Relude_Int.Eq, {
      f: f$1
    });

function f$2(user) {
  return [
          user.first,
          user.last,
          user.age,
          user.email
        ];
}

var EqBy4 = Relude__Relude_Tuple4.EqBy(Relude__Relude_String.Eq, Relude__Relude_String.Eq, Relude__Relude_Int.Eq, Relude__Relude_String.Eq, {
      f: f$2
    });

function f$3(user) {
  return [
          user.first,
          user.last,
          user.age,
          user.email,
          user.approved
        ];
}

var EqBy5 = Relude__Relude_Tuple5.EqBy(Relude__Relude_String.Eq, Relude__Relude_String.Eq, Relude__Relude_Int.Eq, Relude__Relude_String.Eq, Relude__Relude_Bool.Eq, {
      f: f$3
    });

function f$4(user) {
  return [
          user.first,
          user.last
        ];
}

var OrdBy2 = Relude__Relude_Tuple2.OrdBy(Relude__Relude_String.Ord, Relude__Relude_String.Ord, {
      f: f$4
    });

function f$5(user) {
  return [
          user.first,
          user.last,
          user.age
        ];
}

var OrdBy3 = Relude__Relude_Tuple3.OrdBy(Relude__Relude_String.Ord, Relude__Relude_String.Ord, Relude__Relude_Int.Ord, {
      f: f$5
    });

function f$6(user) {
  return [
          user.first,
          user.last,
          user.age,
          user.email
        ];
}

var OrdBy4 = Relude__Relude_Tuple4.OrdBy(Relude__Relude_String.Ord, Relude__Relude_String.Ord, Relude__Relude_Int.Ord, Relude__Relude_String.Ord, {
      f: f$6
    });

function f$7(user) {
  return [
          user.first,
          user.last,
          user.age,
          user.email,
          user.approved
        ];
}

var OrdBy5 = Relude__Relude_Tuple5.OrdBy(Relude__Relude_String.Ord, Relude__Relude_String.Ord, Relude__Relude_Int.Ord, Relude__Relude_String.Ord, Relude__Relude_Bool.Ord, {
      f: f$7
    });

var User = {
  user1: user1,
  EqBy2: EqBy2,
  EqBy3: EqBy3,
  EqBy4: EqBy4,
  EqBy5: EqBy5,
  OrdBy2: OrdBy2,
  OrdBy3: OrdBy3,
  OrdBy4: OrdBy4,
  OrdBy5: OrdBy5
};

Jest.describe("Tuple EqBy", (function (param) {
        Jest.test("EqBy2", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(EqBy2.eq, user1, user1)));
              }));
        Jest.test("EqBy3", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(EqBy3.eq, user1, user1)));
              }));
        Jest.test("EqBy4", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(EqBy4.eq, user1, user1)));
              }));
        Jest.test("EqBy5", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(EqBy5.eq, user1, user1)));
              }));
      }));

Jest.describe("Tuple compareBy", (function (param) {
        Jest.test("compareBy2", (function (param) {
                return Jest.Expect.toEqual("less_than", Jest.Expect.expect(Relude__Relude_Tuple.compareBy2(Relude__Relude_String.compare, Relude__Relude_Int.compare, [
                                    "a",
                                    42
                                  ], [
                                    "a",
                                    43
                                  ])));
              }));
        Jest.test("compareBy3", (function (param) {
                return Jest.Expect.toEqual("greater_than", Jest.Expect.expect(Relude__Relude_Tuple.compareBy3(Relude__Relude_String.compare, Relude__Relude_Int.compare, Relude__Relude_Bool.compare, [
                                    "a",
                                    42,
                                    true
                                  ], [
                                    "a",
                                    42,
                                    false
                                  ])));
              }));
        Jest.test("compareBy4", (function (param) {
                return Jest.Expect.toEqual("less_than", Jest.Expect.expect(Relude__Relude_Tuple.compareBy4(Relude__Relude_String.compare, Relude__Relude_Int.compare, Relude__Relude_Bool.compare, Relude__Relude_Float.compare, [
                                    "a",
                                    42,
                                    true,
                                    98.8
                                  ], [
                                    "a",
                                    42,
                                    true,
                                    99.9
                                  ])));
              }));
        Jest.test("compareBy5", (function (param) {
                return Jest.Expect.toEqual("greater_than", Jest.Expect.expect(Relude__Relude_Tuple.compareBy5(Relude__Relude_String.compare, Relude__Relude_Int.compare, Relude__Relude_Bool.compare, Relude__Relude_Unit.compare, Relude__Relude_Float.compare, [
                                    "a",
                                    42,
                                    true,
                                    undefined,
                                    99.9
                                  ], [
                                    "a",
                                    42,
                                    true,
                                    undefined,
                                    99.7
                                  ])));
              }));
      }));

var Ord2 = Relude__Relude_Tuple2.WithOrds(Relude__Relude_Int.Ord, Relude__Relude_String.Ord);

var Ord3 = Relude__Relude_Tuple3.WithOrds(Relude__Relude_Int.Ord, Relude__Relude_String.Ord, Relude__Relude_Bool.Ord);

var Ord4 = Relude__Relude_Tuple4.WithOrds(Relude__Relude_Int.Ord, Relude__Relude_String.Ord, Relude__Relude_Bool.Ord, Relude__Relude_Unit.Ord);

var Ord5 = Relude__Relude_Tuple5.WithOrds(Relude__Relude_Int.Ord, Relude__Relude_String.Ord, Relude__Relude_Bool.Ord, Relude__Relude_Unit.Ord, Relude__Relude_Float.Ord);

Jest.describe("Tuple WithOrds", (function (param) {
        Jest.test("WithOrds2", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(Ord2.compare, [
                                    42,
                                    "hi"
                                  ], [
                                    42,
                                    "hi"
                                  ])));
              }));
        Jest.test("WithOrds3", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(Ord3.compare, [
                                    42,
                                    "hi",
                                    true
                                  ], [
                                    42,
                                    "hi",
                                    true
                                  ])));
              }));
        Jest.test("WithOrds4", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(Ord4.compare, [
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ], [
                                    42,
                                    "hi",
                                    true,
                                    undefined
                                  ])));
              }));
        Jest.test("WithOrds5", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(Ord5.compare, [
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ], [
                                    42,
                                    "hi",
                                    true,
                                    undefined,
                                    99.9
                                  ])));
              }));
      }));

Jest.describe("Tuple OrdBy", (function (param) {
        Jest.test("OrdBy2", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(OrdBy2.compare, user1, user1)));
              }));
        Jest.test("OrdBy3", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(OrdBy3.compare, user1, user1)));
              }));
        Jest.test("OrdBy4", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(OrdBy4.compare, user1, user1)));
              }));
        Jest.test("OrdBy5", (function (param) {
                return Jest.Expect.toEqual("equal_to", Jest.Expect.expect(Curry._2(OrdBy5.compare, user1, user1)));
              }));
      }));

exports.Eq2 = Eq2;
exports.Eq3 = Eq3;
exports.Eq4 = Eq4;
exports.Eq5 = Eq5;
exports.User = User;
exports.Ord2 = Ord2;
exports.Ord3 = Ord3;
exports.Ord4 = Ord4;
exports.Ord5 = Ord5;
/*  Not a pure module */
