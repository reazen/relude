// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Caml_format = require("melange.runtime/caml_format.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_Result = require("relude/./Relude_Result.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_NonEmpty = require("relude/./Relude_NonEmpty.js");
var Relude__Relude_Validation = require("relude/./Relude_Validation.js");

var Type = {};

var $$Error = {
  Type: Type
};

var ValidationE = Relude__Relude_Validation.WithErrors(Relude__Relude_NonEmpty.List.SemigroupAny, Type);

var $less$$great = ValidationE.Infix.$less$$great;

var $less$star$great = ValidationE.Infix.$less$star$great;

function makeWithNoValidation(name, age, language) {
  return {
          name: name,
          age: age,
          language: language
        };
}

function validateName(name) {
  if (Relude__Relude_String.isWhitespace(name)) {
    return {
            TAG: /* VError */1,
            _0: Relude__Relude_NonEmpty.List.pure({
                  TAG: /* InvalidName */0,
                  _0: name
                })
          };
  } else {
    return {
            TAG: /* VOk */0,
            _0: name
          };
  }
}

function validateAge(age) {
  if (age < 0 || age > 120) {
    return {
            TAG: /* VError */1,
            _0: Relude__Relude_NonEmpty.List.pure({
                  TAG: /* InvalidAge */1,
                  _0: age
                })
          };
  } else {
    return {
            TAG: /* VOk */0,
            _0: age
          };
  }
}

function validateLanguage(lang) {
  if (lang === "English" || lang === "Spanish") {
    return {
            TAG: /* VOk */0,
            _0: lang
          };
  } else {
    return {
            TAG: /* VError */1,
            _0: Relude__Relude_NonEmpty.List.pure({
                  TAG: /* InvalidLanguage */2,
                  _0: lang
                })
          };
  }
}

function makeWithValidation(name, age, language) {
  return Curry._2($less$star$great, Curry._2($less$star$great, Curry._2($less$$great, makeWithNoValidation, validateName(name)), validateAge(age)), validateLanguage(language));
}

function makeWithValidation2(name, age, language) {
  return Curry._2(ValidationE.apply, Curry._2(ValidationE.apply, Curry._2(ValidationE.map, makeWithNoValidation, validateName(name)), validateAge(age)), validateLanguage(language));
}

var Person = {
  makeWithNoValidation: makeWithNoValidation,
  validateName: validateName,
  validateAge: validateAge,
  validateLanguage: validateLanguage,
  makeWithValidation: makeWithValidation,
  makeWithValidation2: makeWithValidation2
};

Jest.describe("Validation", (function (param) {
        Jest.test("isOk success", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_Validation.isOk({
                                    TAG: /* VOk */0,
                                    _0: 123
                                  })));
              }));
        Jest.test("isOk error", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_Validation.isOk({
                                    TAG: /* VError */1,
                                    _0: "error"
                                  })));
              }));
        Jest.test("isError success", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_Validation.isError({
                                    TAG: /* VError */1,
                                    _0: "error"
                                  })));
              }));
        Jest.test("isError error", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_Validation.isError({
                                    TAG: /* VOk */0,
                                    _0: 123
                                  })));
              }));
        Jest.test("tap success", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Validation.tap((function (i) {
                        x.contents = i;
                      }), {
                      TAG: /* VOk */0,
                      _0: 123
                    });
                return Jest.Expect.toEqual(123, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tap error", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Validation.tap((function (i) {
                        x.contents = i;
                      }), {
                      TAG: /* VError */1,
                      _0: 123
                    });
                return Jest.Expect.toEqual(0, Jest.Expect.expect(x.contents));
              }));
        Jest.test("mapError success", (function (param) {
                var actual = Relude__Relude_Validation.mapError((function (i) {
                        return i + 1 | 0;
                      }), {
                      TAG: /* VError */1,
                      _0: 123
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: 124
                          }, Jest.Expect.expect(actual));
              }));
        Jest.test("mapError error", (function (param) {
                var actual = Relude__Relude_Validation.mapError((function (i) {
                        return i + 1 | 0;
                      }), {
                      TAG: /* VOk */0,
                      _0: 123
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: 123
                          }, Jest.Expect.expect(actual));
              }));
        Jest.test("mapErrorsNel success", (function (param) {
                var actual = Relude__Relude_Validation.mapErrorsNel((function (i) {
                        return i + 1 | 0;
                      }), {
                      TAG: /* VError */1,
                      _0: Relude__Relude_NonEmpty.List.pure(123)
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.List.pure(124)
                          }, Jest.Expect.expect(actual));
              }));
        Jest.test("mapErrorsNel error", (function (param) {
                var actual = Relude__Relude_Validation.mapErrorsNel((function (i) {
                        return i + 1 | 0;
                      }), {
                      TAG: /* VOk */0,
                      _0: 123
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: 123
                          }, Jest.Expect.expect(actual));
              }));
        Jest.test("tapError success", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Validation.tapError((function (i) {
                        x.contents = i;
                      }), {
                      TAG: /* VError */1,
                      _0: 123
                    });
                return Jest.Expect.toEqual(123, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tapError error", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Validation.tapError((function (i) {
                        x.contents = i;
                      }), {
                      TAG: /* VOk */0,
                      _0: 123
                    });
                return Jest.Expect.toEqual(0, Jest.Expect.expect(x.contents));
              }));
        Jest.test("bimap success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: 124
                          }, Jest.Expect.expect(Relude__Relude_Validation.bimap((function (i) {
                                      return i + 1 | 0;
                                    }), (function (i) {
                                      return i - 1 | 0;
                                    }), {
                                    TAG: /* VOk */0,
                                    _0: 123
                                  })));
              }));
        Jest.test("bimap error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: 122
                          }, Jest.Expect.expect(Relude__Relude_Validation.bimap((function (i) {
                                      return i + 1 | 0;
                                    }), (function (i) {
                                      return i - 1 | 0;
                                    }), {
                                    TAG: /* VError */1,
                                    _0: 123
                                  })));
              }));
        Jest.test("bitap success", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Validation.bitap((function (i) {
                        x.contents = i + 1 | 0;
                      }), (function (i) {
                        x.contents = i - 1 | 0;
                      }), {
                      TAG: /* VOk */0,
                      _0: 123
                    });
                return Jest.Expect.toEqual(124, Jest.Expect.expect(x.contents));
              }));
        Jest.test("bitap error", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Validation.bitap((function (i) {
                        x.contents = i + 1 | 0;
                      }), (function (i) {
                        x.contents = i - 1 | 0;
                      }), {
                      TAG: /* VError */1,
                      _0: 123
                    });
                return Jest.Expect.toEqual(122, Jest.Expect.expect(x.contents));
              }));
        Jest.test("bind/flatMap success", (function (param) {
                var input = {
                  TAG: /* VOk */0,
                  _0: 123
                };
                var f = function (i) {
                  return {
                          TAG: /* VError */1,
                          _0: i + 1 | 0
                        };
                };
                var expected = {
                  TAG: /* VError */1,
                  _0: 124
                };
                Jest.Expect.toEqual(expected, Jest.Expect.expect(Relude__Relude_Validation.bind(input, f)));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(Relude__Relude_Validation.flatMap(f, input)));
              }));
        Jest.test("bind/flatMap error", (function (param) {
                var input = {
                  TAG: /* VError */1,
                  _0: 123
                };
                var f = function (i) {
                  return {
                          TAG: /* VOk */0,
                          _0: i + 1 | 0
                        };
                };
                var expected = {
                  TAG: /* VError */1,
                  _0: 123
                };
                Jest.Expect.toEqual(expected, Jest.Expect.expect(Relude__Relude_Validation.bind(input, f)));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(Relude__Relude_Validation.flatMap(f, input)));
              }));
        Jest.test("fromResult ok", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: 123
                          }, Jest.Expect.expect(Relude__Relude_Validation.fromResult(Relude__Relude_Result.ok(123))));
              }));
        Jest.test("fromResult error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: "error"
                          }, Jest.Expect.expect(Relude__Relude_Validation.fromResult(Relude__Relude_Result.error("error"))));
              }));
        Jest.test("toResult ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(123), Jest.Expect.expect(Relude__Relude_Validation.toResult({
                                    TAG: /* VOk */0,
                                    _0: 123
                                  })));
              }));
        Jest.test("toResult error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.error("error"), Jest.Expect.expect(Relude__Relude_Validation.toResult({
                                    TAG: /* VError */1,
                                    _0: "error"
                                  })));
              }));
        Jest.test("fromOption some", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: 123
                          }, Jest.Expect.expect(Relude__Relude_Validation.fromOption("error", Relude__Relude_Option.some(123))));
              }));
        Jest.test("fromOption none", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: "error"
                          }, Jest.Expect.expect(Relude__Relude_Validation.fromOption("error", Relude__Relude_Option.none)));
              }));
        Jest.test("fold success", (function (param) {
                var errFcn = function (i) {
                  return i + 1 | 0;
                };
                var okFcn = function (i) {
                  return i - 1 | 0;
                };
                return Jest.Expect.toEqual(122, Jest.Expect.expect(Relude__Relude_Validation.fold(errFcn, okFcn, {
                                    TAG: /* VOk */0,
                                    _0: 123
                                  })));
              }));
        Jest.test("fold error", (function (param) {
                var errFcn = function (i) {
                  return i + 1 | 0;
                };
                var okFcn = function (i) {
                  return i - 1 | 0;
                };
                return Jest.Expect.toEqual(124, Jest.Expect.expect(Relude__Relude_Validation.fold(errFcn, okFcn, {
                                    TAG: /* VError */1,
                                    _0: 123
                                  })));
              }));
        Jest.test("flip success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: 123
                          }, Jest.Expect.expect(Relude__Relude_Validation.flip({
                                    TAG: /* VOk */0,
                                    _0: 123
                                  })));
              }));
        Jest.test("flip error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: 123
                          }, Jest.Expect.expect(Relude__Relude_Validation.flip({
                                    TAG: /* VError */1,
                                    _0: 123
                                  })));
              }));
        Jest.test("map5 success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: 15
                          }, Jest.Expect.expect(Relude__Relude_Validation.map5(Relude__Relude_NonEmpty.List.concat, (function (a, b, c, d, e) {
                                      return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                    }), {
                                    TAG: /* VOk */0,
                                    _0: 1
                                  }, {
                                    TAG: /* VOk */0,
                                    _0: 2
                                  }, {
                                    TAG: /* VOk */0,
                                    _0: 3
                                  }, {
                                    TAG: /* VOk */0,
                                    _0: 4
                                  }, {
                                    TAG: /* VOk */0,
                                    _0: 5
                                  })));
              }));
        Jest.test("map5 some error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.List.pure("error")
                          }, Jest.Expect.expect(Relude__Relude_Validation.map5(Relude__Relude_NonEmpty.List.concat, (function (a, b, c, d, e) {
                                      return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                    }), {
                                    TAG: /* VOk */0,
                                    _0: 1
                                  }, {
                                    TAG: /* VOk */0,
                                    _0: 2
                                  }, {
                                    TAG: /* VError */1,
                                    _0: Relude__Relude_NonEmpty.List.pure("error")
                                  }, {
                                    TAG: /* VOk */0,
                                    _0: 4
                                  }, {
                                    TAG: /* VOk */0,
                                    _0: 5
                                  })));
              }));
        Jest.test("map5 all error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.List.make("error1", {
                                  hd: "error2",
                                  tl: {
                                    hd: "error3",
                                    tl: {
                                      hd: "error4",
                                      tl: {
                                        hd: "error5",
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                })
                          }, Jest.Expect.expect(Relude__Relude_Validation.map5(Relude__Relude_NonEmpty.List.concat, (function (a, b, c, d, e) {
                                      return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                    }), {
                                    TAG: /* VError */1,
                                    _0: Relude__Relude_NonEmpty.List.pure("error1")
                                  }, {
                                    TAG: /* VError */1,
                                    _0: Relude__Relude_NonEmpty.List.pure("error2")
                                  }, {
                                    TAG: /* VError */1,
                                    _0: Relude__Relude_NonEmpty.List.pure("error3")
                                  }, {
                                    TAG: /* VError */1,
                                    _0: Relude__Relude_NonEmpty.List.pure("error4")
                                  }, {
                                    TAG: /* VError */1,
                                    _0: Relude__Relude_NonEmpty.List.pure("error5")
                                  })));
              }));
        Jest.testAll("alignWithAppendErrors", {
              hd: [
                Relude__Relude_Validation.ok(42),
                Relude__Relude_Validation.ok("a"),
                Relude__Relude_Validation.ok({
                      TAG: /* Both */2,
                      _0: 42,
                      _1: "a"
                    })
              ],
              tl: {
                hd: [
                  Relude__Relude_Validation.ok(42),
                  Relude__Relude_Validation.error("fail2"),
                  Relude__Relude_Validation.ok({
                        TAG: /* This */0,
                        _0: 42
                      })
                ],
                tl: {
                  hd: [
                    Relude__Relude_Validation.error("fail1"),
                    Relude__Relude_Validation.ok("a"),
                    Relude__Relude_Validation.ok({
                          TAG: /* That */1,
                          _0: "a"
                        })
                  ],
                  tl: {
                    hd: [
                      Relude__Relude_Validation.error("fail1"),
                      Relude__Relude_Validation.error("fail2"),
                      Relude__Relude_Validation.error("fail1fail2")
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                var actual = Relude__Relude_Validation.alignWithAppendErrors((function (a, b) {
                        return a + b;
                      }), param[0], param[1]);
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(actual));
              }));
        Jest.testAll("alignWithWithAppendErrors", {
              hd: [
                Relude__Relude_Validation.ok(42),
                Relude__Relude_Validation.ok("99"),
                Relude__Relude_Validation.ok(141)
              ],
              tl: {
                hd: [
                  Relude__Relude_Validation.ok(42),
                  Relude__Relude_Validation.error("fail2"),
                  Relude__Relude_Validation.ok(42)
                ],
                tl: {
                  hd: [
                    Relude__Relude_Validation.error("fail1"),
                    Relude__Relude_Validation.ok("99"),
                    Relude__Relude_Validation.ok(99)
                  ],
                  tl: {
                    hd: [
                      Relude__Relude_Validation.error("fail1"),
                      Relude__Relude_Validation.error("fail2"),
                      Relude__Relude_Validation.error("fail1fail2")
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                var actual = Relude__Relude_Validation.alignWithWithAppendErrors((function (a, b) {
                        return a + b;
                      }), f, param[0], param[1]);
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(actual));
              }));
        Jest.test("makeWithValidation success", (function (param) {
                var validation = makeWithValidation("Andy", 55, "English");
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: {
                              name: "Andy",
                              age: 55,
                              language: "English"
                            }
                          }, Jest.Expect.expect(validation));
              }));
        Jest.test("makeWithValidation one error", (function (param) {
                var validation = makeWithValidation("Andy", 200, "English");
                var expected = Relude__Relude_NonEmpty.List.pure({
                      TAG: /* InvalidAge */1,
                      _0: 200
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: expected
                          }, Jest.Expect.expect(validation));
              }));
        Jest.test("makeWithValidation two errors", (function (param) {
                var validation = makeWithValidation("Andy", 200, "French");
                var expected = Relude__Relude_NonEmpty.List.make({
                      TAG: /* InvalidAge */1,
                      _0: 200
                    }, {
                      hd: {
                        TAG: /* InvalidLanguage */2,
                        _0: "French"
                      },
                      tl: /* [] */0
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: expected
                          }, Jest.Expect.expect(validation));
              }));
        Jest.test("makeWithValidation all errors", (function (param) {
                var validation = makeWithValidation("", 200, "French");
                var expected = Relude__Relude_NonEmpty.List.make({
                      TAG: /* InvalidName */0,
                      _0: ""
                    }, {
                      hd: {
                        TAG: /* InvalidAge */1,
                        _0: 200
                      },
                      tl: {
                        hd: {
                          TAG: /* InvalidLanguage */2,
                          _0: "French"
                        },
                        tl: /* [] */0
                      }
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: expected
                          }, Jest.Expect.expect(validation));
              }));
        Jest.test("makeWithValidation2 success", (function (param) {
                var validation = makeWithValidation2("Andy", 55, "English");
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: {
                              name: "Andy",
                              age: 55,
                              language: "English"
                            }
                          }, Jest.Expect.expect(validation));
              }));
        Jest.test("makeWithValidation2 one error", (function (param) {
                var validation = makeWithValidation2("Andy", 200, "English");
                var expected = Relude__Relude_NonEmpty.List.pure({
                      TAG: /* InvalidAge */1,
                      _0: 200
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: expected
                          }, Jest.Expect.expect(validation));
              }));
        Jest.test("makeWithValidation2 two errors", (function (param) {
                var validation = makeWithValidation2("Andy", 200, "French");
                var expected = Relude__Relude_NonEmpty.List.make({
                      TAG: /* InvalidAge */1,
                      _0: 200
                    }, {
                      hd: {
                        TAG: /* InvalidLanguage */2,
                        _0: "French"
                      },
                      tl: /* [] */0
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: expected
                          }, Jest.Expect.expect(validation));
              }));
        Jest.test("makeWithValidation2 all errors", (function (param) {
                var validation = makeWithValidation2("", 200, "French");
                var expected = Relude__Relude_NonEmpty.List.make({
                      TAG: /* InvalidName */0,
                      _0: ""
                    }, {
                      hd: {
                        TAG: /* InvalidAge */1,
                        _0: 200
                      },
                      tl: {
                        hd: {
                          TAG: /* InvalidLanguage */2,
                          _0: "French"
                        },
                        tl: /* [] */0
                      }
                    });
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: expected
                          }, Jest.Expect.expect(validation));
              }));
      }));

exports.$$Error = $$Error;
exports.ValidationE = ValidationE;
exports.$less$$great = $less$$great;
exports.$less$star$great = $less$star$great;
exports.Person = Person;
/* ValidationE Not a pure module */
