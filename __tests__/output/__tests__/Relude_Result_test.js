// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Caml_format = require("melange.runtime/caml_format.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Ior = require("relude/./Relude_Ior.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_Result = require("relude/./Relude_Result.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_Option_Instances = require("relude/option/Relude_Option_Instances.js");

var ResultS = Relude__Relude_Result.WithError({});

Jest.describe("Result", (function (param) {
        Jest.test("pure", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 1
                          }, Jest.Expect.expect(Relude__Relude_Result.pure(1)));
              }));
        Jest.test("map Ok", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 3
                          }, Jest.Expect.expect(Relude__Relude_Result.map((function (a) {
                                      return a + 2 | 0;
                                    }), {
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("map Error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Error */1,
                            _0: "error"
                          }, Jest.Expect.expect(Relude__Relude_Result.map((function (a) {
                                      return a + 2 | 0;
                                    }), {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  })));
              }));
        Jest.test("mapError Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(42), Jest.Expect.expect(Curry._2(Relude__Relude_Result.mapError, (function (x) {
                                      return x + x;
                                    }), Relude__Relude_Result.ok(42))));
              }));
        Jest.test("mapError Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.error("hihi"), Jest.Expect.expect(Curry._2(Relude__Relude_Result.mapError, (function (x) {
                                      return x + x;
                                    }), Relude__Relude_Result.error("hi"))));
              }));
        Jest.test("bimap Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(52), Jest.Expect.expect(Relude__Relude_Result.bimap((function (a) {
                                      return a + 10 | 0;
                                    }), (function (e) {
                                      return e + e;
                                    }), Relude__Relude_Result.ok(42))));
              }));
        Jest.test("bimap Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.error("hihi"), Jest.Expect.expect(Relude__Relude_Result.bimap((function (a) {
                                      return a + 10 | 0;
                                    }), (function (e) {
                                      return e + e;
                                    }), Relude__Relude_Result.error("hi"))));
              }));
        Jest.test("tap Ok", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Result.tap((function (i) {
                        x.contents = i;
                      }), Relude__Relude_Result.ok(42));
                return Jest.Expect.toEqual(42, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tap Error", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Result.tap((function (i) {
                        x.contents = i;
                      }), Relude__Relude_Result.error(42));
                return Jest.Expect.toEqual(0, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tapError Ok", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Result.tapError((function (i) {
                        x.contents = i;
                      }), Relude__Relude_Result.ok(42));
                return Jest.Expect.toEqual(0, Jest.Expect.expect(x.contents));
              }));
        Jest.test("tapError Error", (function (param) {
                var x = {
                  contents: 0
                };
                Relude__Relude_Result.tapError((function (i) {
                        x.contents = i;
                      }), Relude__Relude_Result.error(42));
                return Jest.Expect.toEqual(42, Jest.Expect.expect(x.contents));
              }));
        Jest.test("apply Ok Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(52), Jest.Expect.expect(Relude__Relude_Result.apply(Relude__Relude_Result.ok(function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_Result.ok(42))));
              }));
        Jest.test("align Ok Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(Relude__Relude_Ior.both(42, "a")), Jest.Expect.expect(Relude__Relude_Result.align(Relude__Relude_Result.ok(42), Relude__Relude_Result.ok("a"))));
              }));
        Jest.test("align Ok Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(Relude__Relude_Ior.$$this(42)), Jest.Expect.expect(Relude__Relude_Result.align(Relude__Relude_Result.ok(42), Relude__Relude_Result.error("a"))));
              }));
        Jest.test("align Error Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(Relude__Relude_Ior.that("a")), Jest.Expect.expect(Relude__Relude_Result.align(Relude__Relude_Result.error(42), Relude__Relude_Result.ok("a"))));
              }));
        Jest.test("align Error Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.error(42), Jest.Expect.expect(Relude__Relude_Result.align(Relude__Relude_Result.error(42), Relude__Relude_Result.error(99))));
              }));
        Jest.test("alignWith Ok Ok", (function (param) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(141), Jest.Expect.expect(Relude__Relude_Result.alignWith(f, Relude__Relude_Result.ok(42), Relude__Relude_Result.ok("99"))));
              }));
        Jest.test("alignWith Ok Error", (function (param) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(42), Jest.Expect.expect(Relude__Relude_Result.alignWith(f, Relude__Relude_Result.ok(42), Relude__Relude_Result.error("99"))));
              }));
        Jest.test("alignWith Error Ok", (function (param) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(99), Jest.Expect.expect(Relude__Relude_Result.alignWith(f, Relude__Relude_Result.error(42), Relude__Relude_Result.ok("99"))));
              }));
        Jest.test("alignWith Error Ok", (function (param) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                return Jest.Expect.toEqual(Relude__Relude_Result.error("a"), Jest.Expect.expect(Relude__Relude_Result.alignWith(f, Relude__Relude_Result.error("a"), Relude__Relude_Result.error("b"))));
              }));
        Jest.test("map2", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(15), Jest.Expect.expect(Relude__Relude_Result.map2((function (a, b) {
                                      return a + b | 0;
                                    }), Relude__Relude_Result.ok(5), Relude__Relude_Result.ok(10))));
              }));
        Jest.test("map3", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(115), Jest.Expect.expect(Relude__Relude_Result.map3((function (a, b, c) {
                                      return (a + b | 0) + c | 0;
                                    }), Relude__Relude_Result.ok(5), Relude__Relude_Result.ok(10), Relude__Relude_Result.ok(100))));
              }));
        Jest.test("map4", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(1115), Jest.Expect.expect(Relude__Relude_Result.map4((function (a, b, c, d) {
                                      return ((a + b | 0) + c | 0) + d | 0;
                                    }), Relude__Relude_Result.ok(5), Relude__Relude_Result.ok(10), Relude__Relude_Result.ok(100), Relude__Relude_Result.ok(1000))));
              }));
        Jest.test("map5", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_Result.ok(11115), Jest.Expect.expect(Relude__Relude_Result.map5((function (a, b, c, d, e) {
                                      return (((a + b | 0) + c | 0) + d | 0) + e | 0;
                                    }), Relude__Relude_Result.ok(5), Relude__Relude_Result.ok(10), Relude__Relude_Result.ok(100), Relude__Relude_Result.ok(1000), Relude__Relude_Result.ok(10000))));
              }));
        Jest.test("flatMap", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 3
                          }, Jest.Expect.expect(Relude__Relude_Result.flatMap((function (a) {
                                      return {
                                              TAG: /* Ok */0,
                                              _0: a + 2 | 0
                                            };
                                    }), {
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("bind", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 3
                          }, Jest.Expect.expect(Relude__Relude_Result.bind({
                                    TAG: /* Ok */0,
                                    _0: 1
                                  }, (function (a) {
                                      return {
                                              TAG: /* Ok */0,
                                              _0: a + 2 | 0
                                            };
                                    }))));
              }));
        Jest.test("fold Ok", (function (param) {
                return Jest.Expect.toEqual("ok", Jest.Expect.expect(Relude__Relude_Result.fold((function (param) {
                                      return "error";
                                    }), (function (param) {
                                      return "ok";
                                    }), {
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("fold Error", (function (param) {
                return Jest.Expect.toEqual("error", Jest.Expect.expect(Relude__Relude_Result.fold((function (param) {
                                      return "error";
                                    }), (function (param) {
                                      return "ok";
                                    }), {
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("getOrElseBy Ok", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Result.getOrElseBy((function (param) {
                                      return 5;
                                    }), Relude__Relude_Result.ok(42))));
              }));
        Jest.test("getOrElseBy Error", (function (param) {
                return Jest.Expect.toEqual(6, Jest.Expect.expect(Relude__Relude_Result.getOrElseBy((function (x) {
                                      return x / 7 | 0;
                                    }), Relude__Relude_Result.error(42))));
              }));
        Jest.test("getOrElse Ok", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Result.getOrElse(5, Relude__Relude_Result.ok(42))));
              }));
        Jest.test("getOrElse Error", (function (param) {
                return Jest.Expect.toEqual(5, Jest.Expect.expect(Relude__Relude_Result.getOrElse(5, Relude__Relude_Result.error("abc"))));
              }));
        Jest.test("getOrElseLazy Ok", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Result.getOrElseLazy((function (param) {
                                      return 5;
                                    }), Relude__Relude_Result.ok(42))));
              }));
        Jest.test("getOrElseLazy Error", (function (param) {
                return Jest.Expect.toEqual(5, Jest.Expect.expect(Relude__Relude_Result.getOrElseLazy((function (param) {
                                      return 5;
                                    }), Relude__Relude_Result.error("abc"))));
              }));
        Jest.test("getErrorOrElse Ok", (function (param) {
                return Jest.Expect.toEqual(5, Jest.Expect.expect(Relude__Relude_Result.getErrorOrElse(5, Relude__Relude_Result.ok(42))));
              }));
        Jest.test("getErrorOrElse Error", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Result.getErrorOrElse(5, Relude__Relude_Result.error(42))));
              }));
        Jest.test("getErrorOrElseBy Ok", (function (param) {
                return Jest.Expect.toEqual(6, Jest.Expect.expect(Relude__Relude_Result.getErrorOrElseBy((function (x) {
                                      return x / 7 | 0;
                                    }), Relude__Relude_Result.ok(42))));
              }));
        Jest.test("getErrorOrElseBy Error", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Result.getErrorOrElseBy((function (x) {
                                      return x / 7 | 0;
                                    }), Relude__Relude_Result.error(42))));
              }));
        Jest.test("merge Error", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Result.merge({
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("merge Ok", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Result.merge({
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("flip Ok", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Error */1,
                            _0: 1
                          }, Jest.Expect.expect(Relude__Relude_Result.flip({
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("flip Error", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: "my error"
                          }, Jest.Expect.expect(Relude__Relude_Result.flip({
                                    TAG: /* Error */1,
                                    _0: "my error"
                                  })));
              }));
        Jest.test("isOk when Ok", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Result.isOk({
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("isOk when Error", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Result.isOk({
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("isError when Error", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Result.isError({
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("isError when Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Result.isError({
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("getOk when Ok", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Result.getOk({
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("getOk when Error", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Result.getOk({
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("getError when Error", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Result.getError({
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("getError when Ok", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Result.getError({
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("catchError success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 42
                          }, Jest.Expect.expect(Relude__Relude_Result.catchError((function (e) {
                                      return Relude__Relude_Result.error(e + e);
                                    }), Relude__Relude_Result.pure(42))));
              }));
        Jest.test("catchError failure", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Error */1,
                            _0: 84
                          }, Jest.Expect.expect(Relude__Relude_Result.catchError((function (e) {
                                      var intValue = Relude__Relude_Option.getOrElse(0, Relude__Relude_Int.fromString(e));
                                      return Relude__Relude_Result.error((intValue << 1));
                                    }), Relude__Relude_Result.error("42"))));
              }));
        Jest.test("handleError success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 42
                          }, Jest.Expect.expect(Relude__Relude_Result.handleError((function (_e) {
                                      return 84;
                                    }), Relude__Relude_Result.pure(42))));
              }));
        Jest.test("handleError failure", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 84
                          }, Jest.Expect.expect(Relude__Relude_Result.handleError((function (e) {
                                      return (Caml_format.caml_int_of_string(e) << 1);
                                    }), Relude__Relude_Result.error("42"))));
              }));
        Jest.test("mapHandleError success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 84
                          }, Jest.Expect.expect(Relude__Relude_Result.mapHandleError((function (a) {
                                      return (a << 1);
                                    }), Caml_format.caml_int_of_string, Relude__Relude_Result.pure(42))));
              }));
        Jest.test("mapHandleError failure", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 42
                          }, Jest.Expect.expect(Relude__Relude_Result.mapHandleError((function (a) {
                                      return (a << 1);
                                    }), Caml_format.caml_int_of_string, Relude__Relude_Result.error("42"))));
              }));
        Jest.test("eqBy when eq, both Ok", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Result.eqBy(Relude__Relude_Int.eq, Relude__Relude_String.eq, {
                                    TAG: /* Ok */0,
                                    _0: "a"
                                  }, {
                                    TAG: /* Ok */0,
                                    _0: "a"
                                  })));
              }));
        Jest.test("eqBy when not eq, both Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Result.eqBy((function (param, param$1) {
                                      return true;
                                    }), Relude__Relude_Int.eq, {
                                    TAG: /* Ok */0,
                                    _0: 1
                                  }, {
                                    TAG: /* Ok */0,
                                    _0: 2
                                  })));
              }));
        Jest.test("eqBy when first Ok, second Error", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Result.eqBy((function (param, param$1) {
                                      return true;
                                    }), (function (param, param$1) {
                                      return true;
                                    }), {
                                    TAG: /* Ok */0,
                                    _0: 1
                                  }, {
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("eqBy when first Error, second Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Result.eqBy((function (param, param$1) {
                                      return true;
                                    }), (function (param, param$1) {
                                      return true;
                                    }), {
                                    TAG: /* Error */1,
                                    _0: 1
                                  }, {
                                    TAG: /* Ok */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("eqBy when eq, both Error", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_Result.eqBy(Relude__Relude_Int.eq, (function (param, param$1) {
                                      return true;
                                    }), {
                                    TAG: /* Error */1,
                                    _0: 1
                                  }, {
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("eqBy when not eq, both Error", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_Result.eqBy((function (param, param$1) {
                                      return false;
                                    }), (function (param, param$1) {
                                      return true;
                                    }), {
                                    TAG: /* Error */1,
                                    _0: 1
                                  }, {
                                    TAG: /* Error */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("<<$>> Ok", (function (param) {
                var f = function (a) {
                  return (a << 1);
                };
                var g = function (err) {
                  return err + err;
                };
                var actual = Curry._3(ResultS.Infix.$less$less$$great$great, f, g, {
                      TAG: /* Ok */0,
                      _0: 42
                    });
                return Jest.Expect.toEqual({
                            TAG: /* Ok */0,
                            _0: 84
                          }, Jest.Expect.expect(actual));
              }));
        Jest.test("<<$>> Error", (function (param) {
                var f = function (a) {
                  return (a << 1);
                };
                var g = function (err) {
                  return err + err;
                };
                var actual = Curry._3(ResultS.Infix.$less$less$$great$great, f, g, {
                      TAG: /* Error */1,
                      _0: "hi"
                    });
                return Jest.Expect.toEqual({
                            TAG: /* Error */1,
                            _0: "hihi"
                          }, Jest.Expect.expect(actual));
              }));
        Jest.test("bitraverse", (function (param) {
                var ResultE = Relude__Relude_Result.WithError({});
                var ResultA = Curry._1(ResultE.WithApplicative, Relude__Relude_Option_Instances.Applicative);
                var success = Curry._3(ResultA.bitraverse, (function (i) {
                        return i + 3 | 0;
                      }), (function (err) {
                        return err + err;
                      }), {
                      TAG: /* Ok */0,
                      _0: 42
                    });
                var failure = Curry._3(ResultA.bitraverse, (function (i) {
                        return i + 3 | 0;
                      }), (function (err) {
                        return err + err;
                      }), {
                      TAG: /* Error */1,
                      _0: "fail"
                    });
                return Jest.Expect.toEqual([
                            {
                              TAG: /* Ok */0,
                              _0: 45
                            },
                            {
                              TAG: /* Error */1,
                              _0: "failfail"
                            }
                          ], Jest.Expect.expect([
                                success,
                                failure
                              ]));
              }));
      }));

exports.ResultS = ResultS;
/* ResultS Not a pure module */
