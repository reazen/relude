// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_Result = require("relude/./Relude_Result.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_AsyncData = require("relude/./Relude_AsyncData.js");
var Relude__Relude_AsyncResult = require("relude/./Relude_AsyncResult.js");

var AsyncResultS = Relude__Relude_AsyncResult.WithError({});

Jest.describe("AsyncResult", (function (param) {
        Jest.test("Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.init, Jest.Expect.expect(Relude__Relude_AsyncResult.init));
              }));
        Jest.test("Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.loading));
              }));
        Jest.test("Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete({
                                TAG: /* Ok */0,
                                _0: 1
                              }), Jest.Expect.expect(Relude__Relude_AsyncResult.ok(1)));
              }));
        Jest.test("Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete({
                                TAG: /* Error */1,
                                _0: "Fail"
                              }), Jest.Expect.expect(Relude__Relude_AsyncResult.error("Fail")));
              }));
        Jest.test("isOk when Loading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isOk(Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("isOk when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isOk(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("isOk when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isOk(Relude__Relude_AsyncResult.ok(1))));
              }));
        Jest.test("isOk when Complete Error", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isOk(Relude__Relude_AsyncResult.error("Fail"))));
              }));
        Jest.test("isOk when Reloading Error", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isOk(Relude__Relude_AsyncResult.reloadingError("Fail"))));
              }));
        Jest.test("isError when Complete Error", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isError(Relude__Relude_AsyncResult.error("Fail"))));
              }));
        Jest.test("isError when Reloading Error", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isError(Relude__Relude_AsyncResult.reloadingError("Fail"))));
              }));
        Jest.test("isError when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isError(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("isError when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isError(Relude__Relude_AsyncResult.ok(1))));
              }));
        Jest.test("isReloadingOk when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isReloadingOk(Relude__Relude_AsyncResult.completeOk(1))));
              }));
        Jest.test("isReloadingOk when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isReloadingOk(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("isReloadingOk when Complete Error", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isReloadingOk(Relude__Relude_AsyncResult.completeError("fail"))));
              }));
        Jest.test("isReloadingError when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isReloadingError(Relude__Relude_AsyncResult.completeOk(1))));
              }));
        Jest.test("isReloadingError when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isReloadingError(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("isReloadingError when Reloading Error", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isReloadingError(Relude__Relude_AsyncResult.reloadingError("fail"))));
              }));
        Jest.test("isCompleteOk when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isCompleteOk(Relude__Relude_AsyncResult.completeOk(1))));
              }));
        Jest.test("isCompleteOk when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isCompleteOk(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("isCompleteOk when Complete Error", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isCompleteOk(Relude__Relude_AsyncResult.completeError("fail"))));
              }));
        Jest.test("isCompleteError when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isCompleteError(Relude__Relude_AsyncResult.completeOk(1))));
              }));
        Jest.test("isCompleteError when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.isCompleteError(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("isCompleteError when Complete Error", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.isCompleteError(Relude__Relude_AsyncResult.completeError("fail"))));
              }));
        Jest.test("getOk when Init", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getOk(Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("getOk when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.getOk(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("getOk when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.getOk(Relude__Relude_AsyncResult.ok(1))));
              }));
        Jest.test("getOk when Reloading Error", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getOk(Relude__Relude_AsyncResult.reloadingError("fail"))));
              }));
        Jest.test("getOk when Complete Error", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getOk(Relude__Relude_AsyncResult.error("fail"))));
              }));
        Jest.test("getError when Init", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getError(Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("getError when Reloading Error", (function (param) {
                return Jest.Expect.toEqual("fail", Jest.Expect.expect(Relude__Relude_AsyncResult.getError(Relude__Relude_AsyncResult.reloadingError("fail"))));
              }));
        Jest.test("getError when Complete Error", (function (param) {
                return Jest.Expect.toEqual("fail", Jest.Expect.expect(Relude__Relude_AsyncResult.getError(Relude__Relude_AsyncResult.error("fail"))));
              }));
        Jest.test("getError when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getError(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("getError when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getError(Relude__Relude_AsyncResult.ok(1))));
              }));
        Jest.test("getCompleteOk when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getCompleteOk(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("getCompleteOk when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.getCompleteOk(Relude__Relude_AsyncResult.ok(1))));
              }));
        Jest.test("getCompleteError when Complete Error", (function (param) {
                return Jest.Expect.toEqual("fail", Jest.Expect.expect(Relude__Relude_AsyncResult.getCompleteError(Relude__Relude_AsyncResult.error("fail"))));
              }));
        Jest.test("getCompleteError when Reloading Error", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getCompleteError(Relude__Relude_AsyncResult.reloadingError("fail"))));
              }));
        Jest.test("getReloadingOk when Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.getReloadingOk(Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("getReloadingOk when Complete Ok", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getReloadingOk(Relude__Relude_AsyncResult.completeOk(1))));
              }));
        Jest.test("getReloadingError when Complete Error", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncResult.getReloadingError(Relude__Relude_AsyncResult.completeError("fail"))));
              }));
        Jest.test("getReloadingError when Reloading Error", (function (param) {
                return Jest.Expect.toEqual("fail", Jest.Expect.expect(Relude__Relude_AsyncResult.getReloadingError(Relude__Relude_AsyncResult.reloadingError("fail"))));
              }));
        Jest.test("map Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("map Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("map Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk(43), Jest.Expect.expect(Relude__Relude_AsyncResult.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingOk(42))));
              }));
        Jest.test("map Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(42), Jest.Expect.expect(Relude__Relude_AsyncResult.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingError(42))));
              }));
        Jest.test("map Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeOk(43), Jest.Expect.expect(Relude__Relude_AsyncResult.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.completeOk(42))));
              }));
        Jest.test("map Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(42), Jest.Expect.expect(Relude__Relude_AsyncResult.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.completeError(42))));
              }));
        Jest.test("mapError Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.mapError((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("mapError Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.mapError((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("mapError Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk(42), Jest.Expect.expect(Relude__Relude_AsyncResult.mapError((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingOk(42))));
              }));
        Jest.test("mapError Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(43), Jest.Expect.expect(Relude__Relude_AsyncResult.mapError((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingError(42))));
              }));
        Jest.test("mapError Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeOk(42), Jest.Expect.expect(Relude__Relude_AsyncResult.mapError((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.completeOk(42))));
              }));
        Jest.test("mapError Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(43), Jest.Expect.expect(Relude__Relude_AsyncResult.mapError((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncResult.completeError(42))));
              }));
        Jest.test("eqBy different constructors", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncResult.eqBy((function (param, param$1) {
                                        return true;
                                      }), (function (param, param$1) {
                                        return true;
                                      }))(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("eqBy same success value", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncResult.eqBy(Relude__Relude_String.eq, Relude__Relude_Int.eq)(Relude__Relude_AsyncResult.ok(1), Relude__Relude_AsyncResult.ok(1))));
              }));
        Jest.test("tapByValue init", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (param) {
                  count.contents = count.contents + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapByValue(f, (function (param) {
                        
                      }), Relude__Relude_AsyncResult.init);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapByValue loading", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (param) {
                  count.contents = count.contents + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapByValue(f, (function (param) {
                        
                      }), Relude__Relude_AsyncResult.loading);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapByValue reloadingOk", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + Relude__Relude_Option.getOrElse(-1, Relude__Relude_Result.getOk(a)) | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapByValue((function (param) {
                        
                      }), f, Relude__Relude_AsyncResult.reloadingOk(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapByValue reloadingError", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + Relude__Relude_Option.getOrElse(-1, Relude__Relude_Result.getError(a)) | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapByValue((function (param) {
                        
                      }), f, Relude__Relude_AsyncResult.reloadingError(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapByValue completeOk", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + Relude__Relude_Option.getOrElse(-1, Relude__Relude_Result.getOk(a)) | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapByValue((function (param) {
                        
                      }), f, Relude__Relude_AsyncResult.completeOk(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapByValue completeError", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + Relude__Relude_Option.getOrElse(-1, Relude__Relude_Result.getError(a)) | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapByValue((function (param) {
                        
                      }), f, Relude__Relude_AsyncResult.completeError(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapOk init", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapOk(f, Relude__Relude_AsyncResult.init);
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapOk loading", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapOk(f, Relude__Relude_AsyncResult.loading);
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapOk reloadingOk", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapOk(f, Relude__Relude_AsyncResult.reloadingOk(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapOk reloadingError", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapOk(f, Relude__Relude_AsyncResult.reloadingError(10));
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapOk completeOk", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapOk(f, Relude__Relude_AsyncResult.completeOk(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapOk completeError", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapOk(f, Relude__Relude_AsyncResult.completeError(10));
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapError init", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapError(f, Relude__Relude_AsyncResult.init);
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapError loading", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapError(f, Relude__Relude_AsyncResult.loading);
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapError reloadingOk", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapError(f, Relude__Relude_AsyncResult.reloadingOk(10));
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapError reloadingError", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapError(f, Relude__Relude_AsyncResult.reloadingError(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapError completeOk", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapError(f, Relude__Relude_AsyncResult.completeOk(10));
                return Jest.Expect.toEqual(0, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapError completeError", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncResult.tapError(f, Relude__Relude_AsyncResult.completeError(10));
                return Jest.Expect.toEqual(11, Jest.Expect.expect(count.contents));
              }));
        Jest.test("apply Init & Init = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("apply Init & Loading = Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("apply Init & Reloading Ok = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.reloadingOk("ok"))));
              }));
        Jest.test("apply Init & Reloading Error = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.reloadingError("error"))));
              }));
        Jest.test("apply Init & Complete Ok = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.completeOk("ok"))));
              }));
        Jest.test("apply Init & Complete Error = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.completeError("error"))));
              }));
        Jest.test("apply Loading & Init = Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.loading, Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("apply Loading & Loading = Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.loading, Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("apply Loading & Reloading Ok = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.loading, Relude__Relude_AsyncResult.reloadingOk("ok"))));
              }));
        Jest.test("apply Loading & Reloading Error = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.loading, Relude__Relude_AsyncResult.reloadingError("error"))));
              }));
        Jest.test("apply Loading & Complete Ok = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.loading, Relude__Relude_AsyncResult.completeOk("ok"))));
              }));
        Jest.test("apply Loading & Complete Error = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.loading, Relude__Relude_AsyncResult.completeError("error"))));
              }));
        Jest.test("apply Reloading Ok & Init = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingOk(function (param) {
                                        return "ok";
                                      }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("apply Reloading Error & Init = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingError("error"), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("apply Reloading Ok & Loading = Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingOk(function (param) {
                                        return "ok";
                                      }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("apply Reloading Error & Loading = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingError("error"), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("apply Reloading Ok & Reloading Ok = Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk("okok"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingOk(function (r) {
                                        return r + "ok";
                                      }), Relude__Relude_AsyncResult.reloadingOk("ok"))));
              }));
        Jest.test("apply Reloading Ok & Reloading Error = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingOk(function (param) {
                                        return "ok";
                                      }), Relude__Relude_AsyncResult.reloadingError("error"))));
              }));
        Jest.test("apply Reloading Error & Reloading Ok = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingError("error"), Relude__Relude_AsyncResult.reloadingOk("ok"))));
              }));
        Jest.test("apply Reloading Error & Reloading Error = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingError("error"), Relude__Relude_AsyncResult.reloadingError("error_2"))));
              }));
        Jest.test("apply Reloading Ok & Complete Ok = Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk("okok"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingOk(function (r) {
                                        return r + "ok";
                                      }), Relude__Relude_AsyncResult.completeOk("ok"))));
              }));
        Jest.test("apply Reloading Ok & Complete Error = Complete Erro", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingOk(function (r) {
                                        return r + "ok";
                                      }), Relude__Relude_AsyncResult.completeError("error"))));
              }));
        Jest.test("apply Reloading Error & Complete Ok = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingError("error"), Relude__Relude_AsyncResult.completeOk("ok"))));
              }));
        Jest.test("apply Reloading Error & Complete Error = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.reloadingError("error"), Relude__Relude_AsyncResult.completeError("error_2"))));
              }));
        Jest.test("apply Complete Ok & Init = Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeOk(function (param) {
                                        return "ok";
                                      }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("apply Complete Error & Init = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeError("error"), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("apply Complete Ok & Loading = Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeOk(function (param) {
                                        return "ok";
                                      }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("apply Complete Error & Loading = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeError("error"), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("apply Complete Ok & Reloading Ok = Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk("okok"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeOk(function (r) {
                                        return r + "ok";
                                      }), Relude__Relude_AsyncResult.reloadingOk("ok"))));
              }));
        Jest.test("apply Complete Ok & Reloading Error = Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeOk(function (r) {
                                        return r + "ok";
                                      }), Relude__Relude_AsyncResult.reloadingError("error"))));
              }));
        Jest.test("apply Complete Error & Reloading Ok = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeError("error"), Relude__Relude_AsyncResult.reloadingOk("ok"))));
              }));
        Jest.test("apply Complete Error & Reloading Error = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeError("error"), Relude__Relude_AsyncResult.reloadingError("error_2"))));
              }));
        Jest.test("apply Complete Ok & Complete Ok = Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeOk("okok"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeOk(function (r) {
                                        return r + "ok";
                                      }), Relude__Relude_AsyncResult.completeOk("ok"))));
              }));
        Jest.test("apply Complete Ok & Complete Error = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeOk(function (r) {
                                        return r + "ok";
                                      }), Relude__Relude_AsyncResult.completeError("error"))));
              }));
        Jest.test("apply Complete Error & Complete Ok = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeError("error"), Relude__Relude_AsyncResult.completeOk("ok"))));
              }));
        Jest.test("apply Complete Error & Complete Error = Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError("error"), Jest.Expect.expect(Relude__Relude_AsyncResult.apply(Relude__Relude_AsyncResult.completeError("error"), Relude__Relude_AsyncResult.completeError("error_2"))));
              }));
        Jest.test("bind Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.bind(Relude__Relude_AsyncResult.init, Relude__Relude_AsyncResult.reloadingOk)));
              }));
        Jest.test("bind Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.bind(Relude__Relude_AsyncResult.loading, Relude__Relude_AsyncResult.reloadingOk)));
              }));
        Jest.test("bind Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(2), Jest.Expect.expect(Relude__Relude_AsyncResult.bind(Relude__Relude_AsyncResult.reloadingOk(1), (function (a) {
                                      return Relude__Relude_AsyncResult.reloadingError(a + 1 | 0);
                                    }))));
              }));
        Jest.test("bind Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(1), Jest.Expect.expect(Relude__Relude_AsyncResult.bind(Relude__Relude_AsyncResult.reloadingError(1), (function (a) {
                                      return Relude__Relude_AsyncResult.reloadingOk(a + 1 | 0);
                                    }))));
              }));
        Jest.test("bind Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(2), Jest.Expect.expect(Relude__Relude_AsyncResult.bind(Relude__Relude_AsyncResult.completeOk(1), (function (a) {
                                      return Relude__Relude_AsyncResult.completeError(a + 1 | 0);
                                    }))));
              }));
        Jest.test("bind Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(1), Jest.Expect.expect(Relude__Relude_AsyncResult.bind(Relude__Relude_AsyncResult.completeError(1), (function (a) {
                                      return Relude__Relude_AsyncResult.completeOk(a + 1 | 0);
                                    }))));
              }));
        Jest.test("flatMap Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.flatMap(Relude__Relude_AsyncResult.reloadingOk, Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("flatMap Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.flatMap(Relude__Relude_AsyncResult.reloadingOk, Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("flatMap Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(2), Jest.Expect.expect(Relude__Relude_AsyncResult.flatMap((function (a) {
                                      return Relude__Relude_AsyncResult.reloadingError(a + 1 | 0);
                                    }), Relude__Relude_AsyncResult.reloadingOk(1))));
              }));
        Jest.test("flatMap Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(1), Jest.Expect.expect(Relude__Relude_AsyncResult.flatMap((function (a) {
                                      return Relude__Relude_AsyncResult.reloadingOk(a + 1 | 0);
                                    }), Relude__Relude_AsyncResult.reloadingError(1))));
              }));
        Jest.test("flatMap Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(2), Jest.Expect.expect(Relude__Relude_AsyncResult.flatMap((function (a) {
                                      return Relude__Relude_AsyncResult.completeError(a + 1 | 0);
                                    }), Relude__Relude_AsyncResult.completeOk(1))));
              }));
        Jest.test("flatMap Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(1), Jest.Expect.expect(Relude__Relude_AsyncResult.flatMap((function (a) {
                                      return Relude__Relude_AsyncResult.completeOk(a + 1 | 0);
                                    }), Relude__Relude_AsyncResult.completeError(1))));
              }));
        Jest.test("flatten Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.flatten(Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("flatten Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.flatten(Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("flatten Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk(2), Jest.Expect.expect(Relude__Relude_AsyncResult.flatten(Relude__Relude_AsyncResult.reloadingOk(Relude__Relude_AsyncResult.reloadingOk(2)))));
              }));
        Jest.test("flatten Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(Relude__Relude_AsyncResult.reloadingOk(2)), Jest.Expect.expect(Relude__Relude_AsyncResult.flatten(Relude__Relude_AsyncResult.reloadingError(Relude__Relude_AsyncResult.reloadingOk(2)))));
              }));
        Jest.test("flatten Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeOk(2), Jest.Expect.expect(Relude__Relude_AsyncResult.flatten(Relude__Relude_AsyncResult.completeOk(Relude__Relude_AsyncResult.completeOk(2)))));
              }));
        Jest.test("flatten Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(Relude__Relude_AsyncResult.completeOk(2)), Jest.Expect.expect(Relude__Relude_AsyncResult.flatten(Relude__Relude_AsyncResult.completeError(Relude__Relude_AsyncResult.completeOk(2)))));
              }));
        Jest.test("fold Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.fold(1, 2, (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("fold Loading", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Relude__Relude_AsyncResult.fold(1, 2, (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("fold Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncResult.fold(1, 2, (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingOk(10))));
              }));
        Jest.test("fold Reloading Error", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_AsyncResult.fold(1, 2, (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingError(10))));
              }));
        Jest.test("fold Complete Ok", (function (param) {
                return Jest.Expect.toEqual(14, Jest.Expect.expect(Relude__Relude_AsyncResult.fold(1, 2, (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.completeOk(10))));
              }));
        Jest.test("fold Complete Error", (function (param) {
                return Jest.Expect.toEqual(4, Jest.Expect.expect(Relude__Relude_AsyncResult.fold(1, 2, (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.completeError(10))));
              }));
        Jest.test("foldLazy Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("foldLazy Loading", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Relude__Relude_AsyncResult.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("foldLazy Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncResult.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingOk(10))));
              }));
        Jest.test("foldLazy Reloading Error", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_AsyncResult.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingError(10))));
              }));
        Jest.test("foldLazy Complete Ok", (function (param) {
                return Jest.Expect.toEqual(14, Jest.Expect.expect(Relude__Relude_AsyncResult.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.completeOk(10))));
              }));
        Jest.test("foldLazy Complete Error", (function (param) {
                return Jest.Expect.toEqual(4, Jest.Expect.expect(Relude__Relude_AsyncResult.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 3 | 0;
                                    }), (function (r) {
                                      return Relude__Relude_Result.getOrElse(0, r) + 4 | 0;
                                    }), Relude__Relude_AsyncResult.completeError(10))));
              }));
        Jest.test("foldByValue Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValue(1, (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("foldByValue Loading", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValue(1, (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("foldByValue Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValue(1, (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingOk(10))));
              }));
        Jest.test("foldByValue Reloading Error", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValue(1, (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingError(10))));
              }));
        Jest.test("foldByValue Complete Ok", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValue(1, (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.completeOk(10))));
              }));
        Jest.test("foldByValue Complete Error", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValue(1, (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.completeError(10))));
              }));
        Jest.test("foldByValueLazy Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("foldByValueLazy Loading", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("foldByValueLazy Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingOk(10))));
              }));
        Jest.test("foldByValueLazy Reloading Error", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.reloadingError(10))));
              }));
        Jest.test("foldByValueLazy Complete Ok", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.completeOk(10))));
              }));
        Jest.test("foldByValueLazy Complete Error", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncResult.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (ok) {
                                      return ok + 2 | 0;
                                    }), (function (error) {
                                      return error + 3 | 0;
                                    }), Relude__Relude_AsyncResult.completeError(10))));
              }));
        Jest.test("alt (Init, Init)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.alt(/* Init */0, /* Init */0)));
              }));
        Jest.test("alt (Init, Loading)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.alt(/* Init */0, /* Loading */1)));
              }));
        Jest.test("alt (Init, Reloading(Error))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.alt(/* Init */0, {
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 0
                                    }
                                  })));
              }));
        Jest.test("alt (Init, Reloading(Ok))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk(0), Jest.Expect.expect(Relude__Relude_AsyncResult.alt(/* Init */0, {
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Ok */0,
                                      _0: 0
                                    }
                                  })));
              }));
        Jest.test("alt (Init, Complete(Error))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.alt(/* Init */0, {
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 0
                                    }
                                  })));
              }));
        Jest.test("alt (Init, Complete(Ok))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeOk(0), Jest.Expect.expect(Relude__Relude_AsyncResult.alt(/* Init */0, {
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Ok */0,
                                      _0: 0
                                    }
                                  })));
              }));
        Jest.test("alt (Loading, Init)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.alt(/* Loading */1, /* Init */0)));
              }));
        Jest.test("alt (Reloading(Error), Init)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, /* Init */0)));
              }));
        Jest.test("alt (Reloading(Error), Loading)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, /* Loading */1)));
              }));
        Jest.test("alt (Reloading(Error), Reloading(Error))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError(1), Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, {
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 2
                                    }
                                  })));
              }));
        Jest.test("alt (Reloading(Error), Complete(Error))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(2), Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, {
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 2
                                    }
                                  })));
              }));
        Jest.test("alt (Complete(Error), Init)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, /* Init */0)));
              }));
        Jest.test("alt (Complete(Error), Loading)", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, /* Loading */1)));
              }));
        Jest.test("alt (Complete(Error), Reloading(Error))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(1), Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, {
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 2
                                    }
                                  })));
              }));
        Jest.test("alt (Complete(Error), Reloading(Ok))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk(2), Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, {
                                    TAG: /* Reloading */0,
                                    _0: {
                                      TAG: /* Ok */0,
                                      _0: 2
                                    }
                                  })));
              }));
        Jest.test("alt (Complete(Error), Complete(Error))", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeError(1), Jest.Expect.expect(Relude__Relude_AsyncResult.alt({
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 1
                                    }
                                  }, {
                                    TAG: /* Complete */1,
                                    _0: {
                                      TAG: /* Error */1,
                                      _0: 2
                                    }
                                  })));
              }));
        Jest.test("fromAsyncData Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(Relude__Relude_AsyncResult.fromAsyncData(Relude__Relude_AsyncData.init)));
              }));
        Jest.test("fromAsyncData Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.fromAsyncData(Relude__Relude_AsyncData.loading)));
              }));
        Jest.test("fromAsyncData Reloading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk(10), Jest.Expect.expect(Relude__Relude_AsyncResult.fromAsyncData(Relude__Relude_AsyncData.reloading(10))));
              }));
        Jest.test("fromAsyncData Complete", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.completeOk(10), Jest.Expect.expect(Relude__Relude_AsyncResult.fromAsyncData(Relude__Relude_AsyncData.complete(10))));
              }));
        Jest.test("toAsyncData Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.init, Jest.Expect.expect(Relude__Relude_AsyncResult.toAsyncData(Relude__Relude_AsyncResult.init)));
              }));
        Jest.test("toAsyncData Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.loading, Jest.Expect.expect(Relude__Relude_AsyncResult.toAsyncData(Relude__Relude_AsyncResult.loading)));
              }));
        Jest.test("toAsyncData Reloading Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.reloading(10), Jest.Expect.expect(Relude__Relude_AsyncResult.toAsyncData(Relude__Relude_AsyncResult.reloadingOk(10))));
              }));
        Jest.test("toAsyncData Reloading Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.reloading(10), Jest.Expect.expect(Relude__Relude_AsyncResult.toAsyncData(Relude__Relude_AsyncResult.reloadingError(10))));
              }));
        Jest.test("toAsyncData Complete Ok", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete(10), Jest.Expect.expect(Relude__Relude_AsyncResult.toAsyncData(Relude__Relude_AsyncResult.completeOk(10))));
              }));
        Jest.test("toAsyncData Complete Error", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete(10), Jest.Expect.expect(Relude__Relude_AsyncResult.toAsyncData(Relude__Relude_AsyncResult.completeError(10))));
              }));
        Jest.test("WithError Init", (function (param) {
                var f = function (a) {
                  return a + 1 | 0;
                };
                var actual = Curry._2(AsyncResultS.Infix.$less$$great, f, Relude__Relude_AsyncResult.init);
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.init, Jest.Expect.expect(actual));
              }));
        Jest.test("WithError Loading", (function (param) {
                var f = function (a) {
                  return a + 1 | 0;
                };
                var actual = Curry._2(AsyncResultS.Infix.$less$$great, f, Relude__Relude_AsyncResult.loading);
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.loading, Jest.Expect.expect(actual));
              }));
        Jest.test("WithError Reloading Ok", (function (param) {
                var f = function (a) {
                  return a + 1 | 0;
                };
                var ok = Relude__Relude_AsyncResult.reloadingOk(10);
                var actual = Curry._2(AsyncResultS.Infix.$less$$great, f, ok);
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingOk(11), Jest.Expect.expect(actual));
              }));
        Jest.test("WithError Reloading Error", (function (param) {
                var f = function (a) {
                  return a + 1 | 0;
                };
                var ok = Relude__Relude_AsyncResult.reloadingError("error");
                var actual = Curry._2(AsyncResultS.Infix.$less$$great, f, ok);
                return Jest.Expect.toEqual(Relude__Relude_AsyncResult.reloadingError("error"), Jest.Expect.expect(actual));
              }));
      }));

exports.AsyncResultS = AsyncResultS;
/* AsyncResultS Not a pure module */
