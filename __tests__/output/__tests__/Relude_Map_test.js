// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_StringMap = require("relude/./Relude_StringMap.js");

Jest.describe("StringMap", (function (param) {
        var empty = Curry._1(Relude__Relude_StringMap.make, undefined);
        var foo1 = Curry._3(Relude__Relude_StringMap.set, "foo", 1, empty);
        var abcdef = Curry._1(Relude__Relude_StringMap.fromList, {
              hd: [
                "a",
                "b"
              ],
              tl: {
                hd: [
                  "c",
                  "d"
                ],
                tl: {
                  hd: [
                    "e",
                    "f"
                  ],
                  tl: /* [] */0
                }
              }
            });
        var zyx = Curry._1(Relude__Relude_StringMap.fromList, {
              hd: [
                "z",
                5
              ],
              tl: {
                hd: [
                  "y",
                  3
                ],
                tl: {
                  hd: [
                    "x",
                    9
                  ],
                  tl: /* [] */0
                }
              }
            });
        Jest.test("make is empty", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.isEmpty, empty)));
              }));
        Jest.test("set (add new key)", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.get, "a", Curry._3(Relude__Relude_StringMap.set, "a", 0, empty))));
              }));
        Jest.test("set (overwrite exising key)", (function (param) {
                return Jest.Expect.toEqual("a", Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.get, "a", Curry._3(Relude__Relude_StringMap.set, "a", "a", abcdef))));
              }));
        Jest.test("set (is immutable)", (function (param) {
                Curry._3(Relude__Relude_StringMap.set, "a", 1, empty);
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.length, empty)));
              }));
        Jest.test("singleton", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.get, "foo", Curry._2(Relude__Relude_StringMap.singleton, "foo", 3))));
              }));
        Jest.test("contains (false)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.contains, "foo", empty)));
              }));
        Jest.test("contains (true)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.contains, "foo", foo1)));
              }));
        Jest.test("eqBy (false)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._3(Relude__Relude_StringMap.eqBy, Relude__Relude_Int.eq, foo1, empty)));
              }));
        Jest.test("eqBy (true)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_StringMap.eqBy, Relude__Relude_Int.eq, foo1, foo1)));
              }));
        Jest.test("eqBy (empty always equals empty)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_StringMap.eqBy, (function (param, param$1) {
                                      return false;
                                    }), empty, empty)));
              }));
        Jest.test("find (found)", (function (param) {
                return Jest.Expect.toEqual([
                            "foo",
                            2
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.find, (function (_k, v) {
                                      return v > 0;
                                    }), Curry._1(Relude__Relude_StringMap.fromList, {
                                        hd: [
                                          "z",
                                          1
                                        ],
                                        tl: {
                                          hd: [
                                            "foo",
                                            2
                                          ],
                                          tl: {
                                            hd: [
                                              "a",
                                              -1
                                            ],
                                            tl: /* [] */0
                                          }
                                        }
                                      }))));
              }));
        Jest.test("find (not found)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.find, (function (_k, v) {
                                      return v > 10;
                                    }), foo1)));
              }));
        Jest.test("forEach (side effects run)", (function (param) {
                var x = {
                  contents: ""
                };
                Curry._2(Relude__Relude_StringMap.forEach, (function (k, v) {
                        x.contents = x.contents + (k + v);
                      }), abcdef);
                return Jest.Expect.toEqual("abcdef", Jest.Expect.expect(x.contents));
              }));
        Jest.test("foldLeft (accumulate keys and values)", (function (param) {
                return Jest.Expect.toEqual("abcdef", Jest.Expect.expect(Curry._3(Relude__Relude_StringMap.foldLeft, (function (acc, k, v) {
                                      return acc + (k + v);
                                    }), "", abcdef)));
              }));
        Jest.test("all (false)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.all, (function (_k, v) {
                                      return Relude__Relude_String.length(v) === 1;
                                    }), Curry._1(Relude__Relude_StringMap.fromArray, [
                                        [
                                          "a",
                                          "a"
                                        ],
                                        [
                                          "b",
                                          ""
                                        ]
                                      ]))));
              }));
        Jest.test("all (true)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.all, (function (param, v) {
                                      return v === 1;
                                    }), foo1)));
              }));
        Jest.test("all (always true when empty)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.all, (function (param, param$1) {
                                      return false;
                                    }), empty)));
              }));
        Jest.test("any (false)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.any, (function (param, v) {
                                      return v === 0;
                                    }), foo1)));
              }));
        Jest.test("any (true)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.any, (function (k, param) {
                                      return k === "e";
                                    }), abcdef)));
              }));
        Jest.test("any (always false when empty)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.any, (function (param, param$1) {
                                      return true;
                                    }), empty)));
              }));
        Jest.test("length (empty)", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.length, empty)));
              }));
        Jest.test("length (three keys)", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.length, abcdef)));
              }));
        Jest.test("toArray (empty)", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.toArray, empty)));
              }));
        Jest.test("toArray (from unsorted array)", (function (param) {
                return Jest.Expect.toEqual([
                            [
                              "x",
                              9
                            ],
                            [
                              "y",
                              3
                            ],
                            [
                              "z",
                              5
                            ]
                          ], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.toArray, zyx)));
              }));
        Jest.test("fromValueArray", (function (param) {
                var map = Curry._2(Relude__Relude_StringMap.fromValueArray, (function (prim) {
                        return prim[0];
                      }), [
                      [
                        "a",
                        "b"
                      ],
                      [
                        "b",
                        "c"
                      ],
                      [
                        "a",
                        "d"
                      ]
                    ]);
                return Jest.Expect.toEqual([
                            "a",
                            "d"
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.get, "a", map)));
              }));
        Jest.test("fromValueList", (function (param) {
                var map = Curry._2(Relude__Relude_StringMap.fromValueList, (function (prim) {
                        return prim[0];
                      }), {
                      hd: [
                        "a",
                        0
                      ],
                      tl: {
                        hd: [
                          "b",
                          1
                        ],
                        tl: /* [] */0
                      }
                    });
                return Jest.Expect.toEqual([
                            "a",
                            0
                          ], Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.get, "a", map)));
              }));
        Jest.test("keyArray (empty)", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.keyArray, empty)));
              }));
        Jest.test("keyArray (zyx)", (function (param) {
                return Jest.Expect.toEqual([
                            "x",
                            "y",
                            "z"
                          ], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.keyArray, zyx)));
              }));
        Jest.test("keys (empty)", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.keys, empty)));
              }));
        Jest.test("keys (zyx)", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "x",
                            tl: {
                              hd: "y",
                              tl: {
                                hd: "z",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.keys, zyx)));
              }));
        Jest.test("valueArray (empty)", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.valueArray, empty)));
              }));
        Jest.test("valueArray (zyx)", (function (param) {
                return Jest.Expect.toEqual([
                            9,
                            3,
                            5
                          ], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.valueArray, zyx)));
              }));
        Jest.test("values (empty)", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.values, empty)));
              }));
        Jest.test("values (zyx)", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 9,
                            tl: {
                              hd: 3,
                              tl: {
                                hd: 5,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.values, zyx)));
              }));
        Jest.test("minKey (empty)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.minKey, empty)));
              }));
        Jest.test("minKey (smallest of several)", (function (param) {
                return Jest.Expect.toEqual("x", Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.minKey, zyx)));
              }));
        Jest.test("maxKey (empty)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.maxKey, empty)));
              }));
        Jest.test("maxKey (largest of several)", (function (param) {
                return Jest.Expect.toEqual("z", Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.maxKey, zyx)));
              }));
        Jest.test("min (empty)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.min, empty)));
              }));
        Jest.test("min (smallest of several)", (function (param) {
                return Jest.Expect.toEqual([
                            "x",
                            9
                          ], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.min, zyx)));
              }));
        Jest.test("max (empty)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.max, empty)));
              }));
        Jest.test("max (largest of several)", (function (param) {
                return Jest.Expect.toEqual([
                            "z",
                            5
                          ], Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.max, zyx)));
              }));
        Jest.test("get (not found)", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.get, "a", zyx)));
              }));
        Jest.test("get (found)", (function (param) {
                return Jest.Expect.toEqual(9, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.get, "x", zyx)));
              }));
        Jest.test("getOrElse (not found, falls back to default)", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._3(Relude__Relude_StringMap.getOrElse, "a", 0, zyx)));
              }));
        Jest.test("getOrElse (found, ignores default)", (function (param) {
                return Jest.Expect.toEqual(9, Jest.Expect.expect(Curry._3(Relude__Relude_StringMap.getOrElse, "x", 0, zyx)));
              }));
        Jest.test("remove (key not found)", (function (param) {
                return Jest.Expect.toEqual(zyx, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.remove, "a", zyx)));
              }));
        Jest.test("remove (key found in singleton)", (function (param) {
                return Jest.Expect.toEqual(empty, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.remove, "foo", foo1)));
              }));
        Jest.test("remove (key found)", (function (param) {
                var withoutA = Curry._1(Relude__Relude_StringMap.fromList, {
                      hd: [
                        "c",
                        "d"
                      ],
                      tl: {
                        hd: [
                          "e",
                          "f"
                        ],
                        tl: /* [] */0
                      }
                    });
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_StringMap.eqBy, Relude__Relude_String.eq, withoutA, Curry._2(Relude__Relude_StringMap.remove, "a", abcdef))));
              }));
        Jest.test("remove (doesn't mutate)", (function (param) {
                Curry._2(Relude__Relude_StringMap.remove, "a", abcdef);
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._1(Relude__Relude_StringMap.length, abcdef)));
              }));
        Jest.test("removeMany", (function (param) {
                return Jest.Expect.toEqual(empty, Jest.Expect.expect(Curry._2(Relude__Relude_StringMap.removeMany, [
                                    "a",
                                    "b",
                                    "x",
                                    "y",
                                    "z"
                                  ], zyx)));
              }));
      }));

/*  Not a pure module */
