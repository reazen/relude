// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Js_exn = require("melange.belt/./js_exn.js");
var Caml_format = require("melange.runtime/caml_format.js");
var Melange__FS = require("./testUtils/FS.js");
var Caml_exceptions = require("melange.runtime/caml_exceptions.js");
var Relude__Relude_IO = require("relude/./Relude_IO.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_List = require("relude/./Relude_List.js");
var Relude__Relude_Void = require("relude/./Relude_Void.js");
var Relude__Relude_Float = require("relude/./Relude_Float.js");
var Relude__Relude_Js_Exn = require("relude/js/Relude_Js_Exn.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_Result = require("relude/./Relude_Result.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_Globals = require("relude/./Relude_Globals.js");

var throwJSError = (function() { throw new Error("Error from JS"); });

jest.useFakeTimers();

Jest.describe("IO basics", (function (param) {
        Jest.testAsync("pure unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.pure(42));
              }));
        Jest.testAsync("pureWithVoid unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.pureWithVoid(42));
              }));
        Jest.testAsync("throw unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (_a) {
                        if (_a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.pass);
                        }
                      }), Relude__Relude_IO.throwWithVoid("this is a test"));
              }));
        Jest.testAsync("suspend unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.suspend(function (param) {
                          return 42;
                        }));
              }));
        Jest.testAsync("suspendWithVoid unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.suspendWithVoid(function (param) {
                          return 42;
                        }));
              }));
        Jest.testAsync("suspendIO pure unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.suspendIO(function (param) {
                          return Relude__Relude_IO.pure(42);
                        }));
              }));
        Jest.testAsync("suspendIO suspend unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.suspendIO(function (param) {
                          return Relude__Relude_IO.suspend(function (param) {
                                      return 42;
                                    });
                        }));
              }));
        Jest.testAsync("suspendIO suspendIO pure unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.suspendIO(function (param) {
                          return Relude__Relude_IO.suspendIO(function (param) {
                                      return Relude__Relude_IO.pure(42);
                                    });
                        }));
              }));
        Jest.testAsync("suspendIO async unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.suspendIO(function (param) {
                          return Relude__Relude_IO.async(function (onDone) {
                                      Curry._1(onDone, {
                                            TAG: /* Ok */0,
                                            _0: 42
                                          });
                                    });
                        }));
              }));
        Jest.testAsync("async Ok unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.async(function (onDone) {
                          Curry._1(onDone, {
                                TAG: /* Ok */0,
                                _0: 42
                              });
                        }));
              }));
        Jest.testAsync("async Error unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (msg) {
                        if (msg.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("it failed", Jest.Expect.expect(msg._0)));
                        }
                      }), Relude__Relude_IO.async(function (onDone) {
                          Curry._1(onDone, {
                                TAG: /* Error */1,
                                _0: "it failed"
                              });
                        }));
              }));
        Jest.testAsync("pure map unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.map((function (a) {
                            return a + 10 | 0;
                          }), Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("pure map <$$> unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.$less$$$great(Relude__Relude_IO.pure(42), (function (a) {
                            return a + 10 | 0;
                          })));
              }));
        Jest.testAsync("pure tap unsafeRunAsync", undefined, (function (onDone) {
                var a = {
                  contents: 0
                };
                Relude__Relude_IO.unsafeRunAsync((function (_value) {
                        if (_value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a.contents)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.tap(function (b) {
                            a.contents = b;
                          })(Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("pure tapError unsafeRunAsync", undefined, (function (onDone) {
                var a = {
                  contents: 0
                };
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a.contents)));
                        }
                      }), Relude__Relude_IO.tapError((function (b) {
                            a.contents = b;
                          }), Relude__Relude_IO.$$throw(42)));
              }));
        Jest.testAsync("pure apply unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(84, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                              return (a << 1);
                            }), Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("align pure pure", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (ior) {
                        if (ior.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual({
                                          TAG: /* Both */2,
                                          _0: 42,
                                          _1: "a"
                                        }, Jest.Expect.expect(ior._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.align(Relude__Relude_IO.pure(42), Relude__Relude_IO.pure("a")));
              }));
        Jest.testAsync("align pure throw", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (ior) {
                        if (ior.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual({
                                          TAG: /* This */0,
                                          _0: 42
                                        }, Jest.Expect.expect(ior._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.align(Relude__Relude_IO.pure(42), Relude__Relude_IO.$$throw("e2")));
              }));
        Jest.testAsync("align throw pure", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (ior) {
                        if (ior.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual({
                                          TAG: /* That */1,
                                          _0: 99
                                        }, Jest.Expect.expect(ior._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.align(Relude__Relude_IO.$$throw("e1"), Relude__Relude_IO.pure(99)));
              }));
        Jest.testAsync("align throw throw", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("e1", Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.align(Relude__Relude_IO.$$throw("e1"), Relude__Relude_IO.$$throw("e2")));
              }));
        Jest.testAsync("alignWith pure pure", undefined, (function (onDone) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                Relude__Relude_IO.unsafeRunAsync((function (v) {
                        if (v.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(141, Jest.Expect.expect(v._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.alignWith(f, Relude__Relude_IO.pure(42), Relude__Relude_IO.pure("99")));
              }));
        Jest.testAsync("alignWith pure throw", undefined, (function (onDone) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                Relude__Relude_IO.unsafeRunAsync((function (v) {
                        if (v.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(v._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.alignWith(f, Relude__Relude_IO.pure(42), Relude__Relude_IO.$$throw("e2")));
              }));
        Jest.testAsync("alignWith throw pure", undefined, (function (onDone) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                Relude__Relude_IO.unsafeRunAsync((function (v) {
                        if (v.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(99, Jest.Expect.expect(v._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.alignWith(f, Relude__Relude_IO.$$throw("e1"), Relude__Relude_IO.pure("99")));
              }));
        Jest.testAsync("alignWith throw throw", undefined, (function (onDone) {
                var f = function (a) {
                  switch (a.TAG | 0) {
                    case /* This */0 :
                        return a._0;
                    case /* That */1 :
                        return Caml_format.caml_int_of_string(a._0);
                    case /* Both */2 :
                        return a._0 + Caml_format.caml_int_of_string(a._1) | 0;
                    
                  }
                };
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("e1", Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.alignWith(f, Relude__Relude_IO.$$throw("e1"), Relude__Relude_IO.$$throw("e2")));
              }));
        Jest.testAsync("pure flatMap pure unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.flatMap((function (a) {
                            return Relude__Relude_IO.pure(a + 10 | 0);
                          }), Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("throw flatMap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(value._0)));
                        }
                      }), Relude__Relude_IO.flatMap((function (a) {
                            return Relude__Relude_IO.pure(a + 1 | 0);
                          }), Relude__Relude_IO.$$throw(42)));
              }));
        Jest.testAsync("pure flatMap pure flatMap pure flatMap pure unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(72, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.flatMap((function (a) {
                            return Relude__Relude_IO.pure(a + 10 | 0);
                          }), Relude__Relude_IO.flatMap((function (a) {
                                return Relude__Relude_IO.pure(a + 10 | 0);
                              }), Relude__Relude_IO.flatMap((function (a) {
                                    return Relude__Relude_IO.pure(a + 10 | 0);
                                  }), Relude__Relude_IO.pure(42)))));
              }));
        Jest.testAsync("pure flatMap suspend flatMap pure unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (value) {
                        if (value.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(104, Jest.Expect.expect(value._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.flatMap((function (a) {
                            return Relude__Relude_IO.flatMap((function (b) {
                                          return Relude__Relude_IO.pure((b << 1));
                                        }), Relude__Relude_IO.suspend(function (param) {
                                            return a + 10 | 0;
                                          }));
                          }), Relude__Relude_IO.pure(42)));
              }));
      }));

Jest.describe("IO fromOption", (function (param) {
        Jest.testAsync("fromOption Some unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(32, Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.fromOption((function (param) {
                            return "Failed";
                          }), 32));
              }));
        Jest.testAsync("fromOption None unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (error) {
                        if (error.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("Messed up", Jest.Expect.expect(error._0)));
                        }
                      }), Relude__Relude_IO.fromOption((function (param) {
                            return "Messed up";
                          }), undefined));
              }));
      }));

Jest.describe("IO fromResult", (function (param) {
        Jest.testAsync("fromResult Ok unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(32, Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.fromResult({
                          TAG: /* Ok */0,
                          _0: 32
                        }));
              }));
        Jest.testAsync("fromResult Error unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (error) {
                        if (error.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("Messed up", Jest.Expect.expect(error._0)));
                        }
                      }), Relude__Relude_IO.fromResult({
                          TAG: /* Error */1,
                          _0: "Messed up"
                        }));
              }));
      }));

Jest.describe("IO cond", (function (param) {
        Jest.testAsync("pure cond map unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, assertion._0);
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Relude__Relude_IO.map((function (a) {
                            return Jest.Expect.toEqual("is five", Jest.Expect.expect(a));
                          }), Relude__Relude_IO.cond((function (a) {
                                return Relude__Relude_String.length(a) === 5;
                              }), "is five", "boom explosions", Relude__Relude_IO.pure("hello"))));
              }));
        Jest.testAsync("throw cond error unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("boom explosions", Jest.Expect.expect(a._0)));
                        }
                      }), Relude__Relude_IO.cond((function (a) {
                            return Relude__Relude_String.length(a) === 5;
                          }), "is five", "boom explosions", Relude__Relude_IO.pure("hel")));
              }));
        Jest.testAsync("pure condError mapError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        } else {
                          return Curry._1(onDone, assertion._0);
                        }
                      }), Curry._2(Relude__Relude_IO.mapError, (function (a) {
                            return Jest.Expect.toEqual("string is too long", Jest.Expect.expect(a));
                          }), Relude__Relude_IO.condError((function (a) {
                                return Relude__Relude_String.length(a) === 5;
                              }), "string is too long", Relude__Relude_IO.pure("hello world"))));
              }));
        Jest.testAsync("pure condError ok unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual("hello", Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Relude__Relude_IO.condError((function (a) {
                            return Relude__Relude_String.length(a) === 5;
                          }), "string is too long", Relude__Relude_IO.pure("hello")));
              }));
      }));

Jest.describe("IO compose", (function (param) {
        Jest.describe("pure", (function (param) {
                var ioAToB = Relude__Relude_IO.pure(function (a) {
                      return a + "1";
                    });
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.$less$less$less(ioBToC, ioAToB));
                      }));
                Jest.testAsync("pure (andThen)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.$great$great$great(ioAToB, ioBToC));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, Relude__Relude_Result.ok(function (b) {
                                        return b + "2";
                                      }));
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, Relude__Relude_Result.error("error"));
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        var ioAToB = Relude__Relude_IO.pure(function (a) {
                              return a + "1";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("throw", (function (param) {
                var ioAToB = Relude__Relude_IO.$$throw("error");
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (i) {
                              return i + 42 | 0;
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error 2");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, i) {
                              return i + 42 | 0;
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (i) {
                                          return i + 42 | 0;
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, Relude__Relude_Result.ok(function (i) {
                                        return i + 42 | 0;
                                      }));
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, Relude__Relude_Result.error("error 2"));
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (a, b) {
                                return a + b | 0;
                              }), Relude__Relude_IO.pure(1));
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a, b) {
                                  return a + b | 0;
                                }), Relude__Relude_IO.pure(1));
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (a) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return a + b | 0;
                                          });
                              }), Relude__Relude_IO.pure(0));
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("suspend", (function (param) {
                var ioAToB = Relude__Relude_IO.suspend(function (param, a) {
                      return a + "1";
                    });
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: (function (b) {
                                        return b + "2";
                                      })
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("suspendIO", (function (param) {
                var ioAToB = Relude__Relude_IO.suspendIO(function (param) {
                      return Relude__Relude_IO.pure(function (a) {
                                  return a + "1";
                                });
                    });
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: (function (b) {
                                        return b + "2";
                                      })
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("async (ok)", (function (param) {
                var ioAToB = Relude__Relude_IO.async(function (onDone) {
                      Curry._1(onDone, Relude__Relude_Result.ok(function (a) {
                                return a + "1";
                              }));
                    });
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (_b) {
                                          return Relude__Relude_Result.error("error");
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(Relude__Relude_Result.error("error"), Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: (function (b) {
                                        return b + "2";
                                      })
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("async (error)", (function (param) {
                var ioAToB = Relude__Relude_IO.async(function (onDone) {
                      Curry._1(onDone, Relude__Relude_Result.error("error"));
                    });
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: (function (b) {
                                        return b + "2";
                                      })
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("map", (function (param) {
                var ioAToB = Relude__Relude_IO.map((function (one, a) {
                        return a + one;
                      }), Relude__Relude_IO.pure("1"));
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: (function (b) {
                                        return b + "2";
                                      })
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("apply", (function (param) {
                var ioAToB = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (one, a) {
                          return a + one;
                        }), Relude__Relude_IO.pure("1"));
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: (function (b) {
                                        return b + "2";
                                      })
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
        Jest.describe("flatMap", (function (param) {
                var ioAToB = Relude__Relude_IO.flatMap((function (one) {
                        return Relude__Relude_IO.pure(function (a) {
                                    return a + one;
                                  });
                      }), Relude__Relude_IO.pure("1"));
                Jest.testAsync("pure", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.pure(function (b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.$$throw("error");
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspend(function (param, b) {
                              return b + "2";
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.suspendIO(function (param) {
                              return Relude__Relude_IO.pure(function (b) {
                                          return b + "2";
                                        });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: (function (b) {
                                        return b + "2";
                                      })
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Error */1,
                                    _0: "error"
                                  });
                            });
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("error", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.map((function (two, b) {
                                return b + two;
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (two, b) {
                                  return b + two;
                                }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        var ioBToC = Relude__Relude_IO.flatMap((function (two) {
                                return Relude__Relude_IO.pure(function (b) {
                                            return b + two;
                                          });
                              }), Relude__Relude_IO.pure("2"));
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("012", Jest.Expect.expect(Curry._1(a._0, "0"))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("fail"));
                                }
                              }), Relude__Relude_IO.compose(ioBToC, ioAToB));
                      }));
              }));
      }));

Jest.describe("IO mapError", (function (param) {
        Jest.testAsync("pure mapError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Curry._2(Relude__Relude_IO.mapError, (function (param) {
                            return "error";
                          }), Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("throw mapError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (_a) {
                        if (_a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.pass);
                        }
                      }), Curry._2(Relude__Relude_IO.mapError, Relude__Relude_Js_Exn.make, Relude__Relude_IO.$$throw("this is a test")));
              }));
      }));

Jest.describe("IO catchError", (function (param) {
        Jest.testAsync("pure catchError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.catchError((function (e) {
                            return Relude__Relude_IO.$$throw(e + e);
                          }), Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("throw catchError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (v) {
                        if (v.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(84, Jest.Expect.expect(v._0)));
                        }
                      }), Relude__Relude_IO.catchError((function (e) {
                            var intValue = Relude__Relude_Option.getOrElse(0, Relude__Relude_Int.fromString(e));
                            return Relude__Relude_IO.$$throw((intValue << 1));
                          }), Relude__Relude_IO.$$throw("42")));
              }));
        Jest.testAsync("pure flatMap catchError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(55, Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.catchError((function (param) {
                            return Relude__Relude_IO.pure(55);
                          }), Relude__Relude_IO.flatMap((function (a) {
                                return Relude__Relude_IO.$$throw(String(a));
                              }), Relude__Relude_IO.pure(42))));
              }));
        Jest.testAsync("async (ok) catchError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual("0", Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.catchError((function (e) {
                            return Relude__Relude_IO.$$throw(e + "1");
                          }), Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, Relude__Relude_Result.ok("0"));
                            })));
              }));
        Jest.testAsync("async (error) catchError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.catchError((function (e) {
                            return Relude__Relude_IO.$$throw(e + "1");
                          }), Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, Relude__Relude_Result.error("0"));
                            })));
              }));
        Jest.describe("map catchError unsafeRunAsync", (function (param) {
                var r0ToA = function (a) {
                  return a + "1";
                };
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.pure("0"))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("02", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.$$throw("0"))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.suspend(function (param) {
                                          return "0";
                                        }))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.suspendIO(function (param) {
                                          return Relude__Relude_IO.pure("0");
                                        }))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.ok("0"));
                                        }))));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("02", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.error("0"));
                                        }))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.map((function (a) {
                                            return a + "0";
                                          }), Relude__Relude_IO.pure("+")))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return a + "0";
                                            }), Relude__Relude_IO.pure("+")))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.map(r0ToA, Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure(a + "0");
                                          }), Relude__Relude_IO.pure("+")))));
                      }));
              }));
        Jest.describe("apply catchError unsafeRunAsync", (function (param) {
                var ioR0ToA = Relude__Relude_IO.pure(function (a) {
                      return a + "1";
                    });
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.pure("0"))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("02", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.$$throw("0"))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.suspend(function (param) {
                                          return "0";
                                        }))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.suspendIO(function (param) {
                                          return Relude__Relude_IO.pure("0");
                                        }))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.ok("0"));
                                        }))));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("02", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.error("0"));
                                        }))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.map((function (a) {
                                            return a + "0";
                                          }), Relude__Relude_IO.pure("+")))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return a + "0";
                                            }), Relude__Relude_IO.pure("+")))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.apply(ioR0ToA, Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure(a + "0");
                                          }), Relude__Relude_IO.pure("+")))));
                      }));
              }));
        Jest.describe("flatMap catchError unsafeRunAsync", (function (param) {
                var r0ToIOA = function (a) {
                  return Relude__Relude_IO.pure(a + "1");
                };
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.pure("0"))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("02", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.$$throw("0"))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.suspend(function (param) {
                                          return "0";
                                        }))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.suspendIO(function (param) {
                                          return Relude__Relude_IO.pure("0");
                                        }))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.ok("0"));
                                        }))));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual("02", Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.error("0"));
                                        }))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.map((function (a) {
                                            return a + "0";
                                          }), Relude__Relude_IO.pure("+")))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return a + "0";
                                            }), Relude__Relude_IO.pure("+")))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual("+01", Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.catchError((function (e) {
                                    return Relude__Relude_IO.$$throw(e + "2");
                                  }), Relude__Relude_IO.flatMap(r0ToIOA, Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure(a + "0");
                                          }), Relude__Relude_IO.pure("+")))));
                      }));
              }));
      }));

Jest.describe("IO handleError", (function (param) {
        Jest.testAsync("throw handleError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.handleError(Caml_format.caml_int_of_string, Relude__Relude_IO.$$throw("42")));
              }));
      }));

Jest.describe("IO mapHandleError", (function (param) {
        Jest.testAsync("pure mapHandleError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (b) {
                        if (b.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(84, Jest.Expect.expect(b._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.mapHandleError((function (a) {
                            return (a << 1);
                          }), Caml_format.caml_int_of_string, Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("pure mapHandleError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (b) {
                        if (b.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(b._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Fail"));
                        }
                      }), Relude__Relude_IO.mapHandleError((function (a) {
                            return (a << 1);
                          }), Caml_format.caml_int_of_string, Relude__Relude_IO.$$throw("42")));
              }));
      }));

Jest.describe("IO bimap/bitap", (function (param) {
        Jest.testAsync("suspend bimap bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (a) {
                            return Jest.Expect.toEqual(84, Jest.Expect.expect(a));
                          }), (function (param) {
                            return Jest.fail("fail");
                          }), Relude__Relude_IO.bimap((function (a) {
                                return (a << 1);
                              }), (function (e) {
                                return e + e;
                              }), Relude__Relude_IO.suspend(function (param) {
                                  return 42;
                                }))));
              }));
        Jest.testAsync("suspend bitap (ok) unsafeRunAsync", undefined, (function (onDone) {
                var a = {
                  contents: 0
                };
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(43, Jest.Expect.expect(a.contents)));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Relude__Relude_IO.bitap((function (b) {
                            a.contents = b + 1 | 0;
                          }), (function (e) {
                            a.contents = e - 1 | 0;
                          }), Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("suspend bitap (error) unsafeRunAsync", undefined, (function (onDone) {
                var a = {
                  contents: 0
                };
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(41, Jest.Expect.expect(a.contents)));
                        }
                      }), Relude__Relude_IO.bitap((function (b) {
                            a.contents = b + 1 | 0;
                          }), (function (e) {
                            a.contents = e - 1 | 0;
                          }), Relude__Relude_IO.$$throw(42)));
              }));
      }));

Jest.describe("IO alt", (function (param) {
        Jest.testAsync("alt success success", undefined, (function (onDone) {
                var a = {
                  contents: false
                };
                var b = {
                  contents: false
                };
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.Expect.toEqual([
                                        true,
                                        false
                                      ], Jest.Expect.expect([
                                            a.contents,
                                            b.contents
                                          ]));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.alt(Relude__Relude_IO.suspend(function (param) {
                                  a.contents = true;
                                }), Relude__Relude_IO.suspend(function (param) {
                                  b.contents = true;
                                }))));
              }));
        Jest.testAsync("alt fail success", undefined, (function (onDone) {
                var a = {
                  contents: false
                };
                var b = {
                  contents: false
                };
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.Expect.toEqual([
                                        true,
                                        true
                                      ], Jest.Expect.expect([
                                            a.contents,
                                            b.contents
                                          ]));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.alt(Relude__Relude_IO.suspendIO(function (param) {
                                  a.contents = true;
                                  return Relude__Relude_IO.$$throw("Failed!");
                                }), Relude__Relude_IO.suspend(function (param) {
                                  b.contents = true;
                                }))));
              }));
        Jest.testAsync("orElse success success", undefined, (function (onDone) {
                var a = {
                  contents: false
                };
                var b = {
                  contents: false
                };
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.Expect.toEqual([
                                        true,
                                        false
                                      ], Jest.Expect.expect([
                                            a.contents,
                                            b.contents
                                          ]));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.orElse(Relude__Relude_IO.suspend(function (param) {
                                  b.contents = true;
                                }), Relude__Relude_IO.suspend(function (param) {
                                  a.contents = true;
                                }))));
              }));
        Jest.testAsync("orElse fail success", undefined, (function (onDone) {
                var a = {
                  contents: false
                };
                var b = {
                  contents: false
                };
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.Expect.toEqual([
                                        true,
                                        true
                                      ], Jest.Expect.expect([
                                            a.contents,
                                            b.contents
                                          ]));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.orElse(Relude__Relude_IO.suspend(function (param) {
                                  b.contents = true;
                                }), Relude__Relude_IO.suspendIO(function (param) {
                                  a.contents = true;
                                  return Relude__Relude_IO.$$throw("Failed!");
                                }))));
              }));
        Jest.testAsync("<|> alt operator success success", undefined, (function (onDone) {
                var a = {
                  contents: false
                };
                var b = {
                  contents: false
                };
                var IOE = Relude__Relude_IO.WithError({});
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.Expect.toEqual([
                                        true,
                                        false
                                      ], Jest.Expect.expect([
                                            a.contents,
                                            b.contents
                                          ]));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Curry._2(IOE.Infix.$less$pipe$great, Relude__Relude_IO.suspend(function (param) {
                                  a.contents = true;
                                }), Relude__Relude_IO.suspend(function (param) {
                                  b.contents = true;
                                }))));
              }));
        Jest.testAsync("<|> alt operator fail success", undefined, (function (onDone) {
                var a = {
                  contents: false
                };
                var b = {
                  contents: false
                };
                var IOE = Relude__Relude_IO.WithError({});
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.Expect.toEqual([
                                        true,
                                        true
                                      ], Jest.Expect.expect([
                                            a.contents,
                                            b.contents
                                          ]));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Curry._2(IOE.Infix.$less$pipe$great, Relude__Relude_IO.suspendIO(function (param) {
                                  a.contents = true;
                                  return Relude__Relude_IO.$$throw("Darn");
                                }), Relude__Relude_IO.suspend(function (param) {
                                  b.contents = true;
                                }))));
              }));
      }));

Jest.describe("IO tries/exceptions", (function (param) {
        Jest.testAsync("tries unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Should not be Ok"));
                        }
                        var jsExn = param._0;
                        if (jsExn.RE_EXN_ID !== Js_exn.$$Error) {
                          return Curry._1(onDone, Jest.fail("Should have been an Js.Exn"));
                        }
                        var msg = jsExn._1.message;
                        Curry._1(onDone, Jest.Expect.toEqual("Error from JS", Jest.Expect.expect(msg)));
                      }), Relude__Relude_IO.tries(throwJSError));
              }));
        Jest.testAsync("triesJS unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (jsExn) {
                        if (jsExn.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Should not be Ok"));
                        }
                        var msg = jsExn._0.message;
                        Curry._1(onDone, Jest.Expect.toEqual("Error from JS", Jest.Expect.expect(msg)));
                      }), Relude__Relude_IO.triesJS(throwJSError));
              }));
        Jest.testAsync("triesJS with Reason Js.Exn.raiseError", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (result) {
                        if (result.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Should not be Ok"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("Fail", Jest.Expect.expect(result._0.message)));
                        }
                      }), Relude__Relude_IO.triesJS(function (param) {
                          return Js_exn.raiseError("Fail");
                        }));
              }));
        Jest.testAsync("triesJS with raw JS function that throws", undefined, (function (onDone) {
                var jsThrow = (function() {
        throw new Error("This sucks");
      });
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Should not be Ok"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual("This sucks", Jest.Expect.expect(e._0.message)));
                        }
                      }), Relude__Relude_IO.triesJS(function (param) {
                          return jsThrow();
                        }));
              }));
        Jest.testAsync("triesJS with exn", undefined, (function (onDone) {
                var MyExn = /* @__PURE__ */Caml_exceptions.create("MyExn");
                Relude__Relude_IO.unsafeRunAsync((function (result) {
                        if (result.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Should not be Ok"));
                        }
                        var e = result._0;
                        console.log(e);
                        Curry._1(onDone, Jest.Expect.toEqual("Unexpected error: MyExn,8,Custom error", Jest.Expect.expect(e.message)));
                      }), Relude__Relude_IO.triesJS(function (param) {
                          throw {
                                RE_EXN_ID: MyExn,
                                _1: "Custom error",
                                Error: new Error()
                              };
                        }));
              }));
      }));

Jest.describe("IO flip", (function (param) {
        Jest.testAsync("pure flip unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.flip(Relude__Relude_IO.pure(42)));
              }));
        Jest.testAsync("throw flip unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual("my error", Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.flip(Relude__Relude_IO.$$throw("my error")));
              }));
        Jest.testAsync("suspend flip unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.flip(Relude__Relude_IO.suspend(function (param) {
                              return 42;
                            })));
              }));
        Jest.testAsync("suspendIO flip unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.flip(Relude__Relude_IO.suspendIO(function (param) {
                              return {
                                      TAG: /* Pure */0,
                                      _0: 42
                                    };
                            })));
              }));
        Jest.testAsync("async flip unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.flip(Relude__Relude_IO.async(function (onDone) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: 42
                                  });
                            })));
              }));
        Jest.describe("map flip unsafeRunAsync", (function (param) {
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.pure(42))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.$$throw(42))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.suspend(function (param) {
                                          return 42;
                                        }))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.suspendIO(function (param) {
                                          return Relude__Relude_IO.pure(42);
                                        }))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.ok(42));
                                        }))));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.error(42));
                                        }))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.map((function (b) {
                                            return b + 42 | 0;
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (b) {
                                              return b + 42 | 0;
                                            }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.map((function (a) {
                                        return a + 10 | 0;
                                      }), Relude__Relude_IO.flatMap((function (b) {
                                            return Relude__Relude_IO.pure(b + 42 | 0);
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
              }));
        Jest.describe("apply flip unsafeRunAsync", (function (param) {
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.pure(42))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.$$throw(42))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.suspend(function (param) {
                                          return 42;
                                        }))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.suspendIO(function (param) {
                                          return Relude__Relude_IO.pure(42);
                                        }))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.ok(42));
                                        }))));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.async(function (onDone) {
                                          Curry._1(onDone, Relude__Relude_Result.error(42));
                                        }))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.map((function (b) {
                                            return b + 42 | 0;
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (b) {
                                              return b + 42 | 0;
                                            }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.map((function (b) {
                                            return b + 42 | 0;
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                          return a + 10 | 0;
                                        }), Relude__Relude_IO.flatMap((function (b) {
                                            return Relude__Relude_IO.pure(b + 42 | 0);
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
              }));
        Jest.testAsync("pure flatMap flip unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (e) {
                        if (e.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        } else {
                          return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                        }
                      }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                return {
                                        TAG: /* Pure */0,
                                        _0: a + 10 | 0
                                      };
                              }), Relude__Relude_IO.pure(42))));
              }));
        Jest.describe("flatMap flip unsafeRunAsync", (function (param) {
                Jest.testAsync("pure flatMap map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(11152, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                        return Relude__Relude_IO.async(function (onDone) {
                                                    Curry._1(onDone, Relude__Relude_Result.ok(a + 10000 | 0));
                                                  });
                                      }), Relude__Relude_IO.map((function (a) {
                                            return a + 1000 | 0;
                                          }), Relude__Relude_IO.flatMap((function (a) {
                                                return {
                                                        TAG: /* Pure */0,
                                                        _0: a + 100 | 0
                                                      };
                                              }), Relude__Relude_IO.flatMap((function (a) {
                                                    return {
                                                            TAG: /* Pure */0,
                                                            _0: a + 10 | 0
                                                          };
                                                  }), Relude__Relude_IO.pure(42)))))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                        return {
                                                TAG: /* Pure */0,
                                                _0: a + 10 | 0
                                              };
                                      }), Relude__Relude_IO.$$throw(42))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                        return {
                                                TAG: /* Pure */0,
                                                _0: a + 10 | 0
                                              };
                                      }), Relude__Relude_IO.suspend(function (param) {
                                          return 42;
                                        }))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                        return {
                                                TAG: /* Pure */0,
                                                _0: a + 10 | 0
                                              };
                                      }), Relude__Relude_IO.suspendIO(function (param) {
                                          return Relude__Relude_IO.pure(42);
                                        }))));
                      }));
                Jest.testAsync("async flatMap suspend flip bimap unsafeRunAsync", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (param) {
                                    return Jest.fail("fail");
                                  }), (function (e) {
                                    return Jest.Expect.toEqual(42, Jest.Expect.expect(e));
                                  }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.suspend(function (param) {
                                                        return a;
                                                      });
                                          }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, Relude__Relude_Result.ok(42));
                                            })))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                        return {
                                                TAG: /* Pure */0,
                                                _0: a + 10 | 0
                                              };
                                      }), Relude__Relude_IO.map((function (a) {
                                            return a + 42 | 0;
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                        return {
                                                TAG: /* Pure */0,
                                                _0: a + 10 | 0
                                              };
                                      }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return a + 42 | 0;
                                            }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (e) {
                                if (e.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                } else {
                                  return Curry._1(onDone, Jest.Expect.toEqual(52, Jest.Expect.expect(e._0)));
                                }
                              }), Relude__Relude_IO.flip(Relude__Relude_IO.flatMap((function (a) {
                                        return {
                                                TAG: /* Pure */0,
                                                _0: a + 10 | 0
                                              };
                                      }), Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure(a + 42 | 0);
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
              }));
      }));

Jest.describe("IO summonError", (function (param) {
        Jest.testAsync("pure summonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (resA) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Ok */0,
                                        _0: 42
                                      }, Jest.Expect.expect(resA));
                          }), (function (_e) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.summonError(Relude__Relude_IO.pure(42))));
              }));
        Jest.testAsync("suspend summonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (resA) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Ok */0,
                                        _0: 42
                                      }, Jest.Expect.expect(resA));
                          }), (function (_e) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.summonError(Relude__Relude_IO.suspend(function (param) {
                                  return 42;
                                }))));
              }));
        Jest.testAsync("suspendIO pure summonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (resA) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Ok */0,
                                        _0: 42
                                      }, Jest.Expect.expect(resA));
                          }), (function (_e) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.summonError(Relude__Relude_IO.suspendIO(function (param) {
                                  return Relude__Relude_IO.pure(42);
                                }))));
              }));
        Jest.testAsync("suspendIO throw summonError unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (resA) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Error */1,
                                        _0: "error!"
                                      }, Jest.Expect.expect(resA));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.summonError(Relude__Relude_IO.suspendIO(function (param) {
                                  return Relude__Relude_IO.$$throw("error!");
                                }))));
              }));
        Jest.testAsync("suspendIO pure map flatMap pure summonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (resA) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Ok */0,
                                        _0: 63
                                      }, Jest.Expect.expect(resA));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.summonError(Relude__Relude_IO.suspendIO(function (param) {
                                  return Relude__Relude_IO.flatMap((function (a) {
                                                return Relude__Relude_IO.pure(a + 11 | 0);
                                              }), Relude__Relude_IO.map((function (a) {
                                                    return a + 10 | 0;
                                                  }), Relude__Relude_IO.pure(42)));
                                }))));
              }));
        Jest.testAsync("async flatMap summonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (resA) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Ok */0,
                                        _0: 42
                                      }, Jest.Expect.expect(resA));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap(Relude__Relude_IO.pure, Relude__Relude_IO.async(function (onDone) {
                                      Curry._1(onDone, Relude__Relude_Result.ok(42));
                                    })))));
              }));
        Jest.testAsync("async flatMap throw summonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (resA) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Error */1,
                                        _0: 42
                                      }, Jest.Expect.expect(resA));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap(Relude__Relude_IO.$$throw, Relude__Relude_IO.async(function (onDone) {
                                      Curry._1(onDone, Relude__Relude_Result.ok(42));
                                    })))));
              }));
        Jest.testAsync("async flatMap suspend summonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (res) {
                            return Jest.Expect.toEqual({
                                        TAG: /* Ok */0,
                                        _0: 42
                                      }, Jest.Expect.expect(res));
                          }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                    return Relude__Relude_IO.suspend(function (param) {
                                                return a;
                                              });
                                  }), Relude__Relude_IO.async(function (onDone) {
                                      Curry._1(onDone, Relude__Relude_Result.ok(42));
                                    })))));
              }));
        Jest.describe("map unsafeRunAsync", (function (param) {
                Jest.testAsync("throw", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (a) {
                                if (a.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Result.getError(a._0))));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.summonError(Relude__Relude_IO.map((function (a) {
                                        return a + 42 | 0;
                                      }), Relude__Relude_IO.$$throw(1))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 43
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.map((function (a) {
                                            return a + 42 | 0;
                                          }), Relude__Relude_IO.suspend(function (param) {
                                              return 1;
                                            })))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 43
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.map((function (a) {
                                            return a + 42 | 0;
                                          }), Relude__Relude_IO.suspendIO(function (param) {
                                              return Relude__Relude_IO.pure(1);
                                            })))));
                      }));
                Jest.testAsync("async", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 43
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.map((function (a) {
                                            return a + 42 | 0;
                                          }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, Relude__Relude_Result.ok(1));
                                            })))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 45
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.map((function (a) {
                                            return a + 42 | 0;
                                          }), Relude__Relude_IO.map((function (b) {
                                                return b + 2 | 0;
                                              }), Relude__Relude_IO.pure(1))))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 45
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.map((function (a) {
                                            return a + 42 | 0;
                                          }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (b) {
                                                  return b + 2 | 0;
                                                }), Relude__Relude_IO.pure(1))))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 45
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.map((function (a) {
                                            return a + 42 | 0;
                                          }), Relude__Relude_IO.flatMap((function (b) {
                                                return Relude__Relude_IO.pure(b + 2 | 0);
                                              }), Relude__Relude_IO.pure(1))))));
                      }));
              }));
        Jest.describe("apply unsafeRunAsync", (function (param) {
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.pure(42)))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var a = {
                          contents: undefined
                        };
                        Relude__Relude_IO.unsafeRunAsync((function (param) {
                                if (param.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(2, Jest.Expect.expect(a.contents)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.tap(function (b) {
                                    a.contents = Relude__Relude_Result.getError(b);
                                  })(Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.$$throw(2)))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.suspend(function (param) {
                                              return 42;
                                            })))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.suspendIO(function (param) {
                                              return Relude__Relude_IO.pure(42);
                                            })))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, {
                                                    TAG: /* Ok */0,
                                                    _0: 42
                                                  });
                                            })))));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var a = {
                          contents: undefined
                        };
                        Relude__Relude_IO.unsafeRunAsync((function (param) {
                                if (param.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a.contents)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.tap(function (b) {
                                    a.contents = Relude__Relude_Result.getError(b);
                                  })(Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, {
                                                    TAG: /* Error */1,
                                                    _0: 42
                                                  });
                                            })))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.map((function (a) {
                                                return a + 1 | 0;
                                              }), Relude__Relude_IO.pure(41))))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                                  return a + 1 | 0;
                                                }), Relude__Relude_IO.pure(41))))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.flatMap((function (a) {
                                                return Relude__Relude_IO.pure(a + 1 | 0);
                                              }), Relude__Relude_IO.pure(41))))));
                      }));
              }));
        Jest.describe("flatMap unsafeRunAsync", (function (param) {
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.pure(42)))));
                      }));
                Jest.testAsync("throw", undefined, (function (onDone) {
                        var a = {
                          contents: undefined
                        };
                        Relude__Relude_IO.unsafeRunAsync((function (param) {
                                if (param.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(2, Jest.Expect.expect(a.contents)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.tap(function (b) {
                                    a.contents = Relude__Relude_Result.getError(b);
                                  })(Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.$$throw(2)))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.suspend(function (param) {
                                              return 42;
                                            })))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.suspendIO(function (param) {
                                              return Relude__Relude_IO.pure(42);
                                            })))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, {
                                                    TAG: /* Ok */0,
                                                    _0: 42
                                                  });
                                            })))));
                      }));
                Jest.testAsync("async (error)", undefined, (function (onDone) {
                        var a = {
                          contents: undefined
                        };
                        Relude__Relude_IO.unsafeRunAsync((function (param) {
                                if (param.TAG === /* Ok */0) {
                                  return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a.contents)));
                                } else {
                                  return Curry._1(onDone, Jest.fail("Failed"));
                                }
                              }), Relude__Relude_IO.tap(function (b) {
                                    a.contents = Relude__Relude_Result.getError(b);
                                  })(Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, {
                                                    TAG: /* Error */1,
                                                    _0: 42
                                                  });
                                            })))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.map((function (a) {
                                                return a + 1 | 0;
                                              }), Relude__Relude_IO.pure(41))))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                                  return a + 1 | 0;
                                                }), Relude__Relude_IO.pure(41))))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (res) {
                                    return Jest.Expect.toEqual({
                                                TAG: /* Ok */0,
                                                _0: 84
                                              }, Jest.Expect.expect(res));
                                  }), Relude__Relude_Void.absurd, Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure((a << 1));
                                          }), Relude__Relude_IO.flatMap((function (a) {
                                                return Relude__Relude_IO.pure(a + 1 | 0);
                                              }), Relude__Relude_IO.pure(41))))));
                      }));
              }));
      }));

Jest.describe("IO unsummonError", (function (param) {
        Jest.testAsync("pure Ok unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (a) {
                            return Jest.Expect.toEqual(42, Jest.Expect.expect(a));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.pure({
                                  TAG: /* Ok */0,
                                  _0: 42
                                }))));
              }));
        Jest.testAsync("pure Error unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.fail("Failed");
                          }), (function (error) {
                            return Jest.Expect.toEqual("e!", Jest.Expect.expect(error));
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.pure({
                                  TAG: /* Error */1,
                                  _0: "e!"
                                }))));
              }));
        Jest.testAsync("suspend Ok unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (a) {
                            return Jest.Expect.toEqual(42, Jest.Expect.expect(a));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.suspend(function (param) {
                                  return {
                                          TAG: /* Ok */0,
                                          _0: 42
                                        };
                                }))));
              }));
        Jest.testAsync("suspend Error unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.fail("Failed");
                          }), (function (error) {
                            return Jest.Expect.toEqual("e!", Jest.Expect.expect(error));
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.suspend(function (param) {
                                  return {
                                          TAG: /* Error */1,
                                          _0: "e!"
                                        };
                                }))));
              }));
        Jest.testAsync("suspendIO pure Ok unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (a) {
                            return Jest.Expect.toEqual(42, Jest.Expect.expect(a));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.suspendIO(function (param) {
                                  return Relude__Relude_IO.pure({
                                              TAG: /* Ok */0,
                                              _0: 42
                                            });
                                }))));
              }));
        Jest.testAsync("suspendIO pure Error unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (param) {
                            return Jest.fail("Failed");
                          }), (function (error) {
                            return Jest.Expect.toEqual("e!", Jest.Expect.expect(error));
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.suspendIO(function (param) {
                                  return Relude__Relude_IO.pure({
                                              TAG: /* Error */1,
                                              _0: "e!"
                                            });
                                }))));
              }));
        Jest.describe("flatMap unsummonError unsafeRunAsync", (function (param) {
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(42, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("fail");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure({
                                                        TAG: /* Ok */0,
                                                        _0: a + 42 | 0
                                                      });
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(42, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("fail");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure({
                                                        TAG: /* Ok */0,
                                                        _0: a + 42 | 0
                                                      });
                                          }), Relude__Relude_IO.suspend(function (param) {
                                              return 0;
                                            })))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(42, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("fail");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure({
                                                        TAG: /* Ok */0,
                                                        _0: a + 42 | 0
                                                      });
                                          }), Relude__Relude_IO.suspendIO(function (param) {
                                              return Relude__Relude_IO.pure(0);
                                            })))));
                      }));
                Jest.testAsync("async flatMap suspend unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(42, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("fail");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.suspend(function (param) {
                                                        return a;
                                                      });
                                          }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, Relude__Relude_Result.ok(Relude__Relude_Result.ok(42)));
                                            })))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(43, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("fail");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure({
                                                        TAG: /* Ok */0,
                                                        _0: a + 42 | 0
                                                      });
                                          }), Relude__Relude_IO.map((function (a) {
                                                return a + 1 | 0;
                                              }), Relude__Relude_IO.pure(0))))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(43, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("fail");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure({
                                                        TAG: /* Ok */0,
                                                        _0: a + 42 | 0
                                                      });
                                          }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                                  return a + 1 | 0;
                                                }), Relude__Relude_IO.pure(0))))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(43, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("fail");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.flatMap((function (a) {
                                            return Relude__Relude_IO.pure({
                                                        TAG: /* Ok */0,
                                                        _0: a + 42 | 0
                                                      });
                                          }), Relude__Relude_IO.flatMap((function (a) {
                                                return Relude__Relude_IO.pure(a + 1 | 0);
                                              }), Relude__Relude_IO.pure(0))))));
                      }));
              }));
        Jest.describe("map unsummonError bimap unsafeRunAsync", (function (param) {
                Jest.testAsync("pure", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (param) {
                                    return Jest.pass;
                                  }), (function (param) {
                                    return Jest.fail("Failed");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.map((function (a) {
                                            return {
                                                    TAG: /* Ok */0,
                                                    _0: a + 1 | 0
                                                  };
                                          }), Relude__Relude_IO.pure(0)))));
                      }));
                Jest.testAsync("suspend", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(1, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("Failed");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.map((function (a) {
                                            return {
                                                    TAG: /* Ok */0,
                                                    _0: a + 1 | 0
                                                  };
                                          }), Relude__Relude_IO.suspend(function (param) {
                                              return 0;
                                            })))));
                      }));
                Jest.testAsync("suspendIO", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(1, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("Failed");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.map((function (a) {
                                            return {
                                                    TAG: /* Ok */0,
                                                    _0: a + 1 | 0
                                                  };
                                          }), Relude__Relude_IO.suspendIO(function (param) {
                                              return Relude__Relude_IO.pure(0);
                                            })))));
                      }));
                Jest.testAsync("async (ok)", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(1, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("Failed");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.map((function (a) {
                                            return {
                                                    TAG: /* Ok */0,
                                                    _0: a + 1 | 0
                                                  };
                                          }), Relude__Relude_IO.async(function (onDone) {
                                              Curry._1(onDone, {
                                                    TAG: /* Ok */0,
                                                    _0: 0
                                                  });
                                            })))));
                      }));
                Jest.testAsync("map", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(2, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("Failed");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.map((function (a) {
                                            return {
                                                    TAG: /* Ok */0,
                                                    _0: a + 1 | 0
                                                  };
                                          }), Relude__Relude_IO.map((function (a) {
                                                return a + 1 | 0;
                                              }), Relude__Relude_IO.pure(0))))));
                      }));
                Jest.testAsync("apply", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(2, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("Failed");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.map((function (a) {
                                            return {
                                                    TAG: /* Ok */0,
                                                    _0: a + 1 | 0
                                                  };
                                          }), Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                                  return a + 1 | 0;
                                                }), Relude__Relude_IO.pure(0))))));
                      }));
                Jest.testAsync("flatMap", undefined, (function (onDone) {
                        Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                                Curry._1(onDone, assertion._0);
                              }), Relude__Relude_IO.bimap((function (a) {
                                    return Jest.Expect.toEqual(2, Jest.Expect.expect(a));
                                  }), (function (param) {
                                    return Jest.fail("Failed");
                                  }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.map((function (a) {
                                            return {
                                                    TAG: /* Ok */0,
                                                    _0: a + 1 | 0
                                                  };
                                          }), Relude__Relude_IO.flatMap((function (a) {
                                                return Relude__Relude_IO.pure(a + 1 | 0);
                                              }), Relude__Relude_IO.pure(0))))));
                      }));
              }));
        Jest.testAsync("pure map flatMap pure summonError unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (a) {
                            return Jest.Expect.toEqual(63, Jest.Expect.expect(a));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.summonError(Relude__Relude_IO.flatMap((function (a) {
                                        return Relude__Relude_IO.pure(a + 11 | 0);
                                      }), Relude__Relude_IO.map((function (a) {
                                            return a + 10 | 0;
                                          }), Relude__Relude_IO.pure(42)))))));
              }));
        Jest.testAsync("pure apply summonError apply unsummonError bimap unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (res) {
                        Curry._1(onDone, Relude__Relude_Result.merge(res));
                      }), Relude__Relude_IO.bimap((function (a) {
                            return Jest.Expect.toEqual(252, Jest.Expect.expect(a));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Relude__Relude_IO.unsummonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (res) {
                                      return Relude__Relude_Result.map((function (a) {
                                                    return Math.imul(a, 3);
                                                  }), res);
                                    }), Relude__Relude_IO.summonError(Relude__Relude_IO.apply(Relude__Relude_IO.pure(function (a) {
                                              return (a << 1);
                                            }), Relude__Relude_IO.pure(42)))))));
              }));
      }));

Jest.describe("IO delay", (function (param) {
        Jest.testAsync("delay unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.pass);
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.delay(10));
                jest.advanceTimersByTime(10);
              }));
        Jest.testAsync("pure withDelay unsafeRunAsync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (a) {
                        if (a.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.Expect.toEqual(42, Jest.Expect.expect(a._0)));
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Relude__Relude_IO.withDelay(10, Relude__Relude_IO.pure(42)));
                jest.advanceTimersByTime(10);
              }));
      }));

Jest.testAsync("IO delayWithVoid unsafeRunAsync", undefined, (function (onDone) {
        Relude__Relude_IO.unsafeRunAsync((function (param) {
                if (param.TAG === /* Ok */0) {
                  return Curry._1(onDone, Jest.pass);
                } else {
                  return Curry._1(onDone, Jest.fail("Failed"));
                }
              }), Relude__Relude_IO.delayWithVoid(10));
        jest.advanceTimersByTime(10);
      }));

Jest.testAsync("IO withDelayBefore unsafeRunAsync", undefined, (function (onDone) {
        Relude__Relude_IO.unsafeRunAsync((function (param) {
                if (param.TAG === /* Ok */0) {
                  return Curry._1(onDone, Jest.pass);
                } else {
                  return Curry._1(onDone, Jest.fail("Failed"));
                }
              }), Relude__Relude_IO.withDelayBefore(10, Relude__Relude_IO.pure(0)));
        jest.advanceTimersByTime(10);
      }));

Jest.describe("IO debounce", (function (param) {
        Jest.Skip.testAsync("debounce", undefined, (function (onDone) {
                var timeIntervals = {
                  contents: {
                    hd: new Date().getTime(),
                    tl: /* [] */0
                  }
                };
                var areTimestampsSpacedCorrectly = function (x1, x2) {
                  return x2 - x1 >= 100;
                };
                var debouncedIO = Relude__Relude_IO.debounce(undefined, 100, (function (param) {
                        timeIntervals.contents = {
                          hd: new Date().getTime(),
                          tl: timeIntervals.contents
                        };
                        return Relude__Relude_IO.pure(undefined);
                      }));
                var checkNonRunIO = function (param) {
                  return Relude__Relude_IO.unsafeRunAsync((function (param) {
                                return Relude__Relude_Result.fold((function (param) {
                                              Curry._1(onDone, Jest.fail("IO should not have failed"));
                                            }), (function (param) {
                                              return Relude__Relude_Option.foldLazy((function (prim) {
                                                            
                                                          }), (function (param) {
                                                            Curry._1(onDone, Jest.fail("IO should not have been run"));
                                                          }), param);
                                            }), param);
                              }), param);
                };
                checkNonRunIO(Curry._1(debouncedIO, undefined));
                checkNonRunIO(Curry._1(debouncedIO, undefined));
                var partial_arg = Relude__Relude_IO.pure(undefined);
                checkNonRunIO(Relude__Relude_IO.flatMap((function (param) {
                            return Relude__Relude_Option.fold(partial_arg, debouncedIO, param);
                          }), Curry._1(debouncedIO, undefined)));
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        var xs = timeIntervals.contents;
                        var tmp;
                        var exit = 0;
                        if (xs) {
                          var match = xs.tl;
                          if (match) {
                            var match$1 = match.tl;
                            if (match$1) {
                              if (match$1.tl) {
                                exit = 1;
                              } else {
                                var x1 = match.hd;
                                tmp = areTimestampsSpacedCorrectly(match$1.hd, x1) && areTimestampsSpacedCorrectly(x1, xs.hd) ? Jest.pass : Jest.fail("debounced IO did not time executions correctly");
                              }
                            } else {
                              tmp = Jest.fail("debounced IO was executed too few times");
                            }
                          } else {
                            tmp = Jest.fail("debounced IO was executed too few times");
                          }
                        } else {
                          exit = 1;
                        }
                        if (exit === 1) {
                          tmp = Jest.fail("debounced IO was executed too many times. Was executed " + String(Curry._1(Relude__Relude_List.length, xs) - 1 | 0));
                        }
                        Curry._1(onDone, tmp);
                      }), Relude__Relude_IO.flatMap((function (param) {
                            return Relude__Relude_IO.delay(300);
                          }), Relude__Relude_IO.flatMap((function (param) {
                                return Relude__Relude_Globals.$great$great((function (prim) {
                                              
                                            }), debouncedIO, param);
                              }), Curry._1(debouncedIO, undefined))));
              }));
        Jest.Skip.testAsync("debounce immediate", undefined, (function (onDone) {
                var timeIntervals = {
                  contents: {
                    hd: new Date().getTime(),
                    tl: /* [] */0
                  }
                };
                var areTimestampsSpacedCorrectly = function (x1, x2) {
                  return x2 - x1 >= 100;
                };
                var debouncedIO = Relude__Relude_IO.debounce(true, 100, (function (param) {
                        timeIntervals.contents = {
                          hd: new Date().getTime(),
                          tl: timeIntervals.contents
                        };
                        return Relude__Relude_IO.pure(undefined);
                      }));
                Relude__Relude_IO.unsafeRunAsync((function (prim) {
                        
                      }), Curry._1(debouncedIO, undefined));
                Relude__Relude_IO.unsafeRunAsync((function (prim) {
                        
                      }), Curry._1(debouncedIO, undefined));
                var partial_arg = Relude__Relude_IO.pure(undefined);
                Relude__Relude_IO.unsafeRunAsync((function (prim) {
                        
                      }), Relude__Relude_IO.flatMap((function (param) {
                            return Relude__Relude_Option.fold(partial_arg, debouncedIO, param);
                          }), Curry._1(debouncedIO, undefined)));
                var partial_arg$1 = Relude__Relude_IO.pure(undefined);
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        var xs = timeIntervals.contents;
                        var tmp;
                        var exit = 0;
                        if (xs) {
                          var match = xs.tl;
                          if (match) {
                            var match$1 = match.tl;
                            if (match$1) {
                              var match$2 = match$1.tl;
                              if (match$2 && !match$2.tl) {
                                var x1 = match$1.hd;
                                var x2 = match.hd;
                                tmp = Relude__Relude_Float.approximatelyEqual(2.0, x1, match$2.hd) && areTimestampsSpacedCorrectly(x1, x2) && Relude__Relude_Float.approximatelyEqual(2.0, x2, xs.hd) ? Jest.pass : Jest.fail("debounced IO did not time executions correctly");
                              } else {
                                exit = 1;
                              }
                            } else {
                              tmp = Jest.fail("debounced IO was executions too few times");
                            }
                          } else {
                            tmp = Jest.fail("debounced IO was executions too few times");
                          }
                        } else {
                          exit = 1;
                        }
                        if (exit === 1) {
                          tmp = Jest.fail("debounced IO was executions too many times. Was executed " + String(Curry._1(Relude__Relude_List.length, xs) - 1 | 0));
                        }
                        Curry._1(onDone, tmp);
                      }), Relude__Relude_IO.flatMap((function (param) {
                            return Relude__Relude_IO.delay(300);
                          }), Relude__Relude_IO.flatMap((function (param) {
                                return Relude__Relude_Option.fold(partial_arg$1, debouncedIO, param);
                              }), Curry._1(debouncedIO, undefined))));
              }));
      }));

Jest.describe("IO throttle", (function (param) {
        Jest.Skip.testAsync("throttle", undefined, (function (onDone) {
                var timeIntervals = {
                  contents: {
                    hd: new Date().getTime(),
                    tl: /* [] */0
                  }
                };
                var throttledIO = Relude__Relude_IO.throttle(100, (function (param) {
                        timeIntervals.contents = {
                          hd: new Date().getTime(),
                          tl: timeIntervals.contents
                        };
                        return Relude__Relude_IO.pure(undefined);
                      }));
                Relude__Relude_IO.unsafeRunAsync((function (prim) {
                        
                      }), Curry._1(throttledIO, undefined));
                Relude__Relude_IO.unsafeRunAsync((function (prim) {
                        
                      }), Curry._1(throttledIO, undefined));
                Relude__Relude_IO.unsafeRunAsync((function (prim) {
                        
                      }), Relude__Relude_IO.flatMap((function (param) {
                            return Relude__Relude_Globals.$great$great((function (prim) {
                                          
                                        }), throttledIO, param);
                          }), Curry._1(throttledIO, undefined)));
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        var xs = timeIntervals.contents;
                        var tmp;
                        var exit = 0;
                        if (xs) {
                          var match = xs.tl;
                          if (match) {
                            var match$1 = match.tl;
                            if (match$1) {
                              if (match$1.tl) {
                                exit = 1;
                              } else {
                                var x1 = match.hd;
                                tmp = xs.hd - x1 >= 100 && Relude__Relude_Float.approximatelyEqual(2.0, x1, match$1.hd) ? Jest.pass : Jest.fail("throttled IO did not time executions correctly");
                              }
                            } else {
                              tmp = Jest.fail("throttled IO was executed too few times");
                            }
                          } else {
                            tmp = Jest.fail("throttled IO was executed too few times");
                          }
                        } else {
                          exit = 1;
                        }
                        if (exit === 1) {
                          tmp = Jest.fail("throttled IO was executed too many times. Was executed " + String(Curry._1(Relude__Relude_List.length, xs) - 1 | 0));
                        }
                        Curry._1(onDone, tmp);
                      }), Relude__Relude_IO.flatMap(throttledIO, Relude__Relude_IO.delay(300)));
              }));
        Jest.testAsync("all", undefined, (function (onDone) {
                var IOE = Relude__Relude_IO.WithError({});
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        Curry._1(onDone, assertion._0);
                      }), Relude__Relude_IO.bimap((function (a) {
                            return Jest.Expect.toEqual({
                                        hd: 1,
                                        tl: {
                                          hd: 2,
                                          tl: {
                                            hd: 3,
                                            tl: /* [] */0
                                          }
                                        }
                                      }, Jest.Expect.expect(a));
                          }), (function (param) {
                            return Jest.fail("Failed");
                          }), Curry._1(IOE.all, {
                              hd: Relude__Relude_IO.pure(1),
                              tl: {
                                hd: Relude__Relude_IO.pure(2),
                                tl: {
                                  hd: Relude__Relude_IO.pure(3),
                                  tl: /* [] */0
                                }
                              }
                            })));
              }));
      }));

Jest.describe("IO parallel", (function (param) {
        Jest.testAsync("parallel", undefined, (function (onDone) {
                var IOE = Relude__Relude_IO.WithError({});
                var a = {
                  contents: false
                };
                var b = {
                  contents: false
                };
                var c = {
                  contents: false
                };
                var ioA = Relude__Relude_IO.map((function (t) {
                        a.contents = false;
                        return [
                                t,
                                [
                                  a.contents,
                                  b.contents,
                                  c.contents
                                ]
                              ];
                      }), Relude__Relude_IO.withDelay(100, Relude__Relude_IO.suspend(function (param) {
                              a.contents = true;
                              return [
                                      a.contents,
                                      b.contents,
                                      c.contents
                                    ];
                            })));
                var ioB = Relude__Relude_IO.map((function (t) {
                        b.contents = false;
                        return [
                                t,
                                [
                                  a.contents,
                                  b.contents,
                                  c.contents
                                ]
                              ];
                      }), Relude__Relude_IO.withDelay(100, Relude__Relude_IO.suspend(function (param) {
                              b.contents = true;
                              return [
                                      a.contents,
                                      b.contents,
                                      c.contents
                                    ];
                            })));
                var ioC = Relude__Relude_IO.map((function (t) {
                        c.contents = false;
                        return [
                                t,
                                [
                                  a.contents,
                                  b.contents,
                                  c.contents
                                ]
                              ];
                      }), Relude__Relude_IO.withDelay(100, Relude__Relude_IO.suspend(function (param) {
                              c.contents = true;
                              return [
                                      a.contents,
                                      b.contents,
                                      c.contents
                                    ];
                            })));
                var a0_0 = a.contents;
                var a0_1 = b.contents;
                var a0_2 = c.contents;
                var a0 = [
                  a0_0,
                  a0_1,
                  a0_2
                ];
                var ioAll = Curry._2(IOE.mapTuple3, (function (param, param$1, param$2) {
                        return Jest.Expect.toEqual([
                                    [
                                      false,
                                      false,
                                      false
                                    ],
                                    [
                                      true,
                                      false,
                                      false
                                    ],
                                    [
                                      false,
                                      true,
                                      true
                                    ],
                                    [
                                      true,
                                      true,
                                      false
                                    ],
                                    [
                                      false,
                                      false,
                                      true
                                    ],
                                    [
                                      true,
                                      true,
                                      true
                                    ],
                                    [
                                      false,
                                      false,
                                      false
                                    ]
                                  ], Jest.Expect.expect([
                                        a0,
                                        param[0],
                                        param[1],
                                        param$1[0],
                                        param$1[1],
                                        param$2[0],
                                        param$2[1]
                                      ]));
                      }), [
                      ioA,
                      ioB,
                      ioC
                    ]);
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, assertion._0);
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), ioAll);
                jest.advanceTimersByTime(50);
                jest.advanceTimersByTime(100);
              }));
      }));

function eGet(e) {
  return {
          TAG: /* EGet */0,
          _0: e
        };
}

function eParse(e) {
  return {
          TAG: /* EParse */1,
          _0: e
        };
}

function ePrint(e) {
  return {
          TAG: /* EPrint */2,
          _0: e
        };
}

var AppErrorType = {};

var IOAppError = Relude__Relude_IO.WithError(AppErrorType);

var $great$great$eq = IOAppError.Infix.$great$great$eq;

var $great$eq$great = IOAppError.Infix.$great$eq$great;

var getData = Relude__Relude_IO.suspendIO(function (param) {
      return Relude__Relude_IO.pure("data");
    });

function parseData(data) {
  var l = Relude__Relude_String.length(data);
  if (l > 0) {
    return Relude__Relude_IO.pure(l);
  } else {
    return Relude__Relude_IO.$$throw(/* ParseError */{
                _0: "Bad data: " + data
              });
  }
}

function printNumber(_num) {
  return Relude__Relude_IO.unit;
}

Jest.describe("IO realish examples", (function (param) {
        Jest.testAsync("example >>=", undefined, (function (onDone) {
                var partial_arg = Curry._1(Relude__Relude_IO.mapError, eParse);
                var partial_arg$1 = Curry._1(Relude__Relude_IO.mapError, ePrint);
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, assertion._0);
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Curry._2($great$great$eq, Curry._2($great$great$eq, Curry._2($great$great$eq, Curry._2(Relude__Relude_IO.mapError, eGet, getData), (function (param) {
                                    return Relude__Relude_Globals.$great$great(parseData, partial_arg, param);
                                  })), (function (param) {
                                return Relude__Relude_Globals.$great$great(printNumber, partial_arg$1, param);
                              })), (function (param) {
                            return Relude__Relude_IO.pure(Jest.pass);
                          })));
              }));
        Jest.testAsync("example >=>", undefined, (function (onDone) {
                var partial_arg = Curry._1(Relude__Relude_IO.mapError, eParse);
                var partial_arg$1 = Curry._1(Relude__Relude_IO.mapError, ePrint);
                var getIO = Curry._2($great$eq$great, Curry._2($great$eq$great, Curry._2($great$eq$great, (function (param) {
                                return Curry._2(Relude__Relude_IO.mapError, eGet, getData);
                              }), (function (param) {
                                return Relude__Relude_Globals.$great$great(parseData, partial_arg, param);
                              })), (function (param) {
                            return Relude__Relude_Globals.$great$great(printNumber, partial_arg$1, param);
                          })), (function (param) {
                        return Relude__Relude_IO.pure(Jest.pass);
                      }));
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, assertion._0);
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Curry._1(getIO, undefined));
              }));
        Jest.testAsync("example flatMap", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG === /* Ok */0) {
                          return Curry._1(onDone, Jest.pass);
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Relude__Relude_IO.flatMap((function (num) {
                            return Curry._2(Relude__Relude_IO.mapError, (function (e) {
                                          return {
                                                  TAG: /* EPrint */2,
                                                  _0: e
                                                };
                                        }), Relude__Relude_IO.unit);
                          }), Relude__Relude_IO.flatMap((function (str) {
                                return Curry._2(Relude__Relude_IO.mapError, (function (e) {
                                              return {
                                                      TAG: /* EParse */1,
                                                      _0: e
                                                    };
                                            }), parseData(str));
                              }), Curry._2(Relude__Relude_IO.mapError, (function (e) {
                                    return {
                                            TAG: /* EGet */0,
                                            _0: e
                                          };
                                  }), getData))));
              }));
      }));

var testFilePath = Melange__FS.testFilePath("Eff_test.txt");

var JsExnType = {};

var IOJsExn = Relude__Relude_IO.WithError(JsExnType);

var $great$great$eq$1 = IOJsExn.Infix.$great$great$eq;

var $great$eq$great$1 = IOJsExn.Infix.$great$eq$great;

Jest.describe("IO FS examples", (function (param) {
        beforeAll(function () {
              return Relude__Relude_IO.unsafeRunAsync((function (prim) {
                            
                          }), Melange__FS.IO.writeFileSync(testFilePath, ""));
            });
        Jest.testAsync("read and writeFileSync", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, assertion._0);
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Curry._2($great$great$eq$1, Curry._2($great$great$eq$1, Melange__FS.IO.writeFileSync(testFilePath, "IO Eff test"), (function (param) {
                                return Melange__FS.IO.readFileSync(testFilePath);
                              })), (function (content) {
                            return Relude__Relude_IO.pure(Jest.Expect.toEqual("IO Eff test", Jest.Expect.expect(content)));
                          })));
              }));
        Jest.testAsync("readFile", undefined, (function (onDone) {
                Relude__Relude_IO.unsafeRunAsync((function (assertion) {
                        if (assertion.TAG === /* Ok */0) {
                          return Curry._1(onDone, assertion._0);
                        } else {
                          return Curry._1(onDone, Jest.fail("Failed"));
                        }
                      }), Curry._2($great$great$eq$1, Curry._2($great$great$eq$1, Curry._2($great$great$eq$1, Melange__FS.IO.writeFile(testFilePath, "IO Aff test"), (function (param) {
                                    return Melange__FS.IO.readFile(testFilePath);
                                  })), (function (content) {
                                return Relude__Relude_IO.fromOption((function (param) {
                                              return Relude__Relude_Js_Exn.make("Failed to get non-empty file content");
                                            }), Relude__Relude_String.toNonWhitespace(content));
                              })), (function (content) {
                            return Relude__Relude_IO.pure(Jest.Expect.toEqual("IO Aff test", Jest.Expect.expect(content)));
                          })));
              }));
      }));

exports.throwJSError = throwJSError;
exports.eGet = eGet;
exports.eParse = eParse;
exports.ePrint = ePrint;
exports.AppErrorType = AppErrorType;
exports.IOAppError = IOAppError;
exports.getData = getData;
exports.parseData = parseData;
exports.printNumber = printNumber;
exports.testFilePath = testFilePath;
exports.JsExnType = JsExnType;
exports.IOJsExn = IOJsExn;
exports.$great$great$eq = $great$great$eq$1;
exports.$great$eq$great = $great$eq$great$1;
/*  Not a pure module */
