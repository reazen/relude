// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Js_int = require("melange.belt/./js_int.js");
var Stdlib = require("melange/./stdlib.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");

Jest.describe("Int", (function (param) {
        Jest.test("toFloat", (function (param) {
                return Jest.Expect.toEqual(2.0, Jest.Expect.expect(Relude__Relude_Int.toFloat(2)));
              }));
        Jest.test("toFloat (negative)", (function (param) {
                return Jest.Expect.toEqual(-20.0, Jest.Expect.expect(Relude__Relude_Int.toFloat(-20)));
              }));
        Jest.test("fromFloat", (function (param) {
                return Jest.Expect.toEqual(4, Jest.Expect.expect(Relude__Relude_Int.fromFloat(4.9999)));
              }));
        Jest.test("fromFloat (negative)", (function (param) {
                return Jest.Expect.toEqual(-4, Jest.Expect.expect(Relude__Relude_Int.fromFloat(-4.9999)));
              }));
        Jest.test("fromFloat (infinity)", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Int.fromFloat(Stdlib.infinity)));
              }));
        Jest.test("fromFloat (nan)", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Int.fromFloat(Number.NaN)));
              }));
        Jest.test("zero", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_Int.zero));
              }));
        Jest.test("one", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Int.one));
              }));
        Jest.test("add", (function (param) {
                return Jest.Expect.toEqual(7, Jest.Expect.expect(Relude__Relude_Int.add(3, 4)));
              }));
        Jest.test("subtract", (function (param) {
                return Jest.Expect.toEqual(-1, Jest.Expect.expect(Relude__Relude_Int.subtract(3, 4)));
              }));
        Jest.test("multiply", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_Int.multiply(3, 4)));
              }));
        Jest.test("divide", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Int.divide(13, 4)));
              }));
        Jest.test("modulo", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_Int.modulo(13, 4)));
              }));
        Jest.test("divideWithModulo", (function (param) {
                return Jest.Expect.toEqual([
                            3,
                            1
                          ], Jest.Expect.expect(Relude__Relude_Int.divideWithModulo(13, 4)));
              }));
        Jest.test("divideAsFloat", (function (param) {
                return Jest.Expect.toEqual(13.0 / 4.0, Jest.Expect.expect(Relude__Relude_Int.divideAsFloat(13, 4)));
              }));
        Jest.test("degree", (function (param) {
                return Jest.Expect.toEqual(42, Jest.Expect.expect(Relude__Relude_Int.degree(42)));
              }));
        Jest.test("top", (function (param) {
                return Jest.Expect.toEqual(Js_int.max, Jest.Expect.expect(Relude__Relude_Int.top));
              }));
        Jest.test("bottom", (function (param) {
                return Jest.Expect.toEqual(Js_int.min, Jest.Expect.expect(Relude__Relude_Int.bottom));
              }));
        Jest.test("rangeAsList for valid range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_Int.rangeAsList(0, 5)));
              }));
        Jest.test("rangeAsList for invalid range", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_Int.rangeAsList(5, 0)));
              }));
        Jest.test("rangeAsArray for valid range", (function (param) {
                return Jest.Expect.toEqual([
                            0,
                            1,
                            2,
                            3,
                            4
                          ], Jest.Expect.expect(Relude__Relude_Int.rangeAsArray(0, 5)));
              }));
        Jest.test("rangeAsArray for invalid range", (function (param) {
                return Jest.Expect.toEqual([], Jest.Expect.expect(Relude__Relude_Int.rangeAsArray(5, 0)));
              }));
        Jest.test("add", (function (param) {
                return Jest.Expect.toEqual(9, Jest.Expect.expect(Relude__Relude_Int.Semiring.add(4, 5)));
              }));
        Jest.test("multiply", (function (param) {
                return Jest.Expect.toEqual(20, Jest.Expect.expect(Relude__Relude_Int.Semiring.multiply(4, 5)));
              }));
        Jest.test("subtract", (function (param) {
                return Jest.Expect.toEqual(-1, Jest.Expect.expect(Relude__Relude_Int.Ring.subtract(4, 5)));
              }));
        Jest.test("fromString success", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Relude__Relude_Int.fromString("3")));
              }));
        Jest.test("fromString failure on empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Int.fromString("")));
              }));
        Jest.test("fromString failure on mixed", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Int.fromString("3a")));
              }));
        Jest.test("fromString failure on float", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Int.fromString("3.14")));
              }));
        Jest.test("fromString failure on alpha", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_Int.fromString("abc")));
              }));
        Jest.test("toString", (function (param) {
                return Jest.Expect.toEqual("1", Jest.Expect.expect(Relude__Relude_Int.toString(1)));
              }));
      }));

/*  Not a pure module */
