// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_HMap = require("relude/./Relude_HMap.js");
var Relude__Relude_String = require("relude/./Relude_String.js");

var HMapS = Relude__Relude_HMap.WithKeyMeta({});

Jest.describe("HMap", (function (param) {
        Jest.test("empty has size 0", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Relude__Relude_HMap.size(Relude__Relude_HMap.empty)));
              }));
        Jest.test("singleton", (function (param) {
                var intKey = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var map = Relude__Relude_HMap.singleton(intKey, 42);
                return Jest.Expect.toEqual([
                            42,
                            1
                          ], Jest.Expect.expect([
                                Relude__Relude_HMap.find(intKey, map),
                                Relude__Relude_HMap.size(map)
                              ]));
              }));
        Jest.test("add, hasKey, find, size", (function (param) {
                var intKey = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var stringKey = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var map = Relude__Relude_HMap.add(stringKey, "hi", Relude__Relude_HMap.add(intKey, 5, Relude__Relude_HMap.empty));
                return Jest.Expect.toEqual([
                            true,
                            5,
                            true,
                            "hi",
                            2
                          ], Jest.Expect.expect([
                                Relude__Relude_HMap.hasKey(intKey, map),
                                Relude__Relude_HMap.find(intKey, map),
                                Relude__Relude_HMap.hasKey(stringKey, map),
                                Relude__Relude_HMap.find(stringKey, map),
                                Relude__Relude_HMap.size(map)
                              ]));
              }));
        Jest.test("find success", (function (param) {
                var intKey = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var map = Relude__Relude_HMap.add(intKey, 5, Relude__Relude_HMap.empty);
                return Jest.Expect.toEqual(5, Jest.Expect.expect(Relude__Relude_HMap.find(intKey, map)));
              }));
        Jest.test("find failure", (function (param) {
                var intKey = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var stringKey = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var map = Relude__Relude_HMap.add(intKey, 5, Relude__Relude_HMap.empty);
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_HMap.find(stringKey, map)));
              }));
        Jest.test("remove", (function (param) {
                var intKey1 = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var intKey2 = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var intKey3 = Curry._1(Relude__Relude_HMap.WithKeyMetaUnit.Key.create, undefined);
                var map123 = Relude__Relude_HMap.add(intKey3, 3, Relude__Relude_HMap.add(intKey2, 2, Relude__Relude_HMap.add(intKey1, 1, Relude__Relude_HMap.empty)));
                var map13 = Relude__Relude_HMap.remove(intKey2, map123);
                var map1 = Relude__Relude_HMap.remove(intKey3, map13);
                var map = Relude__Relude_HMap.remove(intKey1, map1);
                return Jest.Expect.toEqual([
                            3,
                            1,
                            2,
                            3,
                            2,
                            1,
                            undefined,
                            3,
                            1,
                            1,
                            undefined,
                            undefined,
                            0,
                            undefined,
                            undefined,
                            undefined
                          ], Jest.Expect.expect([
                                Relude__Relude_HMap.size(map123),
                                Relude__Relude_HMap.find(intKey1, map123),
                                Relude__Relude_HMap.find(intKey2, map123),
                                Relude__Relude_HMap.find(intKey3, map123),
                                Relude__Relude_HMap.size(map13),
                                Relude__Relude_HMap.find(intKey1, map13),
                                Relude__Relude_HMap.find(intKey2, map13),
                                Relude__Relude_HMap.find(intKey3, map13),
                                Relude__Relude_HMap.size(map1),
                                Relude__Relude_HMap.find(intKey1, map1),
                                Relude__Relude_HMap.find(intKey2, map1),
                                Relude__Relude_HMap.find(intKey3, map1),
                                Relude__Relude_HMap.size(map),
                                Relude__Relude_HMap.find(intKey1, map),
                                Relude__Relude_HMap.find(intKey2, map),
                                Relude__Relude_HMap.find(intKey3, map)
                              ]));
              }));
        Jest.test("fold", (function (param) {
                var intKey = Curry._1(HMapS.Key.create, [
                      "key1",
                      (function (prim) {
                          return String(prim);
                        })
                    ]);
                var stringKey = Curry._1(HMapS.Key.create, [
                      "key2",
                      (function (a) {
                          return a;
                        })
                    ]);
                var floatKey = Curry._1(HMapS.Key.create, [
                      "key3",
                      (function (prim) {
                          return prim.toString();
                        })
                    ]);
                var map = Curry._3(HMapS.add, floatKey, 42.3, Curry._3(HMapS.add, stringKey, "hi", Curry._3(HMapS.add, intKey, 5, HMapS.empty)));
                var value = Curry._3(HMapS.fold, (function (param, acc) {
                        var match = Curry._1(HMapS.Key.keyMeta, param._0);
                        return {
                                hd: match[0],
                                tl: {
                                  hd: Curry._1(match[1], param._1),
                                  tl: acc
                                }
                              };
                      }), /* [] */0, map);
                return Jest.Expect.toEqual({
                            hd: "key3",
                            tl: {
                              hd: "42.3",
                              tl: {
                                hd: "key2",
                                tl: {
                                  hd: "hi",
                                  tl: {
                                    hd: "key1",
                                    tl: {
                                      hd: "5",
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(value));
              }));
        Jest.test("forEach", (function (param) {
                var intKey = Curry._1(HMapS.Key.create, [
                      "key1",
                      (function (prim) {
                          return String(prim);
                        })
                    ]);
                var stringKey = Curry._1(HMapS.Key.create, [
                      "key2",
                      (function (a) {
                          return a;
                        })
                    ]);
                var floatKey = Curry._1(HMapS.Key.create, [
                      "key3",
                      (function (prim) {
                          return prim.toString();
                        })
                    ]);
                var map = Curry._3(HMapS.add, floatKey, 42.3, Curry._3(HMapS.add, stringKey, "hi", Curry._3(HMapS.add, intKey, 5, HMapS.empty)));
                var array = [];
                Curry._2(HMapS.forEach, (function (param) {
                        var match = Curry._1(HMapS.Key.keyMeta, param._0);
                        array.unshift(Curry._1(match[1], param._1));
                        array.unshift(match[0]);
                      }), map);
                return Jest.Expect.toEqual([
                            "key3",
                            "42.3",
                            "key2",
                            "hi",
                            "key1",
                            "5"
                          ], Jest.Expect.expect(array));
              }));
        Jest.test("all", (function (param) {
                var intKey = Curry._1(HMapS.Key.create, [
                      "key1",
                      (function (prim) {
                          return String(prim);
                        })
                    ]);
                var stringKey = Curry._1(HMapS.Key.create, [
                      "key2",
                      (function (a) {
                          return a;
                        })
                    ]);
                var floatKey = Curry._1(HMapS.Key.create, [
                      "key3",
                      (function (prim) {
                          return prim.toString();
                        })
                    ]);
                var map = Curry._3(HMapS.add, floatKey, 42.3, Curry._3(HMapS.add, stringKey, "hi", Curry._3(HMapS.add, intKey, 5, HMapS.empty)));
                var value = Curry._2(HMapS.all, (function (param) {
                        var match = Curry._1(HMapS.Key.keyMeta, param._0);
                        return Relude__Relude_String.contains("key", match[0]);
                      }), map);
                return Jest.Expect.toEqual(true, Jest.Expect.expect(value));
              }));
        Jest.test("any", (function (param) {
                var intKey = Curry._1(HMapS.Key.create, [
                      "key1",
                      (function (prim) {
                          return String(prim);
                        })
                    ]);
                var stringKey = Curry._1(HMapS.Key.create, [
                      "key2",
                      (function (a) {
                          return a;
                        })
                    ]);
                var floatKey = Curry._1(HMapS.Key.create, [
                      "key3",
                      (function (prim) {
                          return prim.toString();
                        })
                    ]);
                var map = Curry._3(HMapS.add, floatKey, 42.3, Curry._3(HMapS.add, stringKey, "hi", Curry._3(HMapS.add, intKey, 5, HMapS.empty)));
                var value = Curry._2(HMapS.any, (function (param) {
                        var match = Curry._1(HMapS.Key.keyMeta, param._0);
                        return Relude__Relude_String.contains("key2", match[0]);
                      }), map);
                return Jest.Expect.toEqual(true, Jest.Expect.expect(value));
              }));
        Jest.test("filter", (function (param) {
                var intKey = Curry._1(HMapS.Key.create, [
                      "key1",
                      (function (prim) {
                          return String(prim);
                        })
                    ]);
                var stringKey = Curry._1(HMapS.Key.create, [
                      "key2",
                      (function (a) {
                          return a;
                        })
                    ]);
                var floatKey = Curry._1(HMapS.Key.create, [
                      "key3",
                      (function (prim) {
                          return prim.toString();
                        })
                    ]);
                var map = Curry._3(HMapS.add, floatKey, 42.3, Curry._3(HMapS.add, stringKey, "hi", Curry._3(HMapS.add, intKey, 5, HMapS.empty)));
                var map2 = Curry._2(HMapS.filter, (function (param) {
                        var match = Curry._1(HMapS.Key.keyMeta, param._0);
                        return match[0] !== "key2";
                      }), map);
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._1(HMapS.size, map2)));
              }));
      }));

exports.HMapS = HMapS;
/* HMapS Not a pure module */
