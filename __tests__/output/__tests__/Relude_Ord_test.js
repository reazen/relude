// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Ord = require("relude/./Relude_Ord.js");
var Relude__Relude_List = require("relude/./Relude_List.js");
var Relude__Relude_String = require("relude/./Relude_String.js");

Jest.describe("Ord", (function (param) {
        Jest.test("by", (function (param) {
                var userCompare = function (param, param$1) {
                  return Relude__Relude_Ord.by((function (user) {
                                return user.name;
                              }), Relude__Relude_String.compare, param, param$1);
                };
                var user1 = {
                  id: "2",
                  name: "Andy",
                  age: 99
                };
                var user2 = {
                  id: "3",
                  name: "Bob",
                  age: 99
                };
                var user3 = {
                  id: "1",
                  name: "Clyde",
                  age: 99
                };
                return Jest.Expect.toEqual([
                            "equal_to",
                            "less_than",
                            "less_than",
                            "greater_than",
                            "equal_to",
                            "less_than",
                            "greater_than",
                            "greater_than",
                            "equal_to"
                          ], Jest.Expect.expect([
                                userCompare(user1, user1),
                                userCompare(user1, user2),
                                userCompare(user1, user3),
                                userCompare(user2, user1),
                                userCompare(user2, user2),
                                userCompare(user2, user3),
                                userCompare(user3, user1),
                                userCompare(user3, user2),
                                userCompare(user3, user3)
                              ]));
              }));
        Jest.testAll("reverse", {
              hd: [
                {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 3,
                      tl: /* [] */0
                    }
                  }
                },
                {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 3,
                      tl: /* [] */0
                    }
                  }
                },
                {
                  hd: 3,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              ],
              tl: {
                hd: [
                  {
                    hd: 3,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  },
                  {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    }
                  },
                  {
                    hd: 3,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                ],
                tl: {
                  hd: [
                    {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    },
                    {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 3,
                          tl: /* [] */0
                        }
                      }
                    },
                    {
                      hd: 3,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  ],
                  tl: {
                    hd: [
                      {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      },
                      {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      },
                      {
                        hd: 1,
                        tl: {
                          hd: 1,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        }
                      }
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }, (function (param) {
                var input = param[0];
                var compareReverse = function (param, param$1) {
                  return Relude__Relude_Ord.reverse(Relude__Relude_Int.compare, param, param$1);
                };
                var actualNormal = Relude__Relude_List.sortBy(Relude__Relude_Int.compare, input);
                var actualReverse = Relude__Relude_List.sortBy(compareReverse, input);
                return Jest.Expect.toEqual([
                            param[1],
                            param[2]
                          ], Jest.Expect.expect([
                                actualNormal,
                                actualReverse
                              ]));
              }));
        Jest.testAll("compareAsIntBy", {
              hd: [
                "a",
                "a",
                0
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  -1
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    1
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.compareAsIntBy(Relude__Relude_String.compare, param[0], param[1])));
              }));
        Jest.testAll("compareAsIntBy", {
              hd: [
                "a",
                "a",
                0
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  -1
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    1
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.compareAsInt(Relude__Relude_String.Ord, param[0], param[1])));
              }));
        Jest.testAll("minBy", {
              hd: [
                "a",
                "a",
                "a"
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  "a"
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    "a"
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.minBy(Relude__Relude_String.compare, param[0], param[1])));
              }));
        Jest.testAll("min", {
              hd: [
                "a",
                "a",
                "a"
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  "a"
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    "a"
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.min(Relude__Relude_String.Ord, param[0], param[1])));
              }));
        Jest.testAll("maxBy", {
              hd: [
                "a",
                "a",
                "a"
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  "b"
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    "b"
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.maxBy(Relude__Relude_String.compare, param[0], param[1])));
              }));
        Jest.testAll("max", {
              hd: [
                "a",
                "a",
                "a"
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  "b"
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    "b"
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.max(Relude__Relude_String.Ord, param[0], param[1])));
              }));
        Jest.testAll("lessThanBy", {
              hd: [
                "a",
                "a",
                false
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  true
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    false
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.lessThanBy(Relude__Relude_String.compare, param[0], param[1])));
              }));
        Jest.testAll("lessThan", {
              hd: [
                "a",
                "a",
                false
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  true
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    false
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.lessThan(Relude__Relude_String.Ord, param[0], param[1])));
              }));
        Jest.testAll("lessThanOrEqBy", {
              hd: [
                "a",
                "a",
                true
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  true
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    false
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.lessThanOrEqBy(Relude__Relude_String.compare, param[0], param[1])));
              }));
        Jest.testAll("lessThanOrEq", {
              hd: [
                "a",
                "a",
                true
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  true
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    false
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.lessThanOrEq(Relude__Relude_String.Ord, param[0], param[1])));
              }));
        Jest.testAll("greaterThanBy", {
              hd: [
                "a",
                "a",
                false
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  false
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    true
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.greaterThanBy(Relude__Relude_String.compare, param[0], param[1])));
              }));
        Jest.testAll("greaterThan", {
              hd: [
                "a",
                "a",
                false
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  false
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    true
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.greaterThan(Relude__Relude_String.Ord, param[0], param[1])));
              }));
        Jest.testAll("greaterThanOrEqBy", {
              hd: [
                "a",
                "a",
                true
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  false
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    true
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.greaterThanOrEqBy(Relude__Relude_String.compare, param[0], param[1])));
              }));
        Jest.testAll("greaterThanOrEq", {
              hd: [
                "a",
                "a",
                true
              ],
              tl: {
                hd: [
                  "a",
                  "b",
                  false
                ],
                tl: {
                  hd: [
                    "b",
                    "a",
                    true
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[2], Jest.Expect.expect(Relude__Relude_Ord.greaterThanOrEq(Relude__Relude_String.Ord, param[0], param[1])));
              }));
        Jest.testAll("clampBy", {
              hd: [
                "a",
                "b",
                "d",
                "b"
              ],
              tl: {
                hd: [
                  "b",
                  "b",
                  "d",
                  "b"
                ],
                tl: {
                  hd: [
                    "c",
                    "b",
                    "d",
                    "c"
                  ],
                  tl: {
                    hd: [
                      "d",
                      "b",
                      "d",
                      "d"
                    ],
                    tl: {
                      hd: [
                        "e",
                        "b",
                        "d",
                        "d"
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[3], Jest.Expect.expect(Relude__Relude_Ord.clampBy(Relude__Relude_String.compare, param[1], param[2], param[0])));
              }));
        Jest.testAll("clamp", {
              hd: [
                "a",
                "b",
                "d",
                "b"
              ],
              tl: {
                hd: [
                  "b",
                  "b",
                  "d",
                  "b"
                ],
                tl: {
                  hd: [
                    "c",
                    "b",
                    "d",
                    "c"
                  ],
                  tl: {
                    hd: [
                      "d",
                      "b",
                      "d",
                      "d"
                    ],
                    tl: {
                      hd: [
                        "e",
                        "b",
                        "d",
                        "d"
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[3], Jest.Expect.expect(Relude__Relude_Ord.clamp(Relude__Relude_String.Ord, param[1], param[2], param[0])));
              }));
        Jest.testAll("betweenBy", {
              hd: [
                "a",
                "b",
                "d",
                false
              ],
              tl: {
                hd: [
                  "b",
                  "b",
                  "d",
                  true
                ],
                tl: {
                  hd: [
                    "c",
                    "b",
                    "d",
                    true
                  ],
                  tl: {
                    hd: [
                      "d",
                      "b",
                      "d",
                      true
                    ],
                    tl: {
                      hd: [
                        "e",
                        "b",
                        "d",
                        false
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[3], Jest.Expect.expect(Relude__Relude_Ord.betweenBy(Relude__Relude_String.compare, param[1], param[2], param[0])));
              }));
        Jest.testAll("between", {
              hd: [
                "a",
                "b",
                "d",
                false
              ],
              tl: {
                hd: [
                  "b",
                  "b",
                  "d",
                  true
                ],
                tl: {
                  hd: [
                    "c",
                    "b",
                    "d",
                    true
                  ],
                  tl: {
                    hd: [
                      "d",
                      "b",
                      "d",
                      true
                    ],
                    tl: {
                      hd: [
                        "e",
                        "b",
                        "d",
                        false
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[3], Jest.Expect.expect(Relude__Relude_Ord.between(Relude__Relude_String.Ord, param[1], param[2], param[0])));
              }));
        Jest.testAll("abs", {
              hd: [
                -2,
                2
              ],
              tl: {
                hd: [
                  -1,
                  1
                ],
                tl: {
                  hd: [
                    0,
                    0
                  ],
                  tl: {
                    hd: [
                      1,
                      1
                    ],
                    tl: {
                      hd: [
                        2,
                        2
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ord.abs(Relude__Relude_Int.Ord, Relude__Relude_Int.Ring, param[0])));
              }));
        Jest.testAll("signum", {
              hd: [
                -2,
                -1
              ],
              tl: {
                hd: [
                  -1,
                  -1
                ],
                tl: {
                  hd: [
                    0,
                    1
                  ],
                  tl: {
                    hd: [
                      1,
                      1
                    ],
                    tl: {
                      hd: [
                        2,
                        1
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_Ord.signum(Relude__Relude_Int.Ord, Relude__Relude_Int.Ring, param[0])));
              }));
      }));

/*  Not a pure module */
