// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_Set = require("relude/./Relude_Set.js");

var IntSet = Relude__Relude_Set.WithOrd(Relude__Relude_Int.Ord);

Jest.describe("Set", (function (param) {
        Jest.test("length of empty set", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._1(IntSet.length, IntSet.empty)));
              }));
        Jest.test("length of non-empty set", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Curry._1(IntSet.length, Curry._1(IntSet.singleton, 1))));
              }));
        Jest.test("isEmpty (empty set)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._1(IntSet.isEmpty, IntSet.empty)));
              }));
        Jest.test("isEmpty (nonempty set)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._1(IntSet.isEmpty, Curry._1(IntSet.singleton, 1))));
              }));
        Jest.test("fromArray (empty)", (function (param) {
                return Jest.Expect.toEqual(IntSet.empty, Jest.Expect.expect(Curry._1(IntSet.fromArray, [])));
              }));
        Jest.test("fromArray (nonEmpty, unique)", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._1(IntSet.length, Curry._1(IntSet.fromArray, [
                                        1,
                                        2,
                                        3
                                      ]))));
              }));
        Jest.test("fromArray (nonEmpty, removes duplicates)", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._1(IntSet.length, Curry._1(IntSet.fromArray, [
                                        1,
                                        2,
                                        1
                                      ]))));
              }));
        Jest.test("fromList (empty)", (function (param) {
                return Jest.Expect.toEqual(IntSet.empty, Jest.Expect.expect(Curry._1(IntSet.fromList, /* [] */0)));
              }));
        Jest.test("fromList (nonEmpty)", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._1(IntSet.length, Curry._1(IntSet.fromList, {
                                        hd: 4,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 4,
                                            tl: {
                                              hd: 4,
                                              tl: {
                                                hd: 3,
                                                tl: /* [] */0
                                              }
                                            }
                                          }
                                        }
                                      }))));
              }));
        Jest.test("contains (false)", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(IntSet.contains, 5, Curry._1(IntSet.fromList, {
                                        hd: 1,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 3,
                                            tl: {
                                              hd: 4,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }))));
              }));
        Jest.test("contains (true)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(IntSet.contains, 3, Curry._1(IntSet.fromList, {
                                        hd: 1,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 3,
                                            tl: {
                                              hd: 4,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }))));
              }));
        Jest.test("add (new unique value)", (function (param) {
                return Jest.Expect.toEqual(Curry._1(IntSet.fromList, {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 3,
                                    tl: /* [] */0
                                  }
                                }
                              }), Jest.Expect.expect(Curry._2(IntSet.add, 3, Curry._1(IntSet.fromList, {
                                        hd: 1,
                                        tl: {
                                          hd: 2,
                                          tl: /* [] */0
                                        }
                                      }))));
              }));
        Jest.test("add (duplicate value)", (function (param) {
                return Jest.Expect.toEqual(Curry._1(IntSet.fromList, {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: /* [] */0
                                }
                              }), Jest.Expect.expect(Curry._2(IntSet.add, 1, Curry._1(IntSet.fromList, {
                                        hd: 1,
                                        tl: {
                                          hd: 2,
                                          tl: /* [] */0
                                        }
                                      }))));
              }));
        Jest.test("mergeMany (empty array to merge)", (function (param) {
                return Jest.Expect.toEqual(Curry._1(IntSet.fromList, {
                                hd: 1,
                                tl: /* [] */0
                              }), Jest.Expect.expect(Curry._2(IntSet.mergeMany, [], Curry._1(IntSet.singleton, 1))));
              }));
        Jest.test("mergeMany (all unique)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(IntSet.eq, Curry._1(IntSet.fromList, {
                                        hd: 1,
                                        tl: {
                                          hd: 2,
                                          tl: {
                                            hd: 3,
                                            tl: /* [] */0
                                          }
                                        }
                                      }), Curry._2(IntSet.mergeMany, [
                                        2,
                                        3
                                      ], Curry._1(IntSet.singleton, 1)))));
              }));
        Jest.test("mergeMany (some duplicates)", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(IntSet.eq, Curry._1(IntSet.fromList, {
                                        hd: 1,
                                        tl: {
                                          hd: 2,
                                          tl: {
                                            hd: 3,
                                            tl: {
                                              hd: 4,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }), Curry._2(IntSet.mergeMany, [
                                        2,
                                        3,
                                        4
                                      ], Curry._1(IntSet.fromList, {
                                            hd: 1,
                                            tl: {
                                              hd: 2,
                                              tl: {
                                                hd: 3,
                                                tl: /* [] */0
                                              }
                                            }
                                          })))));
              }));
      }));

exports.IntSet = IntSet;
/* IntSet Not a pure module */
