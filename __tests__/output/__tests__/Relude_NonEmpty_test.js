// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_List = require("relude/./Relude_List.js");
var Relude__Relude_NonEmpty = require("relude/./Relude_NonEmpty.js");
var Relude__Relude_Option_Instances = require("relude/option/Relude_Option_Instances.js");

Jest.describe("NonEmpty.List", (function (param) {
        Jest.test("make", (function (param) {
                return Jest.Expect.toEqual(/* NonEmpty */{
                            _0: 1,
                            _1: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_NonEmpty.List.make(1, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.testAll("fromList", {
              hd: [
                /* [] */0,
                undefined
              ],
              tl: {
                hd: [
                  {
                    hd: 1,
                    tl: /* [] */0
                  },
                  Relude__Relude_NonEmpty.List.pure(1)
                ],
                tl: {
                  hd: [
                    {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 3,
                          tl: /* [] */0
                        }
                      }
                    },
                    Relude__Relude_NonEmpty.List.make(1, {
                          hd: 2,
                          tl: {
                            hd: 3,
                            tl: /* [] */0
                          }
                        })
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_NonEmpty.List.fromList(param[0])));
              }));
        Jest.testAll("toList", {
              hd: [
                Relude__Relude_NonEmpty.List.pure(1),
                {
                  hd: 1,
                  tl: /* [] */0
                }
              ],
              tl: {
                hd: [
                  Relude__Relude_NonEmpty.List.make(1, {
                        hd: 2,
                        tl: {
                          hd: 3,
                          tl: /* [] */0
                        }
                      }),
                  {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    }
                  }
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Curry._1(Relude__Relude_NonEmpty.List.toList, param[0])));
              }));
        Jest.testAll("fromArray", {
              hd: [
                [],
                undefined
              ],
              tl: {
                hd: [
                  [1],
                  Relude__Relude_NonEmpty.List.pure(1)
                ],
                tl: {
                  hd: [
                    [
                      1,
                      2,
                      3
                    ],
                    Relude__Relude_NonEmpty.List.make(1, {
                          hd: 2,
                          tl: {
                            hd: 3,
                            tl: /* [] */0
                          }
                        })
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_NonEmpty.List.fromArray(param[0])));
              }));
        Jest.testAll("toArray", {
              hd: [
                Relude__Relude_NonEmpty.List.pure(1),
                [1]
              ],
              tl: {
                hd: [
                  Relude__Relude_NonEmpty.List.make(1, {
                        hd: 2,
                        tl: {
                          hd: 3,
                          tl: /* [] */0
                        }
                      }),
                  [
                    1,
                    2,
                    3
                  ]
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Curry._1(Relude__Relude_NonEmpty.List.toArray, param[0])));
              }));
        Jest.test("pure", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.List.make(1, /* [] */0), Jest.Expect.expect(Relude__Relude_NonEmpty.List.pure(1)));
              }));
        Jest.test("flatMap", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.List.make(2, /* [] */0), Jest.Expect.expect(Curry._2(Relude__Relude_NonEmpty.List.flatMap, (function (a) {
                                      return Relude__Relude_NonEmpty.List.one(a + 1 | 0);
                                    }), Relude__Relude_NonEmpty.List.one(1))));
              }));
        Jest.test("cons", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.List.make(1, {
                                hd: 2,
                                tl: /* [] */0
                              }), Jest.Expect.expect(Relude__Relude_NonEmpty.List.cons(1, Relude__Relude_NonEmpty.List.one(2))));
              }));
        Jest.test("uncons", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          ], Jest.Expect.expect(Relude__Relude_NonEmpty.List.uncons(Relude__Relude_NonEmpty.List.make(1, {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }))));
              }));
        Jest.test("fromSequence", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.List.make(1, /* [] */0), Jest.Expect.expect(Relude__Relude_NonEmpty.List.fromSequence(Relude__Relude_NonEmpty.List.toSequence(Relude__Relude_NonEmpty.List.one(1)))));
              }));
        Jest.test("concat with two full NonEmpty.Lists", (function (param) {
                var l1 = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    });
                var l2 = Relude__Relude_NonEmpty.List.make(4, {
                      hd: 5,
                      tl: /* [] */0
                    });
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.List.make(1, {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }), Jest.Expect.expect(Relude__Relude_NonEmpty.List.concat(l1, l2)));
              }));
        Jest.test("concat named", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.List.make(1, {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: {
                                        hd: 6,
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }), Jest.Expect.expect(Curry._2(Relude__Relude_NonEmpty.List.concatNamed, Relude__Relude_NonEmpty.List.make(1, {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }), Relude__Relude_NonEmpty.List.make(4, {
                                        hd: 5,
                                        tl: {
                                          hd: 6,
                                          tl: /* [] */0
                                        }
                                      }))));
              }));
        Jest.test("foldLeft", (function (param) {
                var ne = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: {
                          hd: 4,
                          tl: {
                            hd: 5,
                            tl: /* [] */0
                          }
                        }
                      }
                    });
                var result = Relude__Relude_NonEmpty.List.foldLeft((function (acc, curr) {
                        return Relude__Relude_List.append(curr, acc);
                      }), /* [] */0, ne);
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(result));
              }));
        Jest.test("foldRight", (function (param) {
                var ne = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: {
                          hd: 4,
                          tl: {
                            hd: 5,
                            tl: /* [] */0
                          }
                        }
                      }
                    });
                var result = Relude__Relude_NonEmpty.List.foldRight(Relude__Relude_List.append, /* [] */0, ne);
                return Jest.Expect.toEqual({
                            hd: 5,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 1,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(result));
              }));
        Jest.test("flatten", (function (param) {
                var ne1 = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    });
                var ne2 = Relude__Relude_NonEmpty.List.make(4, /* [] */0);
                var ne3 = Relude__Relude_NonEmpty.List.make(5, {
                      hd: 6,
                      tl: /* [] */0
                    });
                var all = Relude__Relude_NonEmpty.List.make(ne1, {
                      hd: ne2,
                      tl: {
                        hd: ne3,
                        tl: /* [] */0
                      }
                    });
                var result = Curry._1(Relude__Relude_NonEmpty.List.flatten, all);
                var expected = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: {
                          hd: 4,
                          tl: {
                            hd: 5,
                            tl: {
                              hd: 6,
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    });
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        Jest.testAll("reverse", {
              hd: [
                Relude__Relude_NonEmpty.List.pure(1),
                Relude__Relude_NonEmpty.List.pure(1)
              ],
              tl: {
                hd: [
                  Relude__Relude_NonEmpty.List.make(1, {
                        hd: 2,
                        tl: /* [] */0
                      }),
                  Relude__Relude_NonEmpty.List.make(2, {
                        hd: 1,
                        tl: /* [] */0
                      })
                ],
                tl: {
                  hd: [
                    Relude__Relude_NonEmpty.List.make(1, {
                          hd: 2,
                          tl: {
                            hd: 3,
                            tl: /* [] */0
                          }
                        }),
                    Relude__Relude_NonEmpty.List.make(3, {
                          hd: 2,
                          tl: {
                            hd: 1,
                            tl: /* [] */0
                          }
                        })
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_NonEmpty.List.reverse(param[0])));
              }));
        Jest.test("apply", (function (param) {
                var result = Relude__Relude_NonEmpty.List.apply(Relude__Relude_NonEmpty.List.make((function (v) {
                            return v + 10 | 0;
                          }), {
                          hd: (function (v) {
                              return Math.imul(v, 3);
                            }),
                          tl: /* [] */0
                        }), Relude__Relude_NonEmpty.List.make(1, {
                          hd: 2,
                          tl: /* [] */0
                        }));
                var expected = Relude__Relude_NonEmpty.List.make(11, {
                      hd: 12,
                      tl: {
                        hd: 3,
                        tl: {
                          hd: 6,
                          tl: /* [] */0
                        }
                      }
                    });
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        Jest.test("eq tail", (function (param) {
                var ne = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    });
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_NonEmpty.List.eq(Relude__Relude_Int.Eq, ne, ne)));
              }));
        Jest.test("eq head", (function (param) {
                var ne1 = Relude__Relude_NonEmpty.List.make(0, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    });
                var ne2 = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    });
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_NonEmpty.List.eq(Relude__Relude_Int.Eq, ne1, ne2)));
              }));
        Jest.test("show", (function (param) {
                var ne = Relude__Relude_NonEmpty.List.make(1, {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    });
                return Jest.Expect.toEqual("[!1, 2, 3!]", Jest.Expect.expect(Relude__Relude_NonEmpty.List.show(Relude__Relude_Int.Show, ne)));
              }));
        var NonEmptyListWithOption = Relude__Relude_NonEmpty.List.WithApplicative(Relude__Relude_Option_Instances.Applicative);
        Jest.test("traverse option", (function (param) {
                return Jest.Expect.toEqual(/* NonEmpty */{
                            _0: 1,
                            _1: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Curry._2(NonEmptyListWithOption.traverse, (function (a) {
                                      return a;
                                    }), /* NonEmpty */{
                                    _0: 1,
                                    _1: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
      }));

Jest.describe("NonEmpty.Array", (function (param) {
        Jest.test("make", (function (param) {
                return Jest.Expect.toEqual(/* NonEmpty */{
                            _0: 1,
                            _1: [
                              2,
                              3
                            ]
                          }, Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.make(1, [
                                    2,
                                    3
                                  ])));
              }));
        Jest.testAll("fromList", {
              hd: [
                /* [] */0,
                undefined
              ],
              tl: {
                hd: [
                  {
                    hd: 1,
                    tl: /* [] */0
                  },
                  Relude__Relude_NonEmpty.$$Array.pure(1)
                ],
                tl: {
                  hd: [
                    {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 3,
                          tl: /* [] */0
                        }
                      }
                    },
                    Relude__Relude_NonEmpty.$$Array.make(1, [
                          2,
                          3
                        ])
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.fromList(param[0])));
              }));
        Jest.testAll("toList", {
              hd: [
                Relude__Relude_NonEmpty.$$Array.pure(1),
                {
                  hd: 1,
                  tl: /* [] */0
                }
              ],
              tl: {
                hd: [
                  Relude__Relude_NonEmpty.$$Array.make(1, [
                        2,
                        3
                      ]),
                  {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 3,
                        tl: /* [] */0
                      }
                    }
                  }
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Curry._1(Relude__Relude_NonEmpty.$$Array.toList, param[0])));
              }));
        Jest.testAll("fromArray", {
              hd: [
                [],
                undefined
              ],
              tl: {
                hd: [
                  [1],
                  Relude__Relude_NonEmpty.$$Array.pure(1)
                ],
                tl: {
                  hd: [
                    [
                      1,
                      2,
                      3
                    ],
                    Relude__Relude_NonEmpty.$$Array.make(1, [
                          2,
                          3
                        ])
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.fromArray(param[0])));
              }));
        Jest.testAll("toArray", {
              hd: [
                Relude__Relude_NonEmpty.$$Array.pure(1),
                [1]
              ],
              tl: {
                hd: [
                  Relude__Relude_NonEmpty.$$Array.make(1, [
                        2,
                        3
                      ]),
                  [
                    1,
                    2,
                    3
                  ]
                ],
                tl: /* [] */0
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Curry._1(Relude__Relude_NonEmpty.$$Array.toArray, param[0])));
              }));
        Jest.test("cons", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.$$Array.make(1, [2]), Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.cons(1, Relude__Relude_NonEmpty.$$Array.one(2))));
              }));
        Jest.test("uncons", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            [
                              2,
                              3
                            ]
                          ], Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.uncons(Relude__Relude_NonEmpty.$$Array.make(1, [
                                        2,
                                        3
                                      ]))));
              }));
        Jest.test("concat with two full NonEmpty.Arrays", (function (param) {
                var l1 = Relude__Relude_NonEmpty.$$Array.make(1, [
                      2,
                      3
                    ]);
                var l2 = Relude__Relude_NonEmpty.$$Array.make(4, [5]);
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.$$Array.make(1, [
                                2,
                                3,
                                4,
                                5
                              ]), Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.concat(l1, l2)));
              }));
        Jest.testAll("reverse", {
              hd: [
                Relude__Relude_NonEmpty.$$Array.pure(1),
                Relude__Relude_NonEmpty.$$Array.pure(1)
              ],
              tl: {
                hd: [
                  Relude__Relude_NonEmpty.$$Array.make(1, [2]),
                  Relude__Relude_NonEmpty.$$Array.make(2, [1])
                ],
                tl: {
                  hd: [
                    Relude__Relude_NonEmpty.$$Array.make(1, [
                          2,
                          3
                        ]),
                    Relude__Relude_NonEmpty.$$Array.make(3, [
                          2,
                          1
                        ])
                  ],
                  tl: /* [] */0
                }
              }
            }, (function (param) {
                return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.reverse(param[0])));
              }));
        Jest.test("toNonEmptyList", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.List.make(1, {
                                hd: 2,
                                tl: /* [] */0
                              }), Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.toNonEmptyList(Relude__Relude_NonEmpty.$$Array.cons(1, Relude__Relude_NonEmpty.$$Array.one(2)))));
              }));
        Jest.test("fromNonEmptyList", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_NonEmpty.$$Array.make(1, [2]), Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.fromNonEmptyList(Relude__Relude_NonEmpty.List.make(1, {
                                        hd: 2,
                                        tl: /* [] */0
                                      }))));
              }));
        Jest.test("show", (function (param) {
                var ne = Relude__Relude_NonEmpty.$$Array.make(1, [
                      2,
                      3
                    ]);
                return Jest.Expect.toEqual("[!1, 2, 3!]", Jest.Expect.expect(Relude__Relude_NonEmpty.$$Array.show(Relude__Relude_Int.Show, ne)));
              }));
        var NonEmptyArrayWithOption = Relude__Relude_NonEmpty.$$Array.WithApplicative(Relude__Relude_Option_Instances.Applicative);
        Jest.test("traverse option", (function (param) {
                return Jest.Expect.toEqual(/* NonEmpty */{
                            _0: 1,
                            _1: [
                              2,
                              3
                            ]
                          }, Jest.Expect.expect(Curry._2(NonEmptyArrayWithOption.traverse, (function (a) {
                                      return a;
                                    }), /* NonEmpty */{
                                    _0: 1,
                                    _1: [
                                      2,
                                      3
                                    ]
                                  })));
              }));
      }));

/*  Not a pure module */
