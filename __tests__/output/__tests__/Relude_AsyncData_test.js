// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_AsyncData = require("relude/./Relude_AsyncData.js");

Jest.describe("AsyncData", (function (param) {
        Jest.test("isEmpty init", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isEmpty(Relude__Relude_AsyncData.init)));
              }));
        Jest.test("isEmpty loading", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isEmpty(Relude__Relude_AsyncData.loading)));
              }));
        Jest.test("isEmpty reloading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isEmpty(Relude__Relude_AsyncData.reloading(42))));
              }));
        Jest.test("isEmpty complete", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isEmpty(Relude__Relude_AsyncData.complete(42))));
              }));
        Jest.test("isNotEmpty init", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isNotEmpty(Relude__Relude_AsyncData.init)));
              }));
        Jest.test("isNotEmpty loading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isNotEmpty(Relude__Relude_AsyncData.loading)));
              }));
        Jest.test("isNotEmpty reloading", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isNotEmpty(Relude__Relude_AsyncData.reloading(42))));
              }));
        Jest.test("isNotEmpty complete", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isNotEmpty(Relude__Relude_AsyncData.complete(42))));
              }));
        Jest.test("isInit when Init", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isInit(/* Init */0)));
              }));
        Jest.test("isInit when Loading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isInit(/* Loading */1)));
              }));
        Jest.test("isInit when Reloading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isInit({
                                    TAG: /* Reloading */0,
                                    _0: ""
                                  })));
              }));
        Jest.test("isInit when Complete", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isInit({
                                    TAG: /* Complete */1,
                                    _0: ""
                                  })));
              }));
        Jest.test("isLoading when Init", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isLoading(/* Init */0)));
              }));
        Jest.test("isLoading when Loading", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isLoading(/* Loading */1)));
              }));
        Jest.test("isLoading when Reloading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isLoading({
                                    TAG: /* Reloading */0,
                                    _0: ""
                                  })));
              }));
        Jest.test("isLoading when Complete", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isLoading({
                                    TAG: /* Complete */1,
                                    _0: ""
                                  })));
              }));
        Jest.test("isReloading when Init", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isReloading(/* Init */0)));
              }));
        Jest.test("isReloading when Loading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isReloading(/* Loading */1)));
              }));
        Jest.test("isReloading when Reloading", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isReloading({
                                    TAG: /* Reloading */0,
                                    _0: ""
                                  })));
              }));
        Jest.test("isReloading when Complete", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isReloading({
                                    TAG: /* Complete */1,
                                    _0: ""
                                  })));
              }));
        Jest.test("isComplete when Init", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isComplete(/* Init */0)));
              }));
        Jest.test("isComplete when Loading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isComplete(/* Loading */1)));
              }));
        Jest.test("isComplete when Reloading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isComplete({
                                    TAG: /* Reloading */0,
                                    _0: ""
                                  })));
              }));
        Jest.test("isComplete when Complete", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isComplete({
                                    TAG: /* Complete */1,
                                    _0: ""
                                  })));
              }));
        Jest.test("isBusy when Init", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isBusy(/* Init */0)));
              }));
        Jest.test("isBusy when Loading", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isBusy(/* Loading */1)));
              }));
        Jest.test("isBusy when Reloading", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isBusy({
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  })));
              }));
        Jest.test("isBusy when Complete", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isBusy({
                                    TAG: /* Complete */1,
                                    _0: 10
                                  })));
              }));
        Jest.test("isIdle when Init", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isIdle(/* Init */0)));
              }));
        Jest.test("isIdle when Loading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isIdle(/* Loading */1)));
              }));
        Jest.test("isIdle when Reloading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.isIdle({
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  })));
              }));
        Jest.test("isIdle when Complete", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.isIdle({
                                    TAG: /* Complete */1,
                                    _0: 10
                                  })));
              }));
        Jest.test("toBusy when Init", (function (param) {
                return Jest.Expect.toEqual(/* Loading */1, Jest.Expect.expect(Relude__Relude_AsyncData.toBusy(/* Init */0)));
              }));
        Jest.test("toBusy when Loading", (function (param) {
                return Jest.Expect.toEqual(/* Loading */1, Jest.Expect.expect(Relude__Relude_AsyncData.toBusy(/* Loading */1)));
              }));
        Jest.test("toBusy when Reloading", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Reloading */0,
                            _0: 1
                          }, Jest.Expect.expect(Relude__Relude_AsyncData.toBusy({
                                    TAG: /* Reloading */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("toBusy when Complete", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Reloading */0,
                            _0: 1
                          }, Jest.Expect.expect(Relude__Relude_AsyncData.toBusy({
                                    TAG: /* Complete */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("toIdle when Init", (function (param) {
                return Jest.Expect.toEqual(/* Init */0, Jest.Expect.expect(Relude__Relude_AsyncData.toIdle(/* Init */0)));
              }));
        Jest.test("toIdle when Loading", (function (param) {
                return Jest.Expect.toEqual(/* Init */0, Jest.Expect.expect(Relude__Relude_AsyncData.toIdle(/* Loading */1)));
              }));
        Jest.test("toIdle when Reloading", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Complete */1,
                            _0: 1
                          }, Jest.Expect.expect(Relude__Relude_AsyncData.toIdle({
                                    TAG: /* Reloading */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("toIdle when Complete", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Complete */1,
                            _0: 1
                          }, Jest.Expect.expect(Relude__Relude_AsyncData.toIdle({
                                    TAG: /* Complete */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("getReloading when Init", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getReloading(/* Init */0)));
              }));
        Jest.test("getReloading when Loading", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getReloading(/* Loading */1)));
              }));
        Jest.test("getReloading when Reloading", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.getReloading({
                                    TAG: /* Reloading */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("getReloading when Complete", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getReloading({
                                    TAG: /* Complete */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("getComplete when Init", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getComplete(/* Init */0)));
              }));
        Jest.test("getComplete when Loading", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getComplete(/* Loading */1)));
              }));
        Jest.test("getComplete when Reloading", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getComplete({
                                    TAG: /* Reloading */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("getComplete when Complete", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.getComplete({
                                    TAG: /* Complete */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("getValue when Init", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getValue(/* Init */0)));
              }));
        Jest.test("getValue when Loading", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_AsyncData.getValue(/* Loading */1)));
              }));
        Jest.test("getValue when Complete", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.getValue({
                                    TAG: /* Complete */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("getValue when Reloading", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.getValue({
                                    TAG: /* Reloading */0,
                                    _0: 1
                                  })));
              }));
        Jest.test("map Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.init, Jest.Expect.expect(Relude__Relude_AsyncData.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncData.init)));
              }));
        Jest.test("map Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.loading, Jest.Expect.expect(Relude__Relude_AsyncData.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncData.loading)));
              }));
        Jest.test("map Reloading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.reloading(43), Jest.Expect.expect(Relude__Relude_AsyncData.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncData.reloading(42))));
              }));
        Jest.test("map Complete", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete(43), Jest.Expect.expect(Relude__Relude_AsyncData.map((function (i) {
                                      return i + 1 | 0;
                                    }), Relude__Relude_AsyncData.complete(42))));
              }));
        Jest.test("tap Init", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (param) {
                  count.contents = count.contents + 1 | 0;
                };
                Relude__Relude_AsyncData.tap(f, (function (param) {
                        
                      }), (function (param) {
                        
                      }), (function (param) {
                        
                      }), Relude__Relude_AsyncData.init);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tap Loading", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (param) {
                  count.contents = count.contents + 1 | 0;
                };
                Relude__Relude_AsyncData.tap((function (param) {
                        
                      }), f, (function (param) {
                        
                      }), (function (param) {
                        
                      }), Relude__Relude_AsyncData.loading);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tap Reloading", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncData.tap((function (param) {
                        
                      }), (function (param) {
                        
                      }), f, (function (param) {
                        
                      }), Relude__Relude_AsyncData.reloading(42));
                return Jest.Expect.toEqual(43, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tap Complete", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncData.tap((function (param) {
                        
                      }), (function (param) {
                        
                      }), (function (param) {
                        
                      }), f, Relude__Relude_AsyncData.complete(42));
                return Jest.Expect.toEqual(43, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapInit", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (param) {
                  count.contents = count.contents + 1 | 0;
                };
                Relude__Relude_AsyncData.tapInit(f, Relude__Relude_AsyncData.init);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapLoading", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (param) {
                  count.contents = count.contents + 1 | 0;
                };
                Relude__Relude_AsyncData.tapLoading(f, Relude__Relude_AsyncData.loading);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapReloading", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncData.tapReloading(f, Relude__Relude_AsyncData.reloading(42));
                return Jest.Expect.toEqual(43, Jest.Expect.expect(count.contents));
              }));
        Jest.test("tapComplete", (function (param) {
                var count = {
                  contents: 0
                };
                var f = function (a) {
                  count.contents = (count.contents + a | 0) + 1 | 0;
                };
                Relude__Relude_AsyncData.tapComplete(f, Relude__Relude_AsyncData.complete(42));
                return Jest.Expect.toEqual(43, Jest.Expect.expect(count.contents));
              }));
        Jest.test("fold when Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.fold(1, 2, (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), /* Init */0)));
              }));
        Jest.test("fold when Loading", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Relude__Relude_AsyncData.fold(1, 2, (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), /* Loading */1)));
              }));
        Jest.test("fold when Reloading", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncData.fold(1, 2, (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), {
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  })));
              }));
        Jest.test("fold when Complete", (function (param) {
                return Jest.Expect.toEqual(14, Jest.Expect.expect(Relude__Relude_AsyncData.fold(1, 2, (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), {
                                    TAG: /* Complete */1,
                                    _0: 10
                                  })));
              }));
        Jest.test("foldLazy when Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), /* Init */0)));
              }));
        Jest.test("foldLazy when Loading", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Relude__Relude_AsyncData.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), /* Loading */1)));
              }));
        Jest.test("foldLazy when Reloading", (function (param) {
                return Jest.Expect.toEqual(13, Jest.Expect.expect(Relude__Relude_AsyncData.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), {
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  })));
              }));
        Jest.test("foldLazy when Complete", (function (param) {
                return Jest.Expect.toEqual(14, Jest.Expect.expect(Relude__Relude_AsyncData.foldLazy((function (param) {
                                      return 1;
                                    }), (function (param) {
                                      return 2;
                                    }), (function (a) {
                                      return a + 3 | 0;
                                    }), (function (a) {
                                      return a + 4 | 0;
                                    }), {
                                    TAG: /* Complete */1,
                                    _0: 10
                                  })));
              }));
        Jest.test("foldByValue when Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValue(1, (function (a) {
                                      return a + 2 | 0;
                                    }), /* Init */0)));
              }));
        Jest.test("foldByValue when Loading", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValue(1, (function (a) {
                                      return a + 2 | 0;
                                    }), /* Loading */1)));
              }));
        Jest.test("foldByValue when Reloading", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValue(1, (function (a) {
                                      return a + 2 | 0;
                                    }), {
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  })));
              }));
        Jest.test("foldByValue when Complete", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValue(1, (function (a) {
                                      return a + 2 | 0;
                                    }), {
                                    TAG: /* Complete */1,
                                    _0: 10
                                  })));
              }));
        Jest.test("foldByValueLazy when Init", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (a) {
                                      return a + 2 | 0;
                                    }), /* Init */0)));
              }));
        Jest.test("foldByValueLazy when Loading", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (a) {
                                      return a + 2 | 0;
                                    }), /* Loading */1)));
              }));
        Jest.test("foldByValueLazy when Reloading", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (a) {
                                      return a + 2 | 0;
                                    }), {
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  })));
              }));
        Jest.test("foldByValueLazy when Complete", (function (param) {
                return Jest.Expect.toEqual(12, Jest.Expect.expect(Relude__Relude_AsyncData.foldByValueLazy((function (param) {
                                      return 1;
                                    }), (function (a) {
                                      return a + 2 | 0;
                                    }), {
                                    TAG: /* Complete */1,
                                    _0: 10
                                  })));
              }));
        Jest.test("eqBy false for Init vs Loading", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.eqBy((function (param, param$1) {
                                      return true;
                                    }), /* Init */0, /* Loading */1)));
              }));
        Jest.test("eqBy false for Reloading and Complete", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.eqBy((function (param, param$1) {
                                      return true;
                                    }), {
                                    TAG: /* Reloading */0,
                                    _0: 1
                                  }, {
                                    TAG: /* Complete */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("eqBy true for both Complete", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_AsyncData.eqBy(Relude__Relude_String.eq, {
                                    TAG: /* Complete */1,
                                    _0: "a"
                                  }, {
                                    TAG: /* Complete */1,
                                    _0: "a"
                                  })));
              }));
        Jest.test("eqBy false for both Complete, different values", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_AsyncData.eqBy(Relude__Relude_Int.eq, {
                                    TAG: /* Complete */1,
                                    _0: 0
                                  }, {
                                    TAG: /* Complete */1,
                                    _0: 1
                                  })));
              }));
        Jest.test("pure", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete(42), Jest.Expect.expect(Relude__Relude_AsyncData.pure(42)));
              }));
        Jest.test("map2 Init Init", (function (param) {
                return Jest.Expect.toEqual(/* Init */0, Jest.Expect.expect(Curry._3(Relude__Relude_AsyncData.map2, (function (param, param$1) {
                                      
                                    }), /* Init */0, /* Init */0)));
              }));
        Jest.test("map2 Init Loading", (function (param) {
                return Jest.Expect.toEqual(/* Loading */1, Jest.Expect.expect(Curry._3(Relude__Relude_AsyncData.map2, (function (param, param$1) {
                                      
                                    }), /* Init */0, /* Loading */1)));
              }));
        Jest.test("map2 Init Reloading", (function (param) {
                return Jest.Expect.toEqual(/* Init */0, Jest.Expect.expect(Curry._3(Relude__Relude_AsyncData.map2, (function (param, param$1) {
                                      
                                    }), /* Init */0, {
                                    TAG: /* Reloading */0,
                                    _0: 123
                                  })));
              }));
        Jest.test("map2 Reloading Reloading", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Reloading */0,
                            _0: 30
                          }, Jest.Expect.expect(Curry._3(Relude__Relude_AsyncData.map2, (function (prim0, prim1) {
                                      return prim0 + prim1 | 0;
                                    }), {
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  }, {
                                    TAG: /* Reloading */0,
                                    _0: 20
                                  })));
              }));
        Jest.test("map2 Reloading Complete", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* Reloading */0,
                            _0: 30
                          }, Jest.Expect.expect(Curry._3(Relude__Relude_AsyncData.map2, (function (prim0, prim1) {
                                      return prim0 + prim1 | 0;
                                    }), {
                                    TAG: /* Reloading */0,
                                    _0: 10
                                  }, {
                                    TAG: /* Complete */1,
                                    _0: 20
                                  })));
              }));
        Jest.test("bind Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.init, Jest.Expect.expect(Relude__Relude_AsyncData.bind(Relude__Relude_AsyncData.init, Relude__Relude_AsyncData.complete)));
              }));
        Jest.test("bind Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.loading, Jest.Expect.expect(Relude__Relude_AsyncData.bind(Relude__Relude_AsyncData.loading, Relude__Relude_AsyncData.complete)));
              }));
        Jest.test("bind Reloading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete(84), Jest.Expect.expect(Relude__Relude_AsyncData.bind(Relude__Relude_AsyncData.reloading(42), (function (x) {
                                      return Relude__Relude_AsyncData.complete((x << 1));
                                    }))));
              }));
        Jest.test("bind Complete", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.reloading(84), Jest.Expect.expect(Relude__Relude_AsyncData.bind(Relude__Relude_AsyncData.complete(42), (function (x) {
                                      return Relude__Relude_AsyncData.reloading((x << 1));
                                    }))));
              }));
        Jest.test("alt Loading Init", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.loading, Jest.Expect.expect(Curry._2(Relude__Relude_AsyncData.Infix.$less$pipe$great, Relude__Relude_AsyncData.loading, Relude__Relude_AsyncData.init)));
              }));
        Jest.test("alt Init Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.loading, Jest.Expect.expect(Curry._2(Relude__Relude_AsyncData.Infix.$less$pipe$great, Relude__Relude_AsyncData.init, Relude__Relude_AsyncData.loading)));
              }));
        Jest.test("alt Loading Reloading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.reloading(42), Jest.Expect.expect(Curry._2(Relude__Relude_AsyncData.Infix.$less$pipe$great, Relude__Relude_AsyncData.loading, Relude__Relude_AsyncData.reloading(42))));
              }));
        Jest.test("alt Reloading Loading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.reloading(42), Jest.Expect.expect(Curry._2(Relude__Relude_AsyncData.Infix.$less$pipe$great, Relude__Relude_AsyncData.reloading(42), Relude__Relude_AsyncData.loading)));
              }));
        Jest.test("alt Reloading Complete", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete(43), Jest.Expect.expect(Curry._2(Relude__Relude_AsyncData.Infix.$less$pipe$great, Relude__Relude_AsyncData.reloading(42), Relude__Relude_AsyncData.complete(43))));
              }));
        Jest.test("alt Complete Reloading", (function (param) {
                return Jest.Expect.toEqual(Relude__Relude_AsyncData.complete(43), Jest.Expect.expect(Curry._2(Relude__Relude_AsyncData.Infix.$less$pipe$great, Relude__Relude_AsyncData.complete(43), Relude__Relude_AsyncData.reloading(42))));
              }));
      }));

/*  Not a pure module */
