// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_IO = require("relude/./Relude_IO.js");
var Relude__Relude_Int = require("relude/./Relude_Int.js");
var Relude__Relude_List = require("relude/./Relude_List.js");
var Relude__Relude_String = require("relude/./Relude_String.js");
var Relude__Relude_NonEmpty = require("relude/./Relude_NonEmpty.js");
var Relude__Relude_Js_Promise = require("relude/js/Relude_Js_Promise.js");
var Relude__Relude_List_Specializations = require("relude/list/Relude_List_Specializations.js");

Jest.describe("List", (function (param) {
        Jest.test("length empty list", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._1(Relude__Relude_List.length, /* [] */0)));
              }));
        Jest.test("length non-empty list", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._1(Relude__Relude_List.length, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("isEmpty is true for empty list", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_List.isEmpty(/* [] */0)));
              }));
        Jest.test("isEmpty is false for non-empty list", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_List.isEmpty({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("isNotEmpty is false for empty list", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_List.isNotEmpty(/* [] */0)));
              }));
        Jest.test("isNotEmpty is true for non-empty list", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_List.isNotEmpty({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("empty is []", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.empty));
              }));
        Jest.test("pure creates a one-item list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 123,
                            tl: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_List.pure(123)));
              }));
        Jest.test("repeat creates a list of n items", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "a",
                              tl: {
                                hd: "a",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.repeat(3, "a")));
              }));
        Jest.test("repeat (negative count is empty)", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.repeat(-1, "a")));
              }));
        Jest.test("makeWithIndex creates a list of n items using f", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 3,
                              tl: {
                                hd: 4,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.makeWithIndex(3, (function (i) {
                                      return i + 2 | 0;
                                    }))));
              }));
        Jest.test("concat", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.concat({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 3,
                                    tl: {
                                      hd: 4,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("concatNamed", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Curry._2(Relude__Relude_List.concatNamed, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 3,
                                    tl: {
                                      hd: 4,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("guard true", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Curry._2(Relude__Relude_List.guard, true, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("guard false", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Curry._2(Relude__Relude_List.guard, false, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("power", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 1,
                                  tl: {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: {
                                        hd: 1,
                                        tl: {
                                          hd: 2,
                                          tl: {
                                            hd: 3,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Curry._2(Relude__Relude_List.power, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, 3)));
              }));
        Jest.test("cons", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.cons(1, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("uncons empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.uncons(/* [] */0)));
              }));
        Jest.test("uncons single item list", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            /* [] */0
                          ], Jest.Expect.expect(Relude__Relude_List.uncons({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("uncons multi item list", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          ], Jest.Expect.expect(Relude__Relude_List.uncons({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("prepend", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.prepend(1, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("append", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 3,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.append(1, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("appendOption Some appends element", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 3,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.appendOption(1, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("appendOption None no-ops", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 3,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.appendOption(undefined, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("consOption Some conss element", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.consOption(1, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("consOption None no-ops", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 3,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.consOption(undefined, {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("foldLeft", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.foldLeft((function (acc, curr) {
                                        return Relude__Relude_List.append(curr, acc);
                                      }), /* [] */0)({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("foldRight", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 5,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 1,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.foldRight(Relude__Relude_List.append, /* [] */0)({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("unfold", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.unfold((function (x) {
                                      if (x > 5) {
                                        return ;
                                      } else {
                                        return [
                                                x,
                                                x + 1 | 0
                                              ];
                                      }
                                    }), 0)));
              }));
        Jest.test("scanLeft", (function (param) {
                return Jest.Expect.toEqual({
                            hd: {
                              hd: 1,
                              tl: /* [] */0
                            },
                            tl: {
                              hd: {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: /* [] */0
                                }
                              },
                              tl: {
                                hd: {
                                  hd: 1,
                                  tl: {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  },
                                  tl: {
                                    hd: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: {
                                              hd: 5,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    },
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.scanLeft((function (acc, curr) {
                                      return Relude__Relude_List.append(curr, acc);
                                    }), /* [] */0, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("scanRight", (function (param) {
                return Jest.Expect.toEqual({
                            hd: {
                              hd: 5,
                              tl: {
                                hd: 4,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 2,
                                    tl: {
                                      hd: 1,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            },
                            tl: {
                              hd: {
                                hd: 5,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 3,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              },
                              tl: {
                                hd: {
                                  hd: 5,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    hd: 5,
                                    tl: {
                                      hd: 4,
                                      tl: /* [] */0
                                    }
                                  },
                                  tl: {
                                    hd: {
                                      hd: 5,
                                      tl: /* [] */0
                                    },
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.scanRight(Relude__Relude_List.append, /* [] */0, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("at empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.at(0, /* [] */0)));
              }));
        Jest.test("at success", (function (param) {
                return Jest.Expect.toEqual(20, Jest.Expect.expect(Relude__Relude_List.at(2, {
                                    hd: 0,
                                    tl: {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: {
                                          hd: 30,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("at failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.at(10, {
                                    hd: 0,
                                    tl: {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: {
                                          hd: 30,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("head empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.head(/* [] */0)));
              }));
        Jest.test("head single item list", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_List.head({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("head multi-item list", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_List.head({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("tail empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.tail(/* [] */0)));
              }));
        Jest.test("tail single item list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.tail({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("tail multi-item list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 3,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.tail({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("tailOrEmpty empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.tailOrEmpty(/* [] */0)));
              }));
        Jest.test("tailOrEmpty single item list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.tailOrEmpty({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("tailOrEmpty multi-item list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 3,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.tailOrEmpty({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("init empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.init(/* [] */0)));
              }));
        Jest.test("init single item list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.init({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("init multi item list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.init({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("initOrEmpty empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.initOrEmpty(/* [] */0)));
              }));
        Jest.test("initOrEmpty single item list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.initOrEmpty({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("initOrEmpty multi item list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.initOrEmpty({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("last empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.last(/* [] */0)));
              }));
        Jest.test("last single item list", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Relude__Relude_List.last({
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("last multi item list", (function (param) {
                return Jest.Expect.toEqual(4, Jest.Expect.expect(Relude__Relude_List.last({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("take zero from empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.take(0, /* [] */0)));
              }));
        Jest.test("take non-zero from empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.take(2, /* [] */0)));
              }));
        Jest.test("take non-zero from short list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_List.take(2, {
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("take non-zero from equal list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.take(2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("take non-zero from long list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.take(2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("takeExactly negative from list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.takeExactly(-2, /* [] */0)));
              }));
        Jest.test("takeExactly zero from empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.takeExactly(0, /* [] */0)));
              }));
        Jest.test("takeExactly non-zero from empty list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.takeExactly(2, /* [] */0)));
              }));
        Jest.test("takeExactly non-zero from short list", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.takeExactly(2, {
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("takeExactly non-zero from equal list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.takeExactly(2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("takeExactly non-zero from long list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.takeExactly(2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("takeWhile empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.takeWhile((function (a) {
                                      return a < 2;
                                    }), /* [] */0)));
              }));
        Jest.test("takeWhile list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.takeWhile((function (a) {
                                      return a < 2;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("takeWhile list condition never true", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.takeWhile((function (a) {
                                      return a < 0;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("takeWhile list condition never false", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.takeWhile((function (a) {
                                      return a < 10;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("drop negative from empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.drop(-2, /* [] */0)));
              }));
        Jest.test("drop negative from nonempty list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.drop(-2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("drop zero from empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.drop(0, /* [] */0)));
              }));
        Jest.test("drop zero from nonempty list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.drop(0, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("drop some from short list ", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_List.drop(1, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("drop some from equal list ", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.drop(2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("drop some from long list ", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 4,
                            tl: {
                              hd: 5,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.drop(3, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("drop more from long list ", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.drop(5, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("dropWhile empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.dropWhile((function (a) {
                                      return a < 2;
                                    }), /* [] */0)));
              }));
        Jest.test("dropExactly zero from empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.dropExactly(0, /* [] */0)));
              }));
        Jest.test("dropExactly some from short list ", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_List.dropExactly(1, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("dropExactly some from equal list ", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.dropExactly(2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("dropExactly some from long list ", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 3,
                            tl: {
                              hd: 4,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.dropExactly(2, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("dropExactly more from long list ", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Relude__Relude_List.dropExactly(5, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("dropWhile list", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.dropWhile((function (a) {
                                      return a < 2;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 1,
                                          tl: {
                                            hd: 3,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("dropWhile list condition never true", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.dropWhile((function (a) {
                                      return a < 0;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("dropWhile list condition never false", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.dropWhile((function (a) {
                                      return a < 10;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("filter", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 6,
                                tl: {
                                  hd: 8,
                                  tl: {
                                    hd: 10,
                                    tl: {
                                      hd: 10,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.filter((function (i) {
                                      return i % 2 === 0;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: {
                                              hd: 6,
                                              tl: {
                                                hd: 7,
                                                tl: {
                                                  hd: 8,
                                                  tl: {
                                                    hd: 9,
                                                    tl: {
                                                      hd: 10,
                                                      tl: {
                                                        hd: 9,
                                                        tl: {
                                                          hd: 10,
                                                          tl: /* [] */0
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("filterWithIndex", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 3,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 5,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.filterWithIndex((function (v, i) {
                                      if (i % 2 === 0) {
                                        return true;
                                      } else {
                                        return v === 3;
                                      }
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 3,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: {
                                              hd: 6,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("filterNot", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 3,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.filterNot(function (x) {
                                      return x % 2 === 0;
                                    })({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("filterNotWithIndex", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 0,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.filterNotWithIndex(function (param, idx) {
                                      return idx > 2;
                                    })({
                                    hd: 0,
                                    tl: {
                                      hd: 0,
                                      tl: {
                                        hd: 0,
                                        tl: {
                                          hd: 0,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("find not found", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_List.find, (function (a) {
                                      return a === 3;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("find found", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._2(Relude__Relude_List.find, (function (a) {
                                      return a === 2;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("findWithIndex", (function (param) {
                return Jest.Expect.toEqual(2, Jest.Expect.expect(Curry._2(Relude__Relude_List.findWithIndex, (function (a, i) {
                                      if (a === 3) {
                                        return true;
                                      } else {
                                        return i === 2;
                                      }
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("partition", (function (param) {
                return Jest.Expect.toEqual([
                            {
                              hd: 0,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 4,
                                  tl: /* [] */0
                                }
                              }
                            },
                            {
                              hd: 1,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 5,
                                  tl: /* [] */0
                                }
                              }
                            }
                          ], Jest.Expect.expect(Relude__Relude_List.partition((function (a) {
                                      return a % 2 === 0;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: {
                                              hd: 5,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("splitAt", (function (param) {
                return Jest.Expect.toEqual([
                            {
                              hd: 0,
                              tl: {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: /* [] */0
                                }
                              }
                            },
                            {
                              hd: 3,
                              tl: {
                                hd: 4,
                                tl: {
                                  hd: 5,
                                  tl: /* [] */0
                                }
                              }
                            }
                          ], Jest.Expect.expect(Relude__Relude_List.splitAt(3, {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: {
                                              hd: 5,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("prependToAll", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 0,
                                tl: {
                                  hd: 1,
                                  tl: {
                                    hd: 0,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.prependToAll(0, {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("intersperse", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: ",",
                              tl: {
                                hd: "b",
                                tl: {
                                  hd: ",",
                                  tl: {
                                    hd: "c",
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.intersperse(",", {
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: {
                                        hd: "c",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("intersperse is tail recursive", (function (param) {
                return Jest.Expect.toEqual(39999, Jest.Expect.expect(Curry._1(Relude__Relude_List.length, Relude__Relude_List.intersperse(1, Relude__Relude_List.repeat(20000, 0)))));
              }));
        Jest.test("replicate", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "b",
                              tl: {
                                hd: "c",
                                tl: {
                                  hd: "a",
                                  tl: {
                                    hd: "b",
                                    tl: {
                                      hd: "c",
                                      tl: {
                                        hd: "a",
                                        tl: {
                                          hd: "b",
                                          tl: {
                                            hd: "c",
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.replicate(3, {
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: {
                                        hd: "c",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("replicate once", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "foo",
                            tl: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_List.replicate(1, {
                                    hd: "foo",
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("replicate zero", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.replicate(0, {
                                    hd: "none",
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("replicate negative", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.replicate(-1, {
                                    hd: 0,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("replicate empty list", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.replicate(10, /* [] */0)));
              }));
        Jest.test("zip same length lists", (function (param) {
                return Jest.Expect.toEqual({
                            hd: [
                              1,
                              "4"
                            ],
                            tl: {
                              hd: [
                                2,
                                "5"
                              ],
                              tl: {
                                hd: [
                                  3,
                                  "6"
                                ],
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.zip({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, {
                                    hd: "4",
                                    tl: {
                                      hd: "5",
                                      tl: {
                                        hd: "6",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("zip different length lists", (function (param) {
                return Jest.Expect.toEqual({
                            hd: [
                              1,
                              "4"
                            ],
                            tl: {
                              hd: [
                                2,
                                "5"
                              ],
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.zip({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, {
                                    hd: "4",
                                    tl: {
                                      hd: "5",
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("zipWith", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 5,
                            tl: {
                              hd: 7,
                              tl: {
                                hd: 9,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.zipWith((function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: {
                                        hd: 6,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("zipWithIndex", (function (param) {
                return Jest.Expect.toEqual({
                            hd: [
                              "a",
                              0
                            ],
                            tl: {
                              hd: [
                                "b",
                                1
                              ],
                              tl: {
                                hd: [
                                  "c",
                                  2
                                ],
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.zipWithIndex({
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: {
                                        hd: "c",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("unzip", (function (param) {
                return Jest.Expect.toEqual([
                            {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: /* [] */0
                                }
                              }
                            },
                            {
                              hd: "a",
                              tl: {
                                hd: "b",
                                tl: {
                                  hd: "c",
                                  tl: /* [] */0
                                }
                              }
                            }
                          ], Jest.Expect.expect(Relude__Relude_List.unzip({
                                    hd: [
                                      1,
                                      "a"
                                    ],
                                    tl: {
                                      hd: [
                                        2,
                                        "b"
                                      ],
                                      tl: {
                                        hd: [
                                          3,
                                          "c"
                                        ],
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("sortWithInt", (function (param) {
                return Jest.Expect.toEqual({
                            hd: -1,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 3,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.sortWithInt(Relude__Relude_Int.compareAsInt, {
                                    hd: 2,
                                    tl: {
                                      hd: 0,
                                      tl: {
                                        hd: 1,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 5,
                                            tl: {
                                              hd: -1,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("sortBy", (function (param) {
                return Jest.Expect.toEqual({
                            hd: -1,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 3,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.sortBy(Relude__Relude_Int.compare, {
                                    hd: 2,
                                    tl: {
                                      hd: 0,
                                      tl: {
                                        hd: 1,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 5,
                                            tl: {
                                              hd: -1,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("sort", (function (param) {
                return Jest.Expect.toEqual({
                            hd: -1,
                            tl: {
                              hd: 0,
                              tl: {
                                hd: 1,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 3,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.sort(Relude__Relude_Int.Ord, {
                                    hd: 2,
                                    tl: {
                                      hd: 0,
                                      tl: {
                                        hd: 1,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 5,
                                            tl: {
                                              hd: -1,
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("reverse", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 5,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 1,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.reverse({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("contains false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._3(Relude__Relude_List.containsBy, Relude__Relude_Int.eq, 10, {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("contains true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._3(Relude__Relude_List.containsBy, Relude__Relude_Int.eq, 3, {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: {
                                            hd: 4,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("indexOfBy failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._3(Relude__Relude_List.indexOfBy, Relude__Relude_Int.eq, 500, {
                                    hd: 0,
                                    tl: {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: {
                                          hd: 30,
                                          tl: {
                                            hd: 40,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("indexOfBy success", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._3(Relude__Relude_List.indexOfBy, Relude__Relude_Int.eq, 30, {
                                    hd: 0,
                                    tl: {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: {
                                          hd: 30,
                                          tl: {
                                            hd: 40,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("indexOf success", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._3(Relude__Relude_List.indexOf, Relude__Relude_Int.Eq, 30, {
                                    hd: 0,
                                    tl: {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: {
                                          hd: 30,
                                          tl: {
                                            hd: 40,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("indexOf failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._3(Relude__Relude_List.indexOf, Relude__Relude_Int.Eq, 500, {
                                    hd: 0,
                                    tl: {
                                      hd: 10,
                                      tl: {
                                        hd: 20,
                                        tl: {
                                          hd: 30,
                                          tl: {
                                            hd: 40,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("minBy empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_List.minBy, Relude__Relude_Int.Ord.compare, /* [] */0)));
              }));
        Jest.test("minBy one", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._2(Relude__Relude_List.minBy, Relude__Relude_Int.Ord.compare, {
                                    hd: 0,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("minBy many", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Curry._2(Relude__Relude_List.minBy, Relude__Relude_Int.Ord.compare, {
                                    hd: 3,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("min empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_List.min, Relude__Relude_String.Ord, /* [] */0)));
              }));
        Jest.test("min many", (function (param) {
                return Jest.Expect.toEqual("a", Jest.Expect.expect(Curry._2(Relude__Relude_List.min, Relude__Relude_String.Ord, {
                                    hd: "b",
                                    tl: {
                                      hd: "a",
                                      tl: {
                                        hd: "c",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("maxBy empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_List.maxBy, Relude__Relude_Int.Ord.compare, /* [] */0)));
              }));
        Jest.test("maxBy one", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._2(Relude__Relude_List.maxBy, Relude__Relude_Int.Ord.compare, {
                                    hd: 0,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("maxBy many", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._2(Relude__Relude_List.maxBy, Relude__Relude_Int.Ord.compare, {
                                    hd: 3,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("max empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_List.max, Relude__Relude_Int.Ord, /* [] */0)));
              }));
        Jest.test("max many", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._2(Relude__Relude_List.max, Relude__Relude_Int.Ord, {
                                    hd: 3,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("any empty", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_List.any, (function (a) {
                                      return a > 2;
                                    }), /* [] */0)));
              }));
        Jest.test("any true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_List.any, (function (a) {
                                      return a > 2;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("any false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_List.any, (function (a) {
                                      return a > 10;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("all empty", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_List.all, (function (a) {
                                      return a > 2;
                                    }), /* [] */0)));
              }));
        Jest.test("all true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_List.all, (function (a) {
                                      return a > -1;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("all false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_List.all, (function (a) {
                                      return a < 3;
                                    }), {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("removeFirstBy empty", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.removeFirstBy(Relude__Relude_Int.eq, 0, /* [] */0)));
              }));
        Jest.test("removeFirstBy single match", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.removeFirstBy(Relude__Relude_Int.eq, 0, {
                                    hd: 0,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("removeFirstBy single not a match", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_List.removeFirstBy(Relude__Relude_Int.eq, 0, {
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("removeFirstBy one match at beginning", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.removeFirstBy(Relude__Relude_Int.eq, 0, {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("removeFirstBy one match at end", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.removeFirstBy(Relude__Relude_Int.eq, 2, {
                                    hd: 0,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("removeFirstBy many matches", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 0,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.removeFirstBy(Relude__Relude_Int.eq, 0, {
                                    hd: 1,
                                    tl: {
                                      hd: 0,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 0,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("removeEachBy empty", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.removeEachBy(Relude__Relude_Int.eq, 0, /* [] */0)));
              }));
        Jest.test("removeEachBy single match", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.removeEachBy(Relude__Relude_Int.eq, 0, {
                                    hd: 0,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("removeEachBy single not a match", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_List.removeEachBy(Relude__Relude_Int.eq, 0, {
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("removeEachBy many matches removed", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 2,
                            tl: {
                              hd: 4,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.removeEachBy(Relude__Relude_Int.eq, 0, {
                                    hd: 0,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 0,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 0,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("replaceAt", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 100,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.replaceAt(2, 100, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("insertAt first", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 100,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.insertAt(0, 100, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("insertAt within range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 100,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.insertAt(2, 100, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("insertAt last", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: {
                                      hd: 100,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.insertAt(5, 100, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("insertAt out of range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.insertAt(6, 100, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("updateAt within range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 4,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.updateAt(2, (function (x) {
                                      return x + 1 | 0;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("updateAt out of range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.updateAt(6, (function (x) {
                                      return x + 1 | 0;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("swapAt within range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 5,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 1,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.swapAt(0, 4, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("swapAt out of range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.swapAt(0, 5, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("removeAt within range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 3,
                              tl: {
                                hd: 4,
                                tl: {
                                  hd: 5,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.removeAt(1, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("removeAt out of range", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.removeAt(5, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("distinctBy", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 6,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.distinctBy(Relude__Relude_Int.eq, {
                                    hd: 6,
                                    tl: {
                                      hd: 1,
                                      tl: {
                                        hd: 1,
                                        tl: {
                                          hd: 2,
                                          tl: {
                                            hd: 1,
                                            tl: {
                                              hd: 3,
                                              tl: {
                                                hd: 2,
                                                tl: {
                                                  hd: 3,
                                                  tl: {
                                                    hd: 2,
                                                    tl: {
                                                      hd: 4,
                                                      tl: {
                                                        hd: 5,
                                                        tl: {
                                                          hd: 5,
                                                          tl: /* [] */0
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("map", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 3,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 5,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.map(function (a) {
                                      return a + 2 | 0;
                                    })({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("apply", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 3,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 5,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 6,
                                    tl: {
                                      hd: 9,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.apply({
                                    hd: (function (a) {
                                        return a + 2 | 0;
                                      }),
                                    tl: {
                                      hd: (function (a) {
                                          return Math.imul(a, 3);
                                        }),
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("bind", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 2,
                                  tl: {
                                    hd: 3,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.bind({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, (function (a) {
                                      return {
                                              hd: a,
                                              tl: {
                                                hd: a,
                                                tl: /* [] */0
                                              }
                                            };
                                    }))));
              }));
        Jest.test("flatten", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: {
                                    hd: 5,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Curry._1(Relude__Relude_List.flatten, {
                                    hd: {
                                      hd: 1,
                                      tl: {
                                        hd: 2,
                                        tl: {
                                          hd: 3,
                                          tl: /* [] */0
                                        }
                                      }
                                    },
                                    tl: {
                                      hd: {
                                        hd: 4,
                                        tl: {
                                          hd: 5,
                                          tl: /* [] */0
                                        }
                                      },
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("fromArray", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.fromArray([
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        Jest.test("toArray", (function (param) {
                return Jest.Expect.toEqual([
                            1,
                            2,
                            3
                          ], Jest.Expect.expect(Relude__Relude_List.toArray({
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("eqBy returns true if list items are equal", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_List.eqBy(Relude__Relude_Int.eq, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("eqBy returns false if list items are not equal", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_List.eqBy(Relude__Relude_Int.eq, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 4,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("eqBy returns false if lists are of different sizes", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_List.eqBy(Relude__Relude_Int.eq, {
                                    hd: 1,
                                    tl: /* [] */0
                                  }, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("eq returns true if list items are equal", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Relude__Relude_List.eq(Relude__Relude_Int.Eq, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("eq returns false if list items are not equal", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Relude__Relude_List.eq(Relude__Relude_Int.Eq, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  }, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 4,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("mapOption keep all", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "1",
                            tl: {
                              hd: "2",
                              tl: {
                                hd: "3",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.mapOption((function (v) {
                                      return String(v);
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("mapOption keep none", (function (param) {
                return Jest.Expect.toEqual(/* [] */0, Jest.Expect.expect(Relude__Relude_List.mapOption((function (param) {
                                      
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("mapOption keep int", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.mapOption(Relude__Relude_String.toInt, {
                                    hd: "1",
                                    tl: {
                                      hd: "a",
                                      tl: {
                                        hd: "2",
                                        tl: {
                                          hd: "",
                                          tl: {
                                            hd: "3",
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("showBy", (function (param) {
                return Jest.Expect.toEqual("[1, 2, 3]", Jest.Expect.expect(Relude__Relude_List.showBy((function (prim) {
                                      return String(prim);
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("void", (function (param) {
                return Jest.Expect.toEqual({
                            hd: undefined,
                            tl: {
                              hd: undefined,
                              tl: {
                                hd: undefined,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Curry._1(Relude__Relude_List.$$void, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("flap", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 6,
                            tl: {
                              hd: 7,
                              tl: {
                                hd: 8,
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Curry._2(Relude__Relude_List.flap, {
                                    hd: (function (a) {
                                        return a + 1 | 0;
                                      }),
                                    tl: {
                                      hd: (function (a) {
                                          return a + 2 | 0;
                                        }),
                                      tl: {
                                        hd: (function (a) {
                                            return a + 3 | 0;
                                          }),
                                        tl: /* [] */0
                                      }
                                    }
                                  }, 5)));
              }));
        Jest.test("map2", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 4,
                            tl: {
                              hd: 5,
                              tl: {
                                hd: 5,
                                tl: {
                                  hd: 6,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Curry._3(Relude__Relude_List.map2, (function (a, b) {
                                      return a + b | 0;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 3,
                                    tl: {
                                      hd: 4,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("map3", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 14,
                            tl: {
                              hd: 24,
                              tl: {
                                hd: 15,
                                tl: {
                                  hd: 25,
                                  tl: {
                                    hd: 15,
                                    tl: {
                                      hd: 25,
                                      tl: {
                                        hd: 16,
                                        tl: {
                                          hd: 26,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Curry._4(Relude__Relude_List.map3, (function (a, b, c) {
                                      return (a + b | 0) + c | 0;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 3,
                                    tl: {
                                      hd: 4,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 10,
                                    tl: {
                                      hd: 20,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("map4", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 114,
                            tl: {
                              hd: 214,
                              tl: {
                                hd: 124,
                                tl: {
                                  hd: 224,
                                  tl: {
                                    hd: 115,
                                    tl: {
                                      hd: 215,
                                      tl: {
                                        hd: 125,
                                        tl: {
                                          hd: 225,
                                          tl: {
                                            hd: 115,
                                            tl: {
                                              hd: 215,
                                              tl: {
                                                hd: 125,
                                                tl: {
                                                  hd: 225,
                                                  tl: {
                                                    hd: 116,
                                                    tl: {
                                                      hd: 216,
                                                      tl: {
                                                        hd: 126,
                                                        tl: {
                                                          hd: 226,
                                                          tl: /* [] */0
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Curry._5(Relude__Relude_List.map4, (function (a, b, c, d) {
                                      return ((a + b | 0) + c | 0) + d | 0;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 3,
                                    tl: {
                                      hd: 4,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 10,
                                    tl: {
                                      hd: 20,
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: 100,
                                    tl: {
                                      hd: 200,
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("chunk", (function (param) {
                return Jest.Expect.toEqual({
                            hd: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: /* [] */0
                                }
                              }
                            },
                            tl: {
                              hd: {
                                hd: 4,
                                tl: {
                                  hd: 5,
                                  tl: {
                                    hd: 6,
                                    tl: /* [] */0
                                  }
                                }
                              },
                              tl: {
                                hd: {
                                  hd: 7,
                                  tl: {
                                    hd: 8,
                                    tl: {
                                      hd: 9,
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    hd: 10,
                                    tl: {
                                      hd: 11,
                                      tl: {
                                        hd: 12,
                                        tl: /* [] */0
                                      }
                                    }
                                  },
                                  tl: {
                                    hd: {
                                      hd: 13,
                                      tl: {
                                        hd: 14,
                                        tl: {
                                          hd: 15,
                                          tl: /* [] */0
                                        }
                                      }
                                    },
                                    tl: {
                                      hd: {
                                        hd: 16,
                                        tl: /* [] */0
                                      },
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List.chunk(3, {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: {
                                              hd: 6,
                                              tl: {
                                                hd: 7,
                                                tl: {
                                                  hd: 8,
                                                  tl: {
                                                    hd: 9,
                                                    tl: {
                                                      hd: 10,
                                                      tl: {
                                                        hd: 11,
                                                        tl: {
                                                          hd: 12,
                                                          tl: {
                                                            hd: 13,
                                                            tl: {
                                                              hd: 14,
                                                              tl: {
                                                                hd: 15,
                                                                tl: {
                                                                  hd: 16,
                                                                  tl: /* [] */0
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("List.Float.sum empty", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.Float.sum, /* [] */0)));
              }));
        Jest.test("List.Float.sum one", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.Float.sum, {
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("List.Float.sum many", (function (param) {
                return Jest.Expect.toEqual(9, Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.Float.sum, {
                                    hd: 1,
                                    tl: {
                                      hd: 3,
                                      tl: {
                                        hd: 5,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("countBy empty", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._2(Relude__Relude_List.countBy, (function (param) {
                                      return true;
                                    }), /* [] */0)));
              }));
        Jest.test("countBy", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._2(Relude__Relude_List.countBy, (function (v) {
                                      return v < 10;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 12,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 20,
                                          tl: {
                                            hd: 4,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.eq empties true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.eq(/* [] */0, /* [] */0)));
              }));
        Jest.test("String.eq same values true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.eq({
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("String.eq different values false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.eq({
                                    hd: "a",
                                    tl: {
                                      hd: "c",
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("String.eq different size false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.eq({
                                    hd: "a",
                                    tl: {
                                      hd: "c",
                                      tl: /* [] */0
                                    }
                                  }, {
                                    hd: "a",
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("String.min empty", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.$$String.min, /* [] */0)));
              }));
        Jest.test("String.min non-empty", (function (param) {
                return Jest.Expect.toEqual("bar", Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.$$String.min, {
                                    hd: "foo",
                                    tl: {
                                      hd: "bar",
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("String.max non-empty", (function (param) {
                return Jest.Expect.toEqual("c", Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.$$String.max, {
                                    hd: "b",
                                    tl: {
                                      hd: "a",
                                      tl: {
                                        hd: "c",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.contains empty", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$String.contains, "a", /* [] */0)));
              }));
        Jest.test("String.contains false", (function (param) {
                return Jest.Expect.toEqual(false, Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$String.contains, "a", {
                                    hd: "b",
                                    tl: {
                                      hd: "c",
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("String.contains true", (function (param) {
                return Jest.Expect.toEqual(true, Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$String.contains, "a", {
                                    hd: "b",
                                    tl: {
                                      hd: "c",
                                      tl: {
                                        hd: "a",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.indexOf missing", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$String.indexOf, "x", {
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: {
                                        hd: "c",
                                        tl: {
                                          hd: "d",
                                          tl: {
                                            hd: "e",
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.indexOf found", (function (param) {
                return Jest.Expect.toEqual(3, Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$String.indexOf, "d", {
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: {
                                        hd: "c",
                                        tl: {
                                          hd: "d",
                                          tl: {
                                            hd: "e",
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.distinct", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "foo",
                            tl: {
                              hd: "bar",
                              tl: {
                                hd: "baz",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.distinct({
                                    hd: "foo",
                                    tl: {
                                      hd: "bar",
                                      tl: {
                                        hd: "baz",
                                        tl: {
                                          hd: "bar",
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.removeFirst", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "b",
                              tl: {
                                hd: "c",
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.removeFirst("b", {
                                    hd: "b",
                                    tl: {
                                      hd: "a",
                                      tl: {
                                        hd: "b",
                                        tl: {
                                          hd: "c",
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.removeEach", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "c",
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.removeEach("b", {
                                    hd: "b",
                                    tl: {
                                      hd: "a",
                                      tl: {
                                        hd: "b",
                                        tl: {
                                          hd: "c",
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.sort", (function (param) {
                return Jest.Expect.toEqual({
                            hd: "a",
                            tl: {
                              hd: "b",
                              tl: {
                                hd: "c",
                                tl: {
                                  hd: "c",
                                  tl: {
                                    hd: "d",
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List_Specializations.$$String.sort({
                                    hd: "c",
                                    tl: {
                                      hd: "d",
                                      tl: {
                                        hd: "a",
                                        tl: {
                                          hd: "b",
                                          tl: {
                                            hd: "c",
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("String.join empty", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.$$String.join, /* [] */0)));
              }));
        Jest.test("String.join one", (function (param) {
                return Jest.Expect.toEqual("foo", Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.$$String.join, {
                                    hd: "foo",
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("String.join many", (function (param) {
                return Jest.Expect.toEqual("foobar", Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.$$String.join, {
                                    hd: "foo",
                                    tl: {
                                      hd: "bar",
                                      tl: /* [] */0
                                    }
                                  })));
              }));
        Jest.test("String.joinWith empty", (function (param) {
                return Jest.Expect.toEqual("", Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$String.joinWith, ", ", /* [] */0)));
              }));
        Jest.test("String.joinWith", (function (param) {
                return Jest.Expect.toEqual("a, b, c", Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$String.joinWith, ", ", {
                                    hd: "a",
                                    tl: {
                                      hd: "b",
                                      tl: {
                                        hd: "c",
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("Int.sum empty", (function (param) {
                return Jest.Expect.toEqual(0, Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.Int.sum, /* [] */0)));
              }));
        Jest.test("Int.sum one", (function (param) {
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.Int.sum, {
                                    hd: 1,
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("Int.sum many", (function (param) {
                return Jest.Expect.toEqual(9, Jest.Expect.expect(Curry._1(Relude__Relude_List_Specializations.Int.sum, {
                                    hd: 1,
                                    tl: {
                                      hd: 3,
                                      tl: {
                                        hd: 5,
                                        tl: /* [] */0
                                      }
                                    }
                                  })));
              }));
        Jest.test("Option.traverse success", (function (param) {
                return Jest.Expect.toEqual({
                            hd: 1,
                            tl: {
                              hd: 2,
                              tl: {
                                hd: 3,
                                tl: {
                                  hd: 4,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$Option.traverse, (function (a) {
                                      return a;
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("Option.traverse failure", (function (param) {
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Curry._2(Relude__Relude_List_Specializations.$$Option.traverse, (function (a) {
                                      if (a % 2 === 0) {
                                        return a;
                                      }
                                      
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("Validation.traverse success", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VOk */0,
                            _0: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(Relude__Relude_List_Specializations.Validation.traverse((function (a) {
                                      return {
                                              TAG: /* Ok */0,
                                              _0: a
                                            };
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.test("Validation.traverse failure", (function (param) {
                return Jest.Expect.toEqual({
                            TAG: /* VError */1,
                            _0: Relude__Relude_NonEmpty.List.make("1 is bad", {
                                  hd: "2 is bad",
                                  tl: {
                                    hd: "3 is bad",
                                    tl: {
                                      hd: "4 is bad",
                                      tl: {
                                        hd: "5 is bad",
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                })
                          }, Jest.Expect.expect(Relude__Relude_List_Specializations.Validation.traverse((function (a) {
                                      return {
                                              TAG: /* Error */1,
                                              _0: String(a) + " is bad"
                                            };
                                    }), {
                                    hd: 1,
                                    tl: {
                                      hd: 2,
                                      tl: {
                                        hd: 3,
                                        tl: {
                                          hd: 4,
                                          tl: {
                                            hd: 5,
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  })));
              }));
        Jest.testAsync("List.IO.sequence", undefined, (function (onDone) {
                var io1 = Relude__Relude_IO.pure(1);
                var io2 = Relude__Relude_IO.suspend(function (param) {
                      return 2;
                    });
                var io3 = Relude__Relude_IO.suspendIO(function (param) {
                      return Relude__Relude_IO.pure(3);
                    });
                var io4 = Relude__Relude_IO.async(function (onDone) {
                      setTimeout((function (param) {
                              Curry._1(onDone, {
                                    TAG: /* Ok */0,
                                    _0: 4
                                  });
                            }), 0);
                    });
                var io5 = Relude__Relude_IO.map((function (four) {
                        return four + 1 | 0;
                      }), io4);
                var io6 = Relude__Relude_IO.flatMap((function (four) {
                        return Relude__Relude_IO.pure(four + 2 | 0);
                      }), io4);
                var io7 = Relude__Relude_IO.flatMap((function (six) {
                        return Relude__Relude_IO.async(function (onDone) {
                                    Curry._1(onDone, {
                                          TAG: /* Ok */0,
                                          _0: six + 1 | 0
                                        });
                                  });
                      }), Relude__Relude_IO.flatMap((function (four) {
                            return Relude__Relude_IO.suspend(function (param) {
                                        return four + 2 | 0;
                                      });
                          }), io4));
                var io8 = Relude__Relude_IO.flatMap((function (seven) {
                        return Relude__Relude_Js_Promise.toIOLazy(function (param) {
                                    return Promise.resolve(seven + 1 | 0);
                                  });
                      }), io7);
                var io9 = Relude__Relude_IO.flip(Relude__Relude_IO.$$throw(9));
                var io10 = Relude__Relude_IO.flatMap((function (seven) {
                        return Relude__Relude_IO.suspend(function (param) {
                                    return seven + 3 | 0;
                                  });
                      }), Relude__Relude_IO.withDelay(0, Relude__Relude_IO.flip(Relude__Relude_IO.flip(Relude__Relude_IO.unsummonError(Relude__Relude_IO.summonError(io7))))));
                var ios_1 = {
                  hd: io2,
                  tl: {
                    hd: io3,
                    tl: {
                      hd: io4,
                      tl: {
                        hd: io5,
                        tl: {
                          hd: io6,
                          tl: {
                            hd: io7,
                            tl: {
                              hd: io8,
                              tl: {
                                hd: io9,
                                tl: {
                                  hd: io10,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                };
                var ios = {
                  hd: io1,
                  tl: ios_1
                };
                Relude__Relude_IO.unsafeRunAsync((function (param) {
                        if (param.TAG !== /* Ok */0) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match = param._0;
                        if (!match) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match.hd !== 1) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$1 = match.tl;
                        if (!match$1) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$1.hd !== 2) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$2 = match$1.tl;
                        if (!match$2) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$2.hd !== 3) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$3 = match$2.tl;
                        if (!match$3) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$3.hd !== 4) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$4 = match$3.tl;
                        if (!match$4) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$4.hd !== 5) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$5 = match$4.tl;
                        if (!match$5) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$5.hd !== 6) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$6 = match$5.tl;
                        if (!match$6) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$6.hd !== 7) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$7 = match$6.tl;
                        if (!match$7) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$7.hd !== 8) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$8 = match$7.tl;
                        if (!match$8) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        if (match$8.hd !== 9) {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                        var match$9 = match$8.tl;
                        if (match$9 && !(match$9.hd !== 10 || match$9.tl)) {
                          return Curry._1(onDone, Jest.pass);
                        } else {
                          return Curry._1(onDone, Jest.fail("fail"));
                        }
                      }), Relude__Relude_List_Specializations.IO.sequence(ios));
              }));
      }));

/*  Not a pure module */
