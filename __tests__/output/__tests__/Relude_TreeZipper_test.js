// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_List = require("relude/./Relude_List.js");
var Relude__Relude_Tree = require("relude/./Relude_Tree.js");
var Relude__Relude_Option = require("relude/./Relude_Option.js");
var Relude__Relude_TreeZipper = require("relude/./Relude_TreeZipper.js");

var testTree1 = Relude__Relude_Tree.make(1, {
      hd: Relude__Relude_Tree.make(2, {
            hd: Relude__Relude_Tree.make(21, {
                  hd: Relude__Relude_Tree.pure(211),
                  tl: {
                    hd: Relude__Relude_Tree.pure(212),
                    tl: /* [] */0
                  }
                }),
            tl: {
              hd: Relude__Relude_Tree.pure(22),
              tl: {
                hd: Relude__Relude_Tree.pure(23),
                tl: /* [] */0
              }
            }
          }),
      tl: {
        hd: Relude__Relude_Tree.make(3, {
              hd: Relude__Relude_Tree.make(31, {
                    hd: Relude__Relude_Tree.pure(311),
                    tl: /* [] */0
                  }),
              tl: /* [] */0
            }),
        tl: {
          hd: Relude__Relude_Tree.make(4, /* [] */0),
          tl: /* [] */0
        }
      }
    });

var testTree2 = Relude__Relude_Tree.make(1, {
      hd: Relude__Relude_Tree.make(2, {
            hd: Relude__Relude_Tree.make(21, {
                  hd: Relude__Relude_Tree.pure(211),
                  tl: {
                    hd: Relude__Relude_Tree.pure(212),
                    tl: {
                      hd: Relude__Relude_Tree.pure(213),
                      tl: /* [] */0
                    }
                  }
                }),
            tl: {
              hd: Relude__Relude_Tree.pure(22),
              tl: {
                hd: Relude__Relude_Tree.pure(23),
                tl: {
                  hd: Relude__Relude_Tree.make(24, {
                        hd: Relude__Relude_Tree.pure(241),
                        tl: {
                          hd: Relude__Relude_Tree.pure(242),
                          tl: {
                            hd: Relude__Relude_Tree.make(243, {
                                  hd: Relude__Relude_Tree.pure(2431),
                                  tl: {
                                    hd: Relude__Relude_Tree.pure(2432),
                                    tl: {
                                      hd: Relude__Relude_Tree.pure(2433),
                                      tl: /* [] */0
                                    }
                                  }
                                }),
                            tl: /* [] */0
                          }
                        }
                      }),
                  tl: /* [] */0
                }
              }
            }
          }),
      tl: {
        hd: Relude__Relude_Tree.pure(3),
        tl: {
          hd: Relude__Relude_Tree.pure(4),
          tl: {
            hd: Relude__Relude_Tree.make(5, {
                  hd: Relude__Relude_Tree.pure(51),
                  tl: {
                    hd: Relude__Relude_Tree.pure(52),
                    tl: {
                      hd: Relude__Relude_Tree.make(53, {
                            hd: Relude__Relude_Tree.pure(531),
                            tl: {
                              hd: Relude__Relude_Tree.pure(532),
                              tl: {
                                hd: Relude__Relude_Tree.pure(533),
                                tl: /* [] */0
                              }
                            }
                          }),
                      tl: /* [] */0
                    }
                  }
                }),
            tl: /* [] */0
          }
        }
      }
    });

Jest.describe("TreeZipper", (function (param) {
        Jest.test("pure", (function (param) {
                return Jest.Expect.toEqual({
                            ancestors: /* [] */0,
                            leftSiblings: /* [] */0,
                            focus: 42,
                            rightSiblings: /* [] */0,
                            children: /* [] */0
                          }, Jest.Expect.expect(Relude__Relude_TreeZipper.pure(42)));
              }));
        Jest.test("make", (function (param) {
                return Jest.Expect.toEqual({
                            ancestors: {
                              hd: [
                                {
                                  hd: Relude__Relude_Tree.pure(1),
                                  tl: /* [] */0
                                },
                                2,
                                {
                                  hd: Relude__Relude_Tree.pure(3),
                                  tl: /* [] */0
                                }
                              ],
                              tl: /* [] */0
                            },
                            leftSiblings: {
                              hd: Relude__Relude_Tree.pure(4),
                              tl: /* [] */0
                            },
                            focus: 5,
                            rightSiblings: {
                              hd: Relude__Relude_Tree.pure(6),
                              tl: /* [] */0
                            },
                            children: {
                              hd: Relude__Relude_Tree.pure(7),
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_TreeZipper.make({
                                    hd: [
                                      {
                                        hd: Relude__Relude_Tree.pure(1),
                                        tl: /* [] */0
                                      },
                                      2,
                                      {
                                        hd: Relude__Relude_Tree.pure(3),
                                        tl: /* [] */0
                                      }
                                    ],
                                    tl: /* [] */0
                                  }, {
                                    hd: Relude__Relude_Tree.pure(4),
                                    tl: /* [] */0
                                  }, 5, {
                                    hd: Relude__Relude_Tree.pure(6),
                                    tl: /* [] */0
                                  }, {
                                    hd: Relude__Relude_Tree.pure(7),
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("makeWithLabels", (function (param) {
                return Jest.Expect.toEqual({
                            ancestors: {
                              hd: [
                                {
                                  hd: Relude__Relude_Tree.pure(1),
                                  tl: /* [] */0
                                },
                                2,
                                {
                                  hd: Relude__Relude_Tree.pure(3),
                                  tl: /* [] */0
                                }
                              ],
                              tl: /* [] */0
                            },
                            leftSiblings: {
                              hd: Relude__Relude_Tree.pure(4),
                              tl: /* [] */0
                            },
                            focus: 5,
                            rightSiblings: {
                              hd: Relude__Relude_Tree.pure(6),
                              tl: /* [] */0
                            },
                            children: {
                              hd: Relude__Relude_Tree.pure(7),
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(Relude__Relude_TreeZipper.makeWithLabels({
                                    hd: [
                                      {
                                        hd: Relude__Relude_Tree.pure(1),
                                        tl: /* [] */0
                                      },
                                      2,
                                      {
                                        hd: Relude__Relude_Tree.pure(3),
                                        tl: /* [] */0
                                      }
                                    ],
                                    tl: /* [] */0
                                  }, {
                                    hd: Relude__Relude_Tree.pure(4),
                                    tl: /* [] */0
                                  }, 5, {
                                    hd: Relude__Relude_Tree.pure(6),
                                    tl: /* [] */0
                                  }, {
                                    hd: Relude__Relude_Tree.pure(7),
                                    tl: /* [] */0
                                  })));
              }));
        Jest.test("fromTree", (function (param) {
                var actual = Relude__Relude_TreeZipper.fromTree(testTree1);
                var expected_focus = Relude__Relude_Tree.getValue(testTree1);
                var expected_children = Relude__Relude_Tree.getChildren(testTree1);
                var expected = {
                  ancestors: /* [] */0,
                  leftSiblings: /* [] */0,
                  focus: expected_focus,
                  rightSiblings: /* [] */0,
                  children: expected_children
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("getAncestors", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.getAncestors, Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  hd: [
                    /* [] */0,
                    21,
                    {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  ],
                  tl: {
                    hd: [
                      /* [] */0,
                      2,
                      {
                        hd: Relude__Relude_Tree.make(3, {
                              hd: Relude__Relude_Tree.make(31, {
                                    hd: Relude__Relude_Tree.pure(311),
                                    tl: /* [] */0
                                  }),
                              tl: /* [] */0
                            }),
                        tl: {
                          hd: Relude__Relude_Tree.pure(4),
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* [] */0,
                        1,
                        /* [] */0
                      ],
                      tl: /* [] */0
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("getFocusValue", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.getFocusValue, Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree1)));
                return Jest.Expect.toEqual(211, Jest.Expect.expect(actual));
              }));
        Jest.test("tapFocusValue", (function (param) {
                var r = {
                  contents: undefined
                };
                Relude__Relude_TreeZipper.tapFocusValue((function (a) {
                        r.contents = a;
                      }), Relude__Relude_TreeZipper.fromTree(testTree1));
                var actual = r.contents;
                return Jest.Expect.toEqual(1, Jest.Expect.expect(actual));
              }));
        Jest.test("setFocusValue", (function (param) {
                var actual = Relude__Relude_Option.map((function (param) {
                        return Relude__Relude_TreeZipper.setFocusValue(42, param);
                      }), Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      21,
                      {
                        hd: Relude__Relude_Tree.pure(22),
                        tl: {
                          hd: Relude__Relude_Tree.pure(23),
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* [] */0,
                        2,
                        {
                          hd: Relude__Relude_Tree.make(3, {
                                hd: Relude__Relude_Tree.make(31, {
                                      hd: Relude__Relude_Tree.pure(311),
                                      tl: /* [] */0
                                    }),
                                tl: /* [] */0
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(4),
                            tl: /* [] */0
                          }
                        }
                      ],
                      tl: {
                        hd: [
                          /* [] */0,
                          1,
                          /* [] */0
                        ],
                        tl: /* [] */0
                      }
                    }
                  },
                  leftSiblings: /* [] */0,
                  focus: 42,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.pure(212),
                    tl: /* [] */0
                  },
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("modifyFocusValue", (function (param) {
                var actual = Relude__Relude_Option.map((function (param) {
                        return Relude__Relude_TreeZipper.modifyFocusValue((function (a) {
                                      return a + 42 | 0;
                                    }), param);
                      }), Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      21,
                      {
                        hd: Relude__Relude_Tree.pure(22),
                        tl: {
                          hd: Relude__Relude_Tree.pure(23),
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* [] */0,
                        2,
                        {
                          hd: Relude__Relude_Tree.make(3, {
                                hd: Relude__Relude_Tree.make(31, {
                                      hd: Relude__Relude_Tree.pure(311),
                                      tl: /* [] */0
                                    }),
                                tl: /* [] */0
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(4),
                            tl: /* [] */0
                          }
                        }
                      ],
                      tl: {
                        hd: [
                          /* [] */0,
                          1,
                          /* [] */0
                        ],
                        tl: /* [] */0
                      }
                    }
                  },
                  leftSiblings: /* [] */0,
                  focus: 253,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.pure(212),
                    tl: /* [] */0
                  },
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("getFocusTree", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.getFocusTree, Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  value: 3,
                  children: {
                    hd: Relude__Relude_Tree.make(31, {
                          hd: Relude__Relude_Tree.pure(311),
                          tl: /* [] */0
                        }),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("getLeftSiblings", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.getLeftSiblings, Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                            return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                          }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  hd: Relude__Relude_Tree.make(3, {
                        hd: Relude__Relude_Tree.make(31, {
                              hd: Relude__Relude_Tree.pure(311),
                              tl: /* [] */0
                            }),
                        tl: /* [] */0
                      }),
                  tl: {
                    hd: Relude__Relude_Tree.make(2, {
                          hd: Relude__Relude_Tree.make(21, {
                                hd: Relude__Relude_Tree.pure(211),
                                tl: {
                                  hd: Relude__Relude_Tree.pure(212),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(22),
                            tl: {
                              hd: Relude__Relude_Tree.pure(23),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("getLeftSiblingsInOrder", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.getLeftSiblingsInOrder, Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                            return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                          }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  hd: Relude__Relude_Tree.make(2, {
                        hd: Relude__Relude_Tree.make(21, {
                              hd: Relude__Relude_Tree.pure(211),
                              tl: {
                                hd: Relude__Relude_Tree.pure(212),
                                tl: /* [] */0
                              }
                            }),
                        tl: {
                          hd: Relude__Relude_Tree.pure(22),
                          tl: {
                            hd: Relude__Relude_Tree.pure(23),
                            tl: /* [] */0
                          }
                        }
                      }),
                  tl: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("setLeftSiblings", (function (param) {
                var partial_arg_0 = Relude__Relude_Tree.pure(42);
                var partial_arg_1 = {
                  hd: Relude__Relude_Tree.pure(43),
                  tl: /* [] */0
                };
                var partial_arg = {
                  hd: partial_arg_0,
                  tl: partial_arg_1
                };
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.setLeftSiblings(partial_arg, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.pure(42),
                    tl: {
                      hd: Relude__Relude_Tree.pure(43),
                      tl: /* [] */0
                    }
                  },
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("setLeftSiblingsFromInOrder", (function (param) {
                var partial_arg_0 = Relude__Relude_Tree.pure(43);
                var partial_arg_1 = {
                  hd: Relude__Relude_Tree.pure(42),
                  tl: /* [] */0
                };
                var partial_arg = {
                  hd: partial_arg_0,
                  tl: partial_arg_1
                };
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.setLeftSiblingsFromInOrder(partial_arg, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.pure(42),
                    tl: {
                      hd: Relude__Relude_Tree.pure(43),
                      tl: /* [] */0
                    }
                  },
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("getRightSiblings", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.getRightSiblings, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  hd: Relude__Relude_Tree.make(3, {
                        hd: Relude__Relude_Tree.make(31, {
                              hd: Relude__Relude_Tree.pure(311),
                              tl: /* [] */0
                            }),
                        tl: /* [] */0
                      }),
                  tl: {
                    hd: Relude__Relude_Tree.pure(4),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("setRightSiblings", (function (param) {
                var partial_arg_0 = Relude__Relude_Tree.pure(42);
                var partial_arg_1 = {
                  hd: Relude__Relude_Tree.pure(43),
                  tl: /* [] */0
                };
                var partial_arg = {
                  hd: partial_arg_0,
                  tl: partial_arg_1
                };
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.setRightSiblings(partial_arg, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.pure(42),
                    tl: {
                      hd: Relude__Relude_Tree.pure(43),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("getChildren", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.getChildren, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  hd: Relude__Relude_Tree.make(21, {
                        hd: Relude__Relude_Tree.pure(211),
                        tl: {
                          hd: Relude__Relude_Tree.pure(212),
                          tl: /* [] */0
                        }
                      }),
                  tl: {
                    hd: Relude__Relude_Tree.pure(22),
                    tl: {
                      hd: Relude__Relude_Tree.pure(23),
                      tl: /* [] */0
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("setChildren", (function (param) {
                var actual = Relude__Relude_TreeZipper.setChildren({
                      hd: Relude__Relude_Tree.pure(42),
                      tl: {
                        hd: Relude__Relude_Tree.pure(43),
                        tl: /* [] */0
                      }
                    }, Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected_children = {
                  hd: Relude__Relude_Tree.pure(42),
                  tl: {
                    hd: Relude__Relude_Tree.pure(43),
                    tl: /* [] */0
                  }
                };
                var expected = {
                  ancestors: /* [] */0,
                  leftSiblings: /* [] */0,
                  focus: 1,
                  rightSiblings: /* [] */0,
                  children: expected_children
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveLeft None", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveLeft(Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(actual));
              }));
        Jest.test("moveLeft", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveLeft, Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveLeftWithClamp", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveLeftWithClamp(Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveLeftToStart", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.moveLeftToStart, Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                            return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                          }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveLeftTimes", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveLeftTimes(2, param);
                      }), Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                            return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                          }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveLeftTimes negative", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveLeftTimes(-1, Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(actual));
              }));
        Jest.test("moveLeftTimesWithClamp", (function (param) {
                var actual = Relude__Relude_Option.map((function (param) {
                        return Relude__Relude_TreeZipper.moveLeftTimesWithClamp(5, param);
                      }), Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                            return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                          }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveRight None", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveRight(Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(actual));
              }));
        Jest.test("moveRight", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make(2, {
                          hd: Relude__Relude_Tree.make(21, {
                                hd: Relude__Relude_Tree.pure(211),
                                tl: {
                                  hd: Relude__Relude_Tree.pure(212),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(22),
                            tl: {
                              hd: Relude__Relude_Tree.pure(23),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: /* [] */0
                  },
                  focus: 3,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(4, /* [] */0),
                    tl: /* [] */0
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(31, {
                          hd: Relude__Relude_Tree.pure(311),
                          tl: /* [] */0
                        }),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveRightWithClamp", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveRightWithClamp(Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveRightTimes", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(2, {
                            hd: Relude__Relude_Tree.make(21, {
                                  hd: Relude__Relude_Tree.pure(211),
                                  tl: {
                                    hd: Relude__Relude_Tree.pure(212),
                                    tl: /* [] */0
                                  }
                                }),
                            tl: {
                              hd: Relude__Relude_Tree.pure(22),
                              tl: {
                                hd: Relude__Relude_Tree.pure(23),
                                tl: /* [] */0
                              }
                            }
                          }),
                      tl: /* [] */0
                    }
                  },
                  focus: 4,
                  rightSiblings: /* [] */0,
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveRightTimes negative", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveRightTimes(-1, Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(actual));
              }));
        Jest.test("moveRightTimesWithClamp", (function (param) {
                var actual = Relude__Relude_Option.map((function (param) {
                        return Relude__Relude_TreeZipper.moveRightTimesWithClamp(4, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(2, {
                            hd: Relude__Relude_Tree.make(21, {
                                  hd: Relude__Relude_Tree.pure(211),
                                  tl: {
                                    hd: Relude__Relude_Tree.pure(212),
                                    tl: /* [] */0
                                  }
                                }),
                            tl: {
                              hd: Relude__Relude_Tree.pure(22),
                              tl: {
                                hd: Relude__Relude_Tree.pure(23),
                                tl: /* [] */0
                              }
                            }
                          }),
                      tl: /* [] */0
                    }
                  },
                  focus: 4,
                  rightSiblings: /* [] */0,
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveRightToEnd", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.moveRightToEnd, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(2, {
                            hd: Relude__Relude_Tree.make(21, {
                                  hd: Relude__Relude_Tree.pure(211),
                                  tl: {
                                    hd: Relude__Relude_Tree.pure(212),
                                    tl: /* [] */0
                                  }
                                }),
                            tl: {
                              hd: Relude__Relude_Tree.pure(22),
                              tl: {
                                hd: Relude__Relude_Tree.pure(23),
                                tl: /* [] */0
                              }
                            }
                          }),
                      tl: /* [] */0
                    }
                  },
                  focus: 4,
                  rightSiblings: /* [] */0,
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveUp None", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveUp(Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(actual));
              }));
        Jest.test("moveUpWithClamp", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveUpWithClamp(Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveUpTimes", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveUpTimes(2, param);
                      }), Relude__Relude_TreeZipper.moveDownTimes(2, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveUpTimes negative", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveUpTimes(-1, Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(actual));
              }));
        Jest.test("moveUpTimesWithClamp", (function (param) {
                var actual = Relude__Relude_Option.map((function (param) {
                        return Relude__Relude_TreeZipper.moveUpTimesWithClamp(5, param);
                      }), Relude__Relude_TreeZipper.moveDownTimes(2, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveUpToTop", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.moveUpToTop, Relude__Relude_TreeZipper.moveDownTimes(2, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveUpToTop maintains structure", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.moveUpToTop, Relude__Relude_TreeZipper.moveBy({
                          hd: {
                            NAME: "Down",
                            VAL: 2
                          },
                          tl: {
                            hd: {
                              NAME: "Right",
                              VAL: 2
                            },
                            tl: /* [] */0
                          }
                        }, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveDown", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveDownWithClamp", (function (param) {
                var actual = Relude__Relude_Option.map(Relude__Relude_TreeZipper.moveDownWithClamp, Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      21,
                      {
                        hd: Relude__Relude_Tree.pure(22),
                        tl: {
                          hd: Relude__Relude_Tree.pure(23),
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* [] */0,
                        2,
                        {
                          hd: Relude__Relude_Tree.make(3, {
                                hd: Relude__Relude_Tree.make(31, {
                                      hd: Relude__Relude_Tree.pure(311),
                                      tl: /* [] */0
                                    }),
                                tl: /* [] */0
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(4),
                            tl: /* [] */0
                          }
                        }
                      ],
                      tl: {
                        hd: [
                          /* [] */0,
                          1,
                          /* [] */0
                        ],
                        tl: /* [] */0
                      }
                    }
                  },
                  leftSiblings: /* [] */0,
                  focus: 211,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.pure(212),
                    tl: /* [] */0
                  },
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveDownToBottom", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveDownToBottom(Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected_ancestors = {
                  hd: [
                    /* [] */0,
                    21,
                    {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  ],
                  tl: {
                    hd: [
                      /* [] */0,
                      2,
                      {
                        hd: Relude__Relude_Tree.make(3, {
                              hd: Relude__Relude_Tree.make(31, {
                                    hd: Relude__Relude_Tree.pure(311),
                                    tl: /* [] */0
                                  }),
                              tl: /* [] */0
                            }),
                        tl: {
                          hd: Relude__Relude_Tree.pure(4),
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* [] */0,
                        1,
                        /* [] */0
                      ],
                      tl: /* [] */0
                    }
                  }
                };
                var expected_rightSiblings = {
                  hd: Relude__Relude_Tree.pure(212),
                  tl: /* [] */0
                };
                var expected = {
                  ancestors: expected_ancestors,
                  leftSiblings: /* [] */0,
                  focus: 211,
                  rightSiblings: expected_rightSiblings,
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveDownTimes", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      21,
                      {
                        hd: Relude__Relude_Tree.pure(22),
                        tl: {
                          hd: Relude__Relude_Tree.pure(23),
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* [] */0,
                        2,
                        {
                          hd: Relude__Relude_Tree.make(3, {
                                hd: Relude__Relude_Tree.make(31, {
                                      hd: Relude__Relude_Tree.pure(311),
                                      tl: /* [] */0
                                    }),
                                tl: /* [] */0
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(4),
                            tl: /* [] */0
                          }
                        }
                      ],
                      tl: {
                        hd: [
                          /* [] */0,
                          1,
                          /* [] */0
                        ],
                        tl: /* [] */0
                      }
                    }
                  },
                  leftSiblings: /* [] */0,
                  focus: 211,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.pure(212),
                    tl: /* [] */0
                  },
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveDownTimes negative", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveDownTimes(-1, Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(undefined, Jest.Expect.expect(actual));
              }));
        Jest.test("moveDownTimesWithClamp", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveDownTimesWithClamp(5, Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected_ancestors = {
                  hd: [
                    /* [] */0,
                    21,
                    {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  ],
                  tl: {
                    hd: [
                      /* [] */0,
                      2,
                      {
                        hd: Relude__Relude_Tree.make(3, {
                              hd: Relude__Relude_Tree.make(31, {
                                    hd: Relude__Relude_Tree.pure(311),
                                    tl: /* [] */0
                                  }),
                              tl: /* [] */0
                            }),
                        tl: {
                          hd: Relude__Relude_Tree.pure(4),
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* [] */0,
                        1,
                        /* [] */0
                      ],
                      tl: /* [] */0
                    }
                  }
                };
                var expected_rightSiblings = {
                  hd: Relude__Relude_Tree.pure(212),
                  tl: /* [] */0
                };
                var expected = {
                  ancestors: expected_ancestors,
                  leftSiblings: /* [] */0,
                  focus: 211,
                  rightSiblings: expected_rightSiblings,
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("moveBy", (function (param) {
                var actual = Relude__Relude_TreeZipper.moveBy({
                      hd: {
                        NAME: "Down",
                        VAL: 1
                      },
                      tl: {
                        hd: {
                          NAME: "Right",
                          VAL: 1
                        },
                        tl: {
                          hd: {
                            NAME: "Left",
                            VAL: 1
                          },
                          tl: {
                            hd: {
                              NAME: "Up",
                              VAL: 1
                            },
                            tl: {
                              hd: {
                                NAME: "DownWithClamp",
                                VAL: 1
                              },
                              tl: {
                                hd: {
                                  NAME: "RightWithClamp",
                                  VAL: 1
                                },
                                tl: {
                                  hd: {
                                    NAME: "LeftWithClamp",
                                    VAL: 1
                                  },
                                  tl: {
                                    hd: {
                                      NAME: "UpWithClamp",
                                      VAL: 1
                                    },
                                    tl: {
                                      hd: "DownToBottom",
                                      tl: {
                                        hd: "UpToTop",
                                        tl: {
                                          hd: "RightToEnd",
                                          tl: {
                                            hd: "LeftToStart",
                                            tl: {
                                              hd: {
                                                NAME: "Down",
                                                VAL: 1
                                              },
                                              tl: {
                                                hd: {
                                                  NAME: "Right",
                                                  VAL: 1
                                                },
                                                tl: {
                                                  hd: {
                                                    NAME: "Down",
                                                    VAL: 1
                                                  },
                                                  tl: /* [] */0
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }, Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveDown, Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("foldBy", (function (param) {
                var actual = Relude__Relude_TreeZipper.foldBy({
                      hd: {
                        NAME: "Down",
                        VAL: 1
                      },
                      tl: {
                        hd: {
                          NAME: "Right",
                          VAL: 1
                        },
                        tl: {
                          hd: {
                            NAME: "Left",
                            VAL: 1
                          },
                          tl: {
                            hd: {
                              NAME: "Up",
                              VAL: 1
                            },
                            tl: {
                              hd: {
                                NAME: "DownWithClamp",
                                VAL: 1
                              },
                              tl: {
                                hd: {
                                  NAME: "RightWithClamp",
                                  VAL: 1
                                },
                                tl: {
                                  hd: {
                                    NAME: "LeftWithClamp",
                                    VAL: 1
                                  },
                                  tl: {
                                    hd: {
                                      NAME: "UpWithClamp",
                                      VAL: 1
                                    },
                                    tl: {
                                      hd: "DownToBottom",
                                      tl: {
                                        hd: "UpToTop",
                                        tl: {
                                          hd: "RightToEnd",
                                          tl: {
                                            hd: "LeftToStart",
                                            tl: {
                                              hd: {
                                                NAME: "Down",
                                                VAL: 1
                                              },
                                              tl: {
                                                hd: {
                                                  NAME: "Right",
                                                  VAL: 1
                                                },
                                                tl: {
                                                  hd: {
                                                    NAME: "Down",
                                                    VAL: 1
                                                  },
                                                  tl: /* [] */0
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }, (function (l, v) {
                        return Relude__Relude_List.append(v, l);
                      }), /* [] */0, Relude__Relude_TreeZipper.fromTree(testTree1));
                var expectedZipper = Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveDown, Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                return Jest.Expect.toEqual(Relude__Relude_Option.map((function (z) {
                                  return [
                                          z,
                                          {
                                            hd: 2,
                                            tl: {
                                              hd: 3,
                                              tl: {
                                                hd: 2,
                                                tl: {
                                                  hd: 1,
                                                  tl: {
                                                    hd: 2,
                                                    tl: {
                                                      hd: 3,
                                                      tl: {
                                                        hd: 2,
                                                        tl: {
                                                          hd: 1,
                                                          tl: {
                                                            hd: 211,
                                                            tl: {
                                                              hd: 1,
                                                              tl: {
                                                                hd: 1,
                                                                tl: {
                                                                  hd: 1,
                                                                  tl: {
                                                                    hd: 2,
                                                                    tl: {
                                                                      hd: 3,
                                                                      tl: {
                                                                        hd: 31,
                                                                        tl: /* [] */0
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ];
                                }), expectedZipper), Jest.Expect.expect(actual));
              }));
        Jest.test("map", (function (param) {
                var actual = Relude__Relude_Option.map((function (param) {
                        return Relude__Relude_TreeZipper.map((function (prim) {
                                      return String(prim);
                                    }), param);
                      }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      "1",
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make("2", {
                          hd: Relude__Relude_Tree.make("21", {
                                hd: Relude__Relude_Tree.pure("211"),
                                tl: {
                                  hd: Relude__Relude_Tree.pure("212"),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure("22"),
                            tl: {
                              hd: Relude__Relude_Tree.pure("23"),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: /* [] */0
                  },
                  focus: "3",
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make("4", /* [] */0),
                    tl: /* [] */0
                  },
                  children: {
                    hd: Relude__Relude_Tree.make("31", {
                          hd: Relude__Relude_Tree.pure("311"),
                          tl: /* [] */0
                        }),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("findInFocus", (function (param) {
                var actual = Relude__Relude_TreeZipper.findInFocus((function (a) {
                        return a === 1;
                      }), Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = Relude__Relude_Option.pure(Relude__Relude_TreeZipper.fromTree(testTree1));
                var actual2 = Relude__Relude_TreeZipper.findInFocus((function (a) {
                        return a === 0;
                      }), Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual([
                            expected,
                            undefined
                          ], Jest.Expect.expect([
                                actual,
                                actual2
                              ]));
              }));
        Jest.test("findInFocusAndChildren", (function (param) {
                var a = Relude__Relude_TreeZipper.findInFocusAndChildren((function (a) {
                        return a === 213;
                      }), Relude__Relude_TreeZipper.fromTree(testTree2));
                var e = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                      }), Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree2)));
                var a2 = Relude__Relude_TreeZipper.findInFocusAndChildren((function (a) {
                        return a === 2433;
                      }), Relude__Relude_TreeZipper.fromTree(testTree2));
                var e2 = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                      }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveDown, Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                              }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveDown, Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                        return Relude__Relude_TreeZipper.moveRightTimes(3, param);
                                      }), Relude__Relude_TreeZipper.moveDownTimes(2, Relude__Relude_TreeZipper.fromTree(testTree2)))))));
                var a3 = Relude__Relude_TreeZipper.findInFocusAndChildren((function (a) {
                        return a === 533;
                      }), Relude__Relude_TreeZipper.fromTree(testTree2));
                var e3 = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                      }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveDown, Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                              }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveDown, Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                                        return Relude__Relude_TreeZipper.moveRightTimes(3, param);
                                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree2)))))));
                return Jest.Expect.toEqual([
                            e,
                            e2,
                            e3
                          ], Jest.Expect.expect([
                                a,
                                a2,
                                a3
                              ]));
              }));
        Jest.test("findLeft", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.findLeft(undefined, (function (a) {
                                      return a === 2;
                                    }), param);
                      }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("findRight", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.findRight(undefined, (function (a) {
                                      return a === 4;
                                    }), param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveRightTimes(2, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("findUp", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.findUp((function (a) {
                                      return a === 1;
                                    }), param);
                      }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDownTimes(3, Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = Relude__Relude_TreeZipper.fromTree(testTree1);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("findDown", (function (param) {
                var actual = Relude__Relude_TreeZipper.findDown((function (a) {
                        return a === 311;
                      }), Relude__Relude_TreeZipper.fromTree(testTree1));
                var expected = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveDownTimes(2, param);
                      }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("find", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.find((function (a) {
                                      return a === 311;
                                    }), param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.moveDownTimes(2, param);
                      }), Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("insertTreeWithPushLeft", (function (param) {
                var partial_arg = Relude__Relude_Tree.make(42, {
                      hd: Relude__Relude_Tree.pure(43),
                      tl: /* [] */0
                    });
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.insertTreeWithPushLeft(partial_arg, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make(2, {
                          hd: Relude__Relude_Tree.make(21, {
                                hd: Relude__Relude_Tree.pure(211),
                                tl: {
                                  hd: Relude__Relude_Tree.pure(212),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(22),
                            tl: {
                              hd: Relude__Relude_Tree.pure(23),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: /* [] */0
                  },
                  focus: 42,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.pure(43),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("insertWithPushLeft", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.insertWithPushLeft(42, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make(2, {
                          hd: Relude__Relude_Tree.make(21, {
                                hd: Relude__Relude_Tree.pure(211),
                                tl: {
                                  hd: Relude__Relude_Tree.pure(212),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(22),
                            tl: {
                              hd: Relude__Relude_Tree.pure(23),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: /* [] */0
                  },
                  focus: 42,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(3, {
                          hd: Relude__Relude_Tree.make(31, {
                                hd: Relude__Relude_Tree.pure(311),
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(4, /* [] */0),
                      tl: /* [] */0
                    }
                  },
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("insertTreeWithPushRight", (function (param) {
                var partial_arg = Relude__Relude_Tree.make(42, {
                      hd: Relude__Relude_Tree.pure(43),
                      tl: /* [] */0
                    });
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.insertTreeWithPushRight(partial_arg, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 42,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(2, {
                          hd: Relude__Relude_Tree.make(21, {
                                hd: Relude__Relude_Tree.pure(211),
                                tl: {
                                  hd: Relude__Relude_Tree.pure(212),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(22),
                            tl: {
                              hd: Relude__Relude_Tree.pure(23),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(3, {
                            hd: Relude__Relude_Tree.make(31, {
                                  hd: Relude__Relude_Tree.pure(311),
                                  tl: /* [] */0
                                }),
                            tl: /* [] */0
                          }),
                      tl: {
                        hd: Relude__Relude_Tree.make(4, /* [] */0),
                        tl: /* [] */0
                      }
                    }
                  },
                  children: {
                    hd: Relude__Relude_Tree.pure(43),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("insertWithPushRight", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, (function (param) {
                        return Relude__Relude_TreeZipper.insertWithPushRight(42, param);
                      }), Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 42,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(2, {
                          hd: Relude__Relude_Tree.make(21, {
                                hd: Relude__Relude_Tree.pure(211),
                                tl: {
                                  hd: Relude__Relude_Tree.pure(212),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(22),
                            tl: {
                              hd: Relude__Relude_Tree.pure(23),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.make(3, {
                            hd: Relude__Relude_Tree.make(31, {
                                  hd: Relude__Relude_Tree.pure(311),
                                  tl: /* [] */0
                                }),
                            tl: /* [] */0
                          }),
                      tl: {
                        hd: Relude__Relude_Tree.make(4, /* [] */0),
                        tl: /* [] */0
                      }
                    }
                  },
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("deleteWithPullLeft", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.deleteWithPullLeft, Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 2,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.make(4, /* [] */0),
                    tl: /* [] */0
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(21, {
                          hd: Relude__Relude_Tree.pure(211),
                          tl: {
                            hd: Relude__Relude_Tree.pure(212),
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: Relude__Relude_Tree.pure(22),
                      tl: {
                        hd: Relude__Relude_Tree.pure(23),
                        tl: /* [] */0
                      }
                    }
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("deleteWithPullRight", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.deleteWithPullRight, Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.moveRight, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1))));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: {
                    hd: Relude__Relude_Tree.make(2, {
                          hd: Relude__Relude_Tree.make(21, {
                                hd: Relude__Relude_Tree.pure(211),
                                tl: {
                                  hd: Relude__Relude_Tree.pure(212),
                                  tl: /* [] */0
                                }
                              }),
                          tl: {
                            hd: Relude__Relude_Tree.pure(22),
                            tl: {
                              hd: Relude__Relude_Tree.pure(23),
                              tl: /* [] */0
                            }
                          }
                        }),
                    tl: /* [] */0
                  },
                  focus: 4,
                  rightSiblings: /* [] */0,
                  children: /* [] */0
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
        Jest.test("delete", (function (param) {
                var actual = Curry._2(Relude__Relude_Option.flatMap, Relude__Relude_TreeZipper.$$delete, Relude__Relude_TreeZipper.moveDown(Relude__Relude_TreeZipper.fromTree(testTree1)));
                var expected = {
                  ancestors: {
                    hd: [
                      /* [] */0,
                      1,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  },
                  leftSiblings: /* [] */0,
                  focus: 3,
                  rightSiblings: {
                    hd: Relude__Relude_Tree.pure(4),
                    tl: /* [] */0
                  },
                  children: {
                    hd: Relude__Relude_Tree.make(31, {
                          hd: Relude__Relude_Tree.pure(311),
                          tl: /* [] */0
                        }),
                    tl: /* [] */0
                  }
                };
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(actual));
              }));
      }));

exports.testTree1 = testTree1;
exports.testTree2 = testTree2;
/* testTree1 Not a pure module */
