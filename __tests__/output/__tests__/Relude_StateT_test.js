// Generated by Melange
'use strict';

var Jest = require("../node_modules/@glennsl/bs-jest/src/jest.js");
var Curry = require("melange.runtime/curry.js");
var Relude__Relude_StateT = require("relude/./Relude_StateT.js");

var State = Relude__Relude_StateT.State.WithState({});

var $less$$great = State.Infix.$less$$great;

var $$great = State.Infix.$$great;

var $less$$$great = State.Infix.$less$$$great;

var $star$great = State.Infix.$star$great;

var $great$great$eq = State.Infix.$great$great$eq;

function push(x) {
  return Curry._2($$great, Relude__Relude_StateT.State.modify(function (xs) {
                  return {
                          hd: x,
                          tl: xs
                        };
                }), x);
}

var pop = Curry._2($great$great$eq, State.get, (function (values) {
        if (values) {
          return Curry._2($$great, Curry._1(State.put, values.tl), values.hd);
        } else {
          return Curry._2($$great, Curry._1(State.put, /* [] */0), undefined);
        }
      }));

var Stack = {
  push: push,
  pop: pop
};

Jest.describe("StateT", (function (param) {
        Jest.test("pure", (function (param) {
                var result = Curry._2(State.runStateT, /* [] */0, Curry._1(State.pure, 2));
                return Jest.Expect.toEqual([
                            2,
                            /* [] */0
                          ], Jest.Expect.expect(result));
              }));
        Jest.test("put", (function (param) {
                var result = Curry._2(State.runStateT, /* [] */0, Curry._2($great$great$eq, Curry._1(State.pure, 2), (function (a) {
                            return Curry._2($$great, Curry._1(State.put, {
                                            hd: a,
                                            tl: /* [] */0
                                          }), a);
                          })));
                return Jest.Expect.toEqual([
                            2,
                            {
                              hd: 2,
                              tl: /* [] */0
                            }
                          ], Jest.Expect.expect(result));
              }));
        Jest.test("stack example 1 (push)", (function (param) {
                var result = Curry._2(State.runStateT, /* [] */0, Curry._2($great$great$eq, push(1), (function (param) {
                            return push(2);
                          })));
                return Jest.Expect.toEqual([
                            2,
                            {
                              hd: 2,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          ], Jest.Expect.expect(result));
              }));
        Jest.test("stack example 2 (push, pop)", (function (param) {
                var result = Curry._2(State.runStateT, /* [] */0, Curry._2($great$great$eq, push(1), (function (param) {
                            return Curry._2($great$great$eq, push(2), (function (param) {
                                          return Curry._2($great$great$eq, push(3), (function (param) {
                                                        return pop;
                                                      }));
                                        }));
                          })));
                return Jest.Expect.toEqual([
                            3,
                            {
                              hd: 2,
                              tl: {
                                hd: 1,
                                tl: /* [] */0
                              }
                            }
                          ], Jest.Expect.expect(result));
              }));
        Jest.test("stack example 3", (function (param) {
                var result = Curry._2(State.runStateT, /* [] */0, Curry._2($great$great$eq, push(1), (function (param) {
                            return Curry._2($great$great$eq, push(2), (function (param) {
                                          return Curry._2($great$great$eq, push(3), (function (param) {
                                                        return Curry._2($great$great$eq, pop, (function (param) {
                                                                      return Curry._2($great$great$eq, pop, (function (param) {
                                                                                    return Curry._2($great$great$eq, push(4), (function (param) {
                                                                                                  return push(5);
                                                                                                }));
                                                                                  }));
                                                                    }));
                                                      }));
                                        }));
                          })));
                return Jest.Expect.toEqual([
                            5,
                            {
                              hd: 5,
                              tl: {
                                hd: 4,
                                tl: {
                                  hd: 1,
                                  tl: /* [] */0
                                }
                              }
                            }
                          ], Jest.Expect.expect(result));
              }));
        Jest.test("stack example 4", (function (param) {
                var result = Curry._2(State.runStateT, /* [] */0, Curry._2($great$great$eq, Curry._2($great$great$eq, Curry._2($great$great$eq, Curry._2($great$great$eq, Curry._2($great$great$eq, Curry._2($great$great$eq, push(1), (function (param) {
                                                return push(2);
                                              })), (function (param) {
                                            return push(3);
                                          })), (function (param) {
                                        return pop;
                                      })), (function (param) {
                                    return pop;
                                  })), (function (param) {
                                return push(4);
                              })), (function (param) {
                            return Curry._2($less$$$great, push(5), (function (a) {
                                          return Math.imul(a, 100);
                                        }));
                          })));
                return Jest.Expect.toEqual([
                            500,
                            {
                              hd: 5,
                              tl: {
                                hd: 4,
                                tl: {
                                  hd: 1,
                                  tl: /* [] */0
                                }
                              }
                            }
                          ], Jest.Expect.expect(result));
              }));
        Jest.test("*> loses state", (function (param) {
                var result = Curry._2(State.runStateT, /* [] */0, Curry._2($star$great, Curry._2($star$great, push(1), push(2)), push(3)));
                return Jest.Expect.toEqual([
                            3,
                            {
                              hd: 3,
                              tl: /* [] */0
                            }
                          ], Jest.Expect.expect(result));
              }));
      }));

exports.State = State;
exports.$less$$great = $less$$great;
exports.$$great = $$great;
exports.$less$$$great = $less$$$great;
exports.$star$great = $star$great;
exports.$great$great$eq = $great$great$eq;
exports.Stack = Stack;
/* State Not a pure module */
